      Module 3 SQL 
			
// Define the Tables 

## First Create a Database 
query : CREATE DATABASE sql_training_hotwax ;
Query OK, 1 row affected (0.48 sec)

## Check if database is created or not 
query : SHOW DATABASES ; 
output :
+---------------------------------+
|          Database               |
+---------------------------------+
| sql_training_hotwax             |
| sys                             |
| world                           |
+---------------------------------+

## Use this Databases
query : USE sql_training_hotwax ;
Database changed

## Create a table Salespeople ;
query:
CREATE TABLE Salespeople (
    SNUM int NOT NULL ,
    SNAME varchar(255) ,
    CITY varchar(255) ,
    COMM int,
    PRIMARY KEY (SNUM)
    ) ;
Query OK, 0 rows affected (4.43 sec)


## Insert the Data into SalesPeople Table
query ;
INSERT INTO Salespeople VALUES
    (1001,'peel','London',12),
    (1002,'Serres,'SanJose'13);
    (1004,'Motika','London',11),
    (1007,'RifKin','Barcelona',15),
    (1003,'AxelRod','New York',10),
    (1008,'Fran','London',25) ;
Query OK, 6 rows affected (0.16 sec)
Records: 6  Duplicates: 0  Warnings: 0


## Create a table Customers and Orders ;

// Customer Table 
CREATE TABLE Customers (
    CNUM int NOT NULL ,
    CNAME varchar(255) ,
    CITY varchar(255) ,
    RATING int,
    SNUM int ,
    PRIMARY KEY (CNUM),
    FOREIGN KEY (SNUM) REFERENCES Salespeople(SNUM)
) ;

// Orders Table 
CREATE TABLE Orders (
    ONUM int NOT NULL ,
    AMT Decimal(18 , 2) ,
    ODATE varchar(10)  ,
    CNUM int,
    SNUM int ,
    PRIMARY KEY(ONUM) ,
    FOREIGN KEY (CNUM) REFERENCES Customers(CNUM) ,
    FOREIGN KEY (SNUM) REFERENCES Salespeople(SNUM)
    ) ;
		
## Insert Data into Customers and Orders table 

// Insert data into Customers Table 
INSERT INTO Customers VALUES
    (2001,'Hoffman','London',100,1001),
    (2002,'Giovanni','Rome',200,1003),
    (2003,'Liu','Sanjose',200,1002),
    (2004,'Grass','Berlin',300,1002),
    (2006,'Clemens','London',100,1001),
    (2008,'Cisneros','Sanjose',300,1007),
    (2007,'Pereira','Rome',100,1004) ;
		
// Insert data into Orders Table 
INSERT INTO Orders VALUES
    (3001,18.69,'10/03/90',2008,1007),
    (3003,767.19,'10/03/90',2001,1001),
    (3002,1900.10,'10/03/90',2007,1004),
    (3005,5160.45,'10/03/90',2003,1002),
    (3006,1098.16,'10/03/90',2008,1007),
    (3009,1713.23,'10/04/90',2002,1003),
    (3007,75.75,'10/04/90',2004,1002),
    (3008,4723.00,'10/05/90',2006,1001),
    (3010,1309.95,'10/06/90',2004,1002),
    (3011,9891.88,'10/06/90',2006,1001) ;
		
		
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

SOLVE THE FOLLOWING QUERIES 

1) List all the columns of the Salespeople table.

 SELECT column_name FROM information_schema.columns WHERE table_name = 'salespeople';
 output:
+-------------+
| COLUMN_NAME |
+-------------+
| CITY        |
| COMM        |
| SNAME       |
| SNUM        |
+-------------+
6 rows in set (0.00 sec)

2) List all customers with a rating of 100. 
 SELECT * FROM CUSTOMERS WHERE RATING = 100 ;
 output:
 +------+---------+--------+--------+------+
| CNUM | CNAME   | CITY   | RATING | SNUM |
+------+---------+--------+--------+------+
| 2001 | Hoffman | London |    100 | 1001 |
| 2006 | Clemens | London |    100 | 1001 |
| 2007 | Pereira | Rome   |    100 | 1004 |
+------+---------+--------+--------+------+

3) Find the largest order taken by each salesperson on each date. 
 
SELECT s.snum , s.sname , o.onum , o.odate , MAX(o.amt) FROM salespeople s
INNER JOIN
orders o
WHERE o.snum = s.snum GROUP BY o.snum , o.odate ;
output:
+------+---------+------+----------+------------+
| snum | sname   | onum | odate    | MAX(o.amt) |
+------+---------+------+----------+------------+
| 1007 | RifKin  | 3001 | 10/03/90 |    1098.16 |
| 1004 | Motika  | 3002 | 10/03/90 |    1900.10 |
| 1001 | Peel    | 3003 | 10/03/90 |     767.19 |
| 1002 | Serres  | 3005 | 10/03/90 |    5160.45 |
| 1002 | Serres  | 3007 | 10/04/90 |      75.75 |
| 1001 | Peel    | 3008 | 10/05/90 |    4723.00 |
| 1003 | AxelRod | 3009 | 10/04/90 |    1713.23 |
| 1002 | Serres  | 3010 | 10/06/90 |    1309.95 |
| 1001 | Peel    | 3011 | 10/06/90 |    9891.88 |
+------+---------+------+----------+------------+


4) Arrange the Order table by descending customer number.

SELECT * FROM orders order by cnum desc ;
output:
+------+---------+----------+------+------+
| ONUM | AMT     | ODATE    | CNUM | SNUM |
+------+---------+----------+------+------+
| 3001 |   18.69 | 10/03/90 | 2008 | 1007 |
| 3006 | 1098.16 | 10/03/90 | 2008 | 1007 |
| 3002 | 1900.10 | 10/03/90 | 2007 | 1004 |
| 3008 | 4723.00 | 10/05/90 | 2006 | 1001 |
| 3011 | 9891.88 | 10/06/90 | 2006 | 1001 |
| 3007 |   75.75 | 10/04/90 | 2004 | 1002 |
| 3010 | 1309.95 | 10/06/90 | 2004 | 1002 |
| 3005 | 5160.45 | 10/03/90 | 2003 | 1002 |
| 3009 | 1713.23 | 10/04/90 | 2002 | 1003 |
| 3003 |  767.19 | 10/03/90 | 2001 | 1001 |
+------+---------+----------+------+------+
10 rows in set (0.00 sec)

5) Find which salespeople currently have orders in the order table.

// Without Join
Select * from salespeople where snum in (select snum from orders) ;
output:
+------+---------+-----------+------+
| SNUM | SNAME   | CITY      | COMM |
+------+---------+-----------+------+
| 1001 | Peel    | London    |   12 |
| 1002 | Serres  | Sanjose   |   13 |
| 1003 | AxelRod | New York  |   10 |
| 1004 | Motika  | London    |   11 |
| 1007 | RifKin  | Barcelona |   15 |
+------+---------+-----------+------+
5 rows in set (0.00 sec)

// With Join
select s.* from salespeople as s
inner join
orders as o where o.snum = s.snum group by s.snum ;
output:
+------+---------+-----------+------+
| SNUM | SNAME   | CITY      | COMM |
+------+---------+-----------+------+
| 1001 | Peel    | London    |   12 |
| 1002 | Serres  | Sanjose   |   13 |
| 1003 | AxelRod | New York  |   10 |
| 1004 | Motika  | London    |   11 |
| 1007 | RifKin  | Barcelona |   15 |
+------+---------+-----------+------+
5 rows in set (0.00 sec)


6) List names of all customers matched with the salespeople serving them.

 SELECT c.cname AS customer , s.sname AS ServingBy from customers c
 INNER JOIN
 Salespeople s where c.snum = s.snum;
 output:
+----------+-----------+
| customer | ServingBy |
+----------+-----------+
| Hoffman  | Peel      |
| Giovanni | AxelRod   |
| Liu      | Serres    |
| Grass    | Serres    |
| Clemens  | Peel      |
| Pereira  | Motika    |
| Cisneros | RifKin    |
+----------+-----------+

7) Find the names and numbers of all salespeople who have more than one customer.

select sname , snum from salespeople where snum in (select snum from customers group by snum having count(snum) > 1 );
output:
+--------+------+
| sname  | snum |
+--------+------+
| Peel   | 1001 |
| Serres | 1002 |
+--------+------+

8) Count the orders of each of the salespeople and output the results in descending order. 
 
 select s.snum , s.sname , count(o.snum) as count from salespeople as s
 inner join
 orders as o where o.snum = s.snum
 group by o.snum order by count desc ;

 output :
+------+---------+-------+
| snum | sname   | count |
+------+---------+-------+
| 1001 | Peel    |     3 |
| 1002 | Serres  |     3 |
| 1007 | RifKin  |     2 |
| 1003 | AxelRod |     1 |
| 1004 | Motika  |     1 |
+------+---------+-------+

9) List the customer table if and only if one or more of the customers in the Customer table are located in SanJose. 

 select * from customers where (select count(city) from customers where city = 'sanjose')>=1 ;
output:
+------+----------+---------+--------+------+
| CNUM | CNAME    | CITY    | RATING | SNUM |
+------+----------+---------+--------+------+
| 2001 | Hoffman  | London  |    100 | 1001 |
| 2002 | Giovanni | Rome    |    200 | 1003 |
| 2003 | Liu      | Sanjose |    200 | 1002 |
| 2004 | Grass    | Berlin  |    300 | 1002 |
| 2006 | Clemens  | London  |    100 | 1001 |
| 2007 | Pereira  | Rome    |    100 | 1004 |
| 2008 | Cisneros | Sanjose |    300 | 1007 |
+------+----------+---------+--------+------+

10) Match salespeople to customers according to what city they live in.

select sname , cname , s.city from salespeople as s , customers as c where c.city = s.city ;
output:

+--------+----------+---------+
| sname  | cname    | city    |
+--------+----------+---------+
| Peel   | Hoffman  | London  |
| Motika | Hoffman  | London  |
| Fran   | Hoffman  | London  |
| Serres | Liu      | Sanjose |
| Peel   | Clemens  | London  |
| Motika | Clemens  | London  |
| Fran   | Clemens  | London  |
| Serres | Cisneros | Sanjose |
+--------+----------+---------+

11) Find all the customers in SanJose who have a rating above 200.

select cnum , cname from customers where city = "sanjose" and rating>200 ;

output:
+------+----------+---------+--------+------+
| CNUM | CNAME    | CITY    | RATING | SNUM |
+------+----------+---------+--------+------+
| 2008 | Cisneros | Sanjose |    300 | 1007 |
+------+----------+---------+--------+------+

12) List the names and commissions of all salespeople in London. 

select sname , comm from salespeople where city = 'london' ;

output:
+--------+------+
| sname  | comm |
+--------+------+
| Peel   |   12 |
| Motika |   11 |
| Fran   |   25 |
+--------+------+
3 rows in set (0.00 sec)

13) List all the orders of Salesperson Motika from the orders table.
# without join
select * from orders where snum in (select snum from salespeople where sname = "motika") ;
output:
+------+---------+----------+------+------+
| ONUM | AMT     | ODATE    | CNUM | SNUM |
+------+---------+----------+------+------+
| 3002 | 1900.10 | 10/03/90 | 2007 | 1004 |
+------+---------+----------+------+------+
1 row in set (0.21 sec)

# with JOIN
select s.sname , o.* from salespeople as s
inner join
orders as o where o.snum = s.snum and s.sname = "motika" ;
output:
+--------+------+---------+----------+------+------+
| sname  | ONUM | AMT     | ODATE    | CNUM | SNUM |
+--------+------+---------+----------+------+------+
| Motika | 3002 | 1900.10 | 10/03/90 | 2007 | 1004 |
+--------+------+---------+----------+------+------+

14) Find all customers who booked orders on October 3.

// without Join
SELECT * FROM customers WHERE cnum in (SELECT distinct(cnum) FROM orders WHERE odate = "10/03/90" );
output:
+------+----------+---------+--------+------+
| CNUM | CNAME    | CITY    | RATING | SNUM |
+------+----------+---------+--------+------+
| 2008 | Cisneros | Sanjose |    300 | 1007 |
| 2007 | Pereira  | Rome    |    100 | 1004 |
| 2001 | Hoffman  | London  |    100 | 1001 |
| 2003 | Liu      | Sanjose |    200 | 1002 |
+------+----------+---------+--------+------+

// With Join
SELECT DISTINCT o.cnum, c.cname FROM customers c INNER JOIN orders o ON o.cnum = c.cnum WHERE o.odate = "1990-10-03";

+------+----------+
| cnum | cname    |
+------+----------+
| 2001 | Hoffman  |
| 2003 | Liu      |
| 2008 | Cisneros |
| 2007 | Pereira  |
+------+----------+

15) Give the sums of the amounts from the Orders table, grouped by date, eliminating all those dates where the SUM was not at least 2000 above the maximum Amount. 
SELECT onum, SUM(amt) AS totalAmount ,odate FROM orders GROUP BY odate HAVING totalAmount - 2000 >= ( SELECT MAX(amt) From orders );
output:
Empty set (0.00 sec)

16) Select all orders that had amounts that were greater than at least one of the orders from October 6.\

SELECT * FROM orders WHERE amt > (SELECT MIN(amt) FROM orders WHERE odate="10/06/90") ;
output:
+------+---------+----------+------+------+
| ONUM | AMT     | ODATE    | CNUM | SNUM |
+------+---------+----------+------+------+
| 3002 | 1900.10 | 10/03/90 | 2007 | 1004 |
| 3005 | 5160.45 | 10/03/90 | 2003 | 1002 |
| 3008 | 4723.00 | 10/05/90 | 2006 | 1001 |
| 3009 | 1713.23 | 10/04/90 | 2002 | 1003 |
| 3011 | 9891.88 | 10/06/90 | 2006 | 1001 |
+------+---------+----------+------+------+

17) Write a query that uses the EXISTS operator to extract all salespeople who have customers with a rating of 300.

SELECT snum , sname FROM salespeople WHERE EXISTS 
(SELECT rating FROM customers WHERE customers.snum=salespeople.snum AND rating = 300 );

output:
+------+--------+
| snum | sname  |
+------+--------+
| 1002 | Serres |
| 1007 | RifKin |
+------+--------+
2 rows in set (0.02 sec)

18) Find all customers whose cnum is 1000 above the snum of Serres. 

SELECT * FROM customers WHERE cnum-1000 >= (SELECT snum FROM salespeople WHERE sname = "serres") ;
output:
+------+----------+---------+--------+------+
| CNUM | CNAME    | CITY    | RATING | SNUM |
+------+----------+---------+--------+------+
| 2002 | Giovanni | Rome    |    200 | 1003 |
| 2003 | Liu      | Sanjose |    200 | 1002 |
| 2004 | Grass    | Berlin  |    300 | 1002 |
| 2006 | Clemens  | London  |    100 | 1001 |
| 2007 | Pereira  | Rome    |    100 | 1004 |
| 2008 | Cisneros | Sanjose |    300 | 1007 |
+------+----------+---------+--------+------+
5 rows in set (0.06 sec)


19) Give the salespeople’s commissions as percentages instead of decimal numbers. 

SELECT snum, sname , comm AS CommissionPercent FROM salespeople ;
output:

+------+---------+-------------------+
| snum | sname   | CommissionPercent |
+------+---------+-------------------+
| 1001 | Peel    |                12 |
| 1002 | Serres  |                13 |
| 1003 | AxelRod |                10 |
| 1004 | Motika  |                11 |
| 1007 | RifKin  |                15 |
| 1008 | Fran    |                25 |
+------+---------+-------------------+
6 rows in set (0.00 sec)

20) Find the largest order taken by each salesperson on each date, eliminating those Maximum orders, which are less than 3000. 

SELECT s.snum , sname , o.amt , o.odate FROM salespeople AS s , orders AS o WHERE EXISTS(SELECT amt FROM orders WHERE s.snum = o.snum AND o.amt > 3000 GROUP BY odate) ;
output:
+------+--------+---------+----------+
| snum | sname  | amt     | odate    |
+------+--------+---------+----------+
| 1002 | Serres | 5160.45 | 10/03/90 |
| 1001 | Peel   | 4723.00 | 10/05/90 |
| 1001 | Peel   | 9891.88 | 10/06/90 |
+------+--------+---------+----------+
3 rows in set (1.02 sec)

21) List all the largest orders for October 3, for each salesperson.

SELECT snum ,MAX(amt) FROM orders WHERE odate = "10/03/90" GROUP BY snum ;
output:
+------+----------+
| snum | max(amt) |
+------+----------+
| 1001 |   767.19 |
| 1002 |  5160.45 |
| 1004 |  1900.10 |
| 1007 |  1098.16 |
+------+----------+
4 rows in set (0.00 sec)

22) Find all customers located in cities where Serres has customers. 

// without Join
SELECT cnum , cname , city FROM customers WHERE city IN (SELECT city FROM customers WHERE snum = (SELECT snum FROM salespeople WHERE sname = "serres")) ;
output: 
+------+----------+---------+
| cnum | cname    | city    |
+------+----------+---------+
| 2003 | Liu      | Sanjose |
| 2004 | Grass    | Berlin  |
| 2008 | Cisneros | Sanjose |
+------+----------+---------+

// With Join
SELECT cnum, cname FROM customers c INNER JOIN (SELECT  c.city FROM customers c INNER JOIN salespeople s ON s.snum = c.snum WHERE sname = 'Serres') t ON t.city = c.city;

+------+----------+
| cnum | cname    |
+------+----------+
| 2003 | Liu      |
| 2004 | Grass    |
| 2008 | Cisneros |
+------+----------+
 

23) Select all customers with a rating above 200.

SELECT cnum , cname , city , rating FROM customers WHERE rating > 200 ;
output:
+------+----------+---------+--------+
| cnum | cname    | city    | rating |
+------+----------+---------+--------+
| 2004 | Grass    | Berlin  |    300 |
| 2008 | Cisneros | Sanjose |    300 |
+------+----------+---------+--------+

24) Count the number of salespeople currently having orders in the orders table. 
SELECT COUNT(DISTINCT(snum)) AS Salespeople_Orders FROM orders ;
+--------------------+
| Salespeople_Orders |
+--------------------+
|                  5 |
+--------------------+

25) Write a query that produces all customers serviced by salespeople with a commission above 12%. Output the customer’s name, salesperson’s name and the salesperson’s rate of commission. 

SELECT c.cname , s.sname , s.comm FROM customers as c
INNER JOIN
salespeople AS s WHERE s.snum = c.snum AND s.comm>12 ;

output:
+----------+--------+------+
| cname    | sname  | comm |
+----------+--------+------+
| Liu      | Serres |   13 |
| Grass    | Serres |   13 |
| Cisneros | RifKin |   15 |
+----------+--------+------+

26) Find salespeople who have multiple customers. 

SELECT s.snum , s.sname , COUNT(c.snum) AS count FROM salespeople AS s
INNER JOIN
customers AS c ON c.snum = s.snum GROUP BY c.snum HAVING count>1 ;
output:
+------+--------+-------+
| snum | sname  | count |
+------+--------+-------+
| 1001 | Peel   |     2 |
| 1002 | Serres |     2 |
+------+--------+-------+

27) Find salespeople with customers located in their own cities.

SELECT s.sname , c.cname , s.city FROM salespeople AS s
INNER JOIN
customers AS c ON c.city = s.city AND c.snum = s.snum ;
output:
+--------+---------+---------+
| sname  | cname   | city    |
+--------+---------+---------+
| Peel   | Hoffman | London  |
| Serres | Liu     | Sanjose |
| Peel   | Clemens | London  |
+--------+---------+---------+
3 rows in set (0.00 sec)

28) Find all salespeople whose name starts with ‘P’ and fourth character is ‘I’.
SELECT * FROM salespeople WHERE SNAME LIKE "P__I%";
Empty set (0.03 sec)

29)  Write a query that uses a subquery to obtain all orders for the customer named ‘Cisneros’. Assume you do not know his customer number. 

SELECT onum , amt , odate , cnum FROM orders WHERE cnum IN (SELECT cnum FROM customers WHERE cname="cisneros") ;
output:
+------+---------+----------+------+
| onum | amt     | odate    | cnum |
+------+---------+----------+------+
| 3001 |   18.69 | 10/03/90 | 2008 |
| 3006 | 1098.16 | 10/03/90 | 2008 |
+------+---------+----------+------+
2 rows in set (0.00 sec)

30) Find the largest orders for Serres and Rifkin. 

SELECT s.sname , MAX(o.amt) FROM salespeople AS s
INNER JOIN
orders AS o WHERE o.snum=s.snum GROUP BY o.snum HAVING o.snum IN (SELECT snum FROM salespeople WHERE sname = "serres" OR sname="rifkin") ;

SELECT s.sname , MAX(o.amt) FROM salespeople AS s
INNER JOIN
orders AS o WHERE o.snum=s.snum AND s.sname IN ("serres","rifkin") GROUP BY o.snum ;

output:
+--------+------------+
| sname  | max(o.amt) |
+--------+------------+
| RifKin |    1098.16 |
| Serres |    5160.45 |
+--------+------------+

31) Sort the salespeople table in the following order: snum, sname, commission, city. 

SELECT * FROM Salespeople ORDER BY snum, sname, comm, city;
output:

+------+---------+-----------+------+
| snum | sname   | city      | comm |
+------+---------+-----------+------+
| 1001 | Peel    | London    |   12 |
| 1002 | Serres  | SanJose   |   13 |
| 1003 | AxelRod | New York  |   10 |
| 1004 | Motika  | London    |   11 |
| 1007 | Rifkin  | Barcelona |   15 |
| 1008 | Fran    | London    |   25 |
+------+---------+-----------+------+

32) Select all customers whose names fall in between ‘A’ and ‘G’ alphabetical range. 

// Exclusive
SELECT cnum, cname , city FROM customers WHERE cname BETWEEN 'a%' AND 'g%' ;
+------+----------+---------+
| cnum | cname    | city    |
+------+----------+---------+
| 2006 | Clemens  | London  |
| 2008 | Cisneros | Sanjose |
+------+----------+---------+

// Inclusive
SELECT cnum, cname , city FROM customers WHERE cname LIKE 'a%' OR cname LIKE 'g%' OR cname BETWEEN 'a%' AND 'g%' ;
output:
+------+----------+---------+
| cnum | cname    | city    |
+------+----------+---------+
| 2002 | Giovanni | Rome    |
| 2004 | Grass    | Berlin  |
| 2006 | Clemens  | London  |
| 2008 | Cisneros | Sanjose |
+------+----------+---------+

33) Select all the possible combinations of customers you can assign. 
SELECT c1.cname, c2.cname FROM customers c1,customers c2 WHERE c1.snum = c2.snum AND c1.cnum != c2.cnum;
output:
+---------+---------+
| cname   | cname   |
+---------+---------+
| Hoffman | Clemens |
| Liu     | Grass   |
| Grass   | Liu     |
| Clemens | Hoffman |
+---------+---------+

SELECT c1.cname "customer 1", c2.cname "custsomer 2" FROM customers c1 INNER JOIN customers c2 ON c1.snum = c2.snum WHERE c1.cnum <> c2.cnum AND c1.cname < c2.cname;

+------------+------------+
| customer 1 | customer 2 |
+------------+------------+
| Clemens    | Hoffman    |
| Grass      | Liu        |
+------------+------------+


34) Select all orders that are greater than the average for October 4. 

 select * from orders where amt > (select avg(amt) from orders group by odate having odate="10/04/90") order by amt ;
output:
+------+---------+----------+------+------+
| ONUM | AMT     | ODATE    | CNUM | SNUM |
+------+---------+----------+------+------+
| 3006 | 1098.16 | 10/03/90 | 2008 | 1007 |
| 3010 | 1309.95 | 10/06/90 | 2004 | 1002 |
| 3009 | 1713.23 | 10/04/90 | 2002 | 1003 |
| 3002 | 1900.10 | 10/03/90 | 2007 | 1004 |
| 3008 | 4723.00 | 10/05/90 | 2006 | 1001 |
| 3005 | 5160.45 | 10/03/90 | 2003 | 1002 |
| 3011 | 9891.88 | 10/06/90 | 2006 | 1001 |
+------+---------+----------+------+------+

35) Write a select command using correlated subquery that selects the names and numbers of all customers with ratings equal to the maximum for their city. 

SELECT cnum , cname FROM customers c1 WHERE rating = (SELECT MAX(rating) FROM customers c2 WHERE c1.city = c2.city);
output:
+------+----------+---------+--------+------+
| CNUM | CNAME    | CITY    | RATING | SNUM |
+------+----------+---------+--------+------+
| 2001 | Hoffman  | London  |    100 | 1001 |
| 2002 | Giovanni | Rome    |    200 | 1003 |
| 2004 | Grass    | Berlin  |    300 | 1002 |
| 2006 | Clemens  | London  |    100 | 1001 |
| 2008 | Cisneros | Sanjose |    300 | 1007 |
+------+----------+---------+--------+------+

36) Write a query that totals the orders for each day and places the results in descending order. 

select odate, sum(amt) as Total from orders group by odate order by total desc ;

output:
+----------+----------+
| odate    | Total    |
+----------+----------+
| 10/06/90 | 11201.83 |
| 10/03/90 |  8944.59 |
| 10/05/90 |  4723.00 |
| 10/04/90 |  1788.98 |
+----------+----------+

37) Write a select command that produces the rating followed by the name of each customer in SanJose.

select cnum , cname , rating from customers where city ="sanjose" ;
output:
+------+----------+--------+
| cnum | cname    | rating |
+------+----------+--------+
| 2003 | Liu      |    200 |
| 2008 | Cisneros |    300 |
+------+----------+--------+

38) Find all orders with amounts smaller than any amount for a customer in SanJose.
 
SELECT * FROM orders WHERE amt < ANY ( SELECT amt FROM orders WHERE cnum IN (SELECT cnum FROM customers WHERE city = "sanjose" ) ) ;
OR
SELECT * FROM orders WHERE amt < ( SELECT MAX(amt) FROM orders WHERE cnum IN (SELECT cnum FROM customers WHERE city = "sanjose" ) ) ;
+------+---------+----------+------+------+
| ONUM | AMT     | ODATE    | CNUM | SNUM |
+------+---------+----------+------+------+
| 3001 |   18.69 | 10/03/90 | 2008 | 1007 |
| 3002 | 1900.10 | 10/03/90 | 2007 | 1004 |
| 3003 |  767.19 | 10/03/90 | 2001 | 1001 |
| 3006 | 1098.16 | 10/03/90 | 2008 | 1007 |
| 3007 |   75.75 | 10/04/90 | 2004 | 1002 |
| 3008 | 4723.00 | 10/05/90 | 2006 | 1001 |
| 3009 | 1713.23 | 10/04/90 | 2002 | 1003 |
| 3010 | 1309.95 | 10/06/90 | 2004 | 1002 |
+------+---------+----------+------+------+

SELECT onum, amt FROM orders WHERE amt < (SELECT MAX(o.amt) FROM orders o INNER JOIN customers c ON c.cnum = o.cnum  WHERE c.city = 'SanJose');
+------+---------+
| onum | amt     |
+------+---------+
| 3001 |   18.69 |
| 3003 |  767.19 |
| 3002 | 1900.10 |
| 3006 | 1098.16 |
| 3009 | 1713.23 |
| 3007 |   75.75 |
| 3008 | 4723.00 |
| 3010 | 1309.95 |
+------+---------+

39) Find all orders with above average amounts for their customers. 

SELECT * FROM orders o1 WHERE amt > (SELECT AVG(o2.amt) FROM orders o2 WHERE o1.cnum=o2.cnum GROUP BY o2.cnum);
+------+---------+----------+------+------+
| ONUM | AMT     | ODATE    | CNUM | SNUM |
+------+---------+----------+------+------+
| 3006 | 1098.16 | 10/03/90 | 2008 | 1007 |
| 3010 | 1309.95 | 10/06/90 | 2004 | 1002 |
| 3011 | 9891.88 | 10/06/90 | 2006 | 1001 |
+------+---------+----------+------+------+

40) Write a query that selects the highest rating in each city.

SELECT city , MAX(rating) AS highest_Rating FROM customers GROUP BY city ;
output:
+---------+----------------+
| city    | highest_Rating |
+---------+----------------+
| London  |            100 |
| Rome    |            200 |
| Sanjose |            300 |
| Berlin  |            300 |
+---------+----------------+

41) Write a query that calculates the amount of the salesperson’s commission on each order by a customer with a rating above 100.00.

SELECT * , s.comm /100 * o.amt as Commision FROM salespeople s, orders o WHERE o.snum = s.snum AND o.cnum IN (SELECT cnum FROM customers WHERE rating > 100) ;
output:
+------+---------+-----------+------+------+---------+----------+------+------+------------+
| SNUM | SNAME   | CITY      | COMM | ONUM | AMT     | ODATE    | CNUM | SNUM | Commision  |
+------+---------+-----------+------+------+---------+----------+------+------+------------+
| 1003 | AxelRod | New York  |   10 | 3009 | 1713.23 | 10/04/90 | 2002 | 1003 | 171.323000 |
| 1002 | Serres  | Sanjose   |   13 | 3005 | 5160.45 | 10/03/90 | 2003 | 1002 | 670.858500 |
| 1002 | Serres  | Sanjose   |   13 | 3007 |   75.75 | 10/04/90 | 2004 | 1002 |   9.847500 |
| 1002 | Serres  | Sanjose   |   13 | 3010 | 1309.95 | 10/06/90 | 2004 | 1002 | 170.293500 |
| 1007 | RifKin  | Barcelona |   15 | 3001 |   18.69 | 10/03/90 | 2008 | 1007 |   2.803500 |
| 1007 | RifKin  | Barcelona |   15 | 3006 | 1098.16 | 10/03/90 | 2008 | 1007 | 164.724000 |
+------+---------+-----------+------+------+---------+----------+------+------+------------+

With Join
SELECT (o.amt * s.comm)/ 100 commission, s.sname,o.onumFROM orders o INNER JOIN SALESPEOPLE s ON s.snum = o.snum INNER JOIN customers c ON o.cnum = c.cnum WHERE rating > 100;
+------------+---------+------+
| commission | sname   | onum |
+------------+---------+------+
|   2.803500 | Rifkin  | 3001 |
| 670.858500 | Serres  | 3005 |
| 164.724000 | Rifkin  | 3006 |
| 171.323000 | AxelRod | 3009 |
|   9.847500 | Serres  | 3007 |
| 170.293500 | Serres  | 3010 |
+------------+---------+------+

42) Count the customers with ratings above SanJose’s average. 

// Count of Customers 
SELECT COUNT(*) FROM Customers WHERE rating  > (SELECT AVG(rating) FROM Customers WHERE city='SanJose');
+-------+
| count |
+-------+
|     2 |
+-------+

// those 2 customers are Grass and Cisneros.
SELECT cnum , cname , rating FROM customers WHERE rating > ( SELECT AVG(rating) FROM customers WHERE city = "sanjose");
output: 
+------+----------+--------+
| cnum | cname    | rating |
+------+----------+--------+
| 2004 | Grass    |    300 |
| 2008 | Cisneros |    300 |
+------+----------+--------+

43) Find all salespeople that are located in either Barcelona or London. 

select * from salespeople where city in ("Barcelona","london") ;
output:
+------+--------+-----------+------+
| SNUM | SNAME  | CITY      | COMM |
+------+--------+-----------+------+
| 1001 | Peel   | London    |   12 |
| 1004 | Motika | London    |   11 |
| 1007 | RifKin | Barcelona |   15 |
| 1008 | Fran   | London    |   25 |
+------+--------+-----------+------+
4 rows in set (0.00 sec)

44) Find all salespeople with only one customer. 

select * from salespeople where snum in (select snum from customers group by snum having count(snum)<=1) ;
output: 
+------+---------+-----------+------+
| SNUM | SNAME   | CITY      | COMM |
+------+---------+-----------+------+
| 1003 | AxelRod | New York  |   10 |
| 1004 | Motika  | London    |   11 |
| 1007 | RifKin  | Barcelona |   15 |
+------+---------+-----------+------+

45) Write a query that joins the Customer table to itself to find all pairs or customers served by a single salesperson.

SELECT c1.cname customer1, c2.cname customer2 , c1.snum as ServedBy FROM customers c1
INNER JOIN
customers c2 WHERE c1.snum = c2.snum AND c1.cname != c2.cname;
output:
+-----------+-----------+----------+
| customer1 | customer2 | ServedBy |
+-----------+-----------+----------+
| Clemens   | Hoffman   |     1001 |
| Grass     | Liu       |     1002 |
| Liu       | Grass     |     1002 |
| Hoffman   | Clemens   |     1001 |
+-----------+-----------+----------+

SELECT c1.cname "customer 1",  c2.cname "customer 2" FROM  customers c1 INNER JOIN customers c2 ON c1.snum = c2.snum WHERE c1.cnum <> c2.cnum AND c1.cname < c2.cname;

+------------+------------+
| customer 1 | customer 2 |
+------------+------------+
| Clemens    | Hoffman    |
| Grass      | Liu        |
+------------+------------+

46) Write a query that will give you all orders for more than $1000.00. 

select * from orders where amt > 1000.00 ;
output:
+------+---------+----------+------+------+
| ONUM | AMT     | ODATE    | CNUM | SNUM |
+------+---------+----------+------+------+
| 3002 | 1900.10 | 10/03/90 | 2007 | 1004 |
| 3005 | 5160.45 | 10/03/90 | 2003 | 1002 |
| 3006 | 1098.16 | 10/03/90 | 2008 | 1007 |
| 3008 | 4723.00 | 10/05/90 | 2006 | 1001 |
| 3009 | 1713.23 | 10/04/90 | 2002 | 1003 |
| 3010 | 1309.95 | 10/06/90 | 2004 | 1002 |
| 3011 | 9891.88 | 10/06/90 | 2006 | 1001 |
+------+---------+----------+------+------+

47) Write a query that lists each order number followed by the name of the customer who made that order.

// without join
select o.onum , c.cname from orders as o , customers as c where o.cnum = c.cnum order by o.onum ;
output:
+------+----------+
| onum | cname    |
+------+----------+
| 3001 | Cisneros |
| 3002 | Pereira  |
| 3003 | Hoffman  |
| 3005 | Liu      |
| 3006 | Cisneros |
| 3007 | Grass    |
| 3008 | Clemens  |
| 3009 | Giovanni |
| 3010 | Grass    |
| 3011 | Clemens  |
+------+----------+

// With join
select o.onum , c.cname from orders as o
inner join
customers as c where o.cnum = c.cnum;
+------+----------+
| onum | cname    |
+------+----------+
| 3003 | Hoffman  |
| 3009 | Giovanni |
| 3005 | Liu      |
| 3007 | Grass    |
| 3010 | Grass    |
| 3008 | Clemens  |
| 3011 | Clemens  |
| 3002 | Pereira  |
| 3001 | Cisneros |
| 3006 | Cisneros |
+------+----------+
10 rows in set (0.00 sec)

48) Write a query that selects all the customers whose ratings are equal to or greater than ANY(in the SQL sense) of ‘Serres’. 

SELECT * FROM customers WHERE rating >= ANY (SELECT rating FROM customers WHERE snum = (SELECT snum FROM salespeople WHERE sname = "serres") ) ;
+------+----------+---------+--------+------+
| CNUM | CNAME    | CITY    | RATING | SNUM |
+------+----------+---------+--------+------+
| 2002 | Giovanni | Rome    |    200 | 1003 |
| 2003 | Liu      | Sanjose |    200 | 1002 |
| 2004 | Grass    | Berlin  |    300 | 1002 |
| 2008 | Cisneros | Sanjose |    300 | 1007 |
+------+----------+---------+--------+------+

49) Write two queries that will produce all orders taken on October 3 or October 4.
 
select * from orders where odate = "10/03/90" or odate ="10/04/90" ;
output:
+------+---------+----------+------+------+
| ONUM | AMT     | ODATE    | CNUM | SNUM |
+------+---------+----------+------+------+
| 3001 |   18.69 | 10/03/90 | 2008 | 1007 |
| 3002 | 1900.10 | 10/03/90 | 2007 | 1004 |
| 3003 |  767.19 | 10/03/90 | 2001 | 1001 |
| 3005 | 5160.45 | 10/03/90 | 2003 | 1002 |
| 3006 | 1098.16 | 10/03/90 | 2008 | 1007 |
| 3007 |   75.75 | 10/04/90 | 2004 | 1002 |
| 3009 | 1713.23 | 10/04/90 | 2002 | 1003 |
+------+---------+----------+------+------+

select * from orders where odate in ("10/03/90","10/04/90") ;
+------+---------+----------+------+------+
| ONUM | AMT     | ODATE    | CNUM | SNUM |
+------+---------+----------+------+------+
| 3001 |   18.69 | 10/03/90 | 2008 | 1007 |
| 3002 | 1900.10 | 10/03/90 | 2007 | 1004 |
| 3003 |  767.19 | 10/03/90 | 2001 | 1001 |
| 3005 | 5160.45 | 10/03/90 | 2003 | 1002 |
| 3006 | 1098.16 | 10/03/90 | 2008 | 1007 |
| 3007 |   75.75 | 10/04/90 | 2004 | 1002 |
| 3009 | 1713.23 | 10/04/90 | 2002 | 1003 |
+------+---------+----------+------+------+
7 rows in set (0.02 sec)

50) Find only those customers whose ratings are higher than every customer in Rome. 

select * from customers where rating > (select max(rating) from customers where city="rome") ;
output:
+------+----------+---------+--------+------+
| CNUM | CNAME    | CITY    | RATING | SNUM |
+------+----------+---------+--------+------+
| 2004 | Grass    | Berlin  |    300 | 1002 |
| 2008 | Cisneros | Sanjose |    300 | 1007 |
+------+----------+---------+--------+------+

51) Write a query on the Customers table whose output will exclude all customers with a rating&lt;= 100.00, unless they are located in Rome. 

select * from customers where city="rome" or  rating != 100 ;
output:
+------+----------+---------+--------+------+
| CNUM | CNAME    | CITY    | RATING | SNUM |
+------+----------+---------+--------+------+
| 2002 | Giovanni | Rome    |    200 | 1003 |
| 2003 | Liu      | Sanjose |    200 | 1002 |
| 2004 | Grass    | Berlin  |    300 | 1002 |
| 2007 | Pereira  | Rome    |    100 | 1004 |
| 2008 | Cisneros | Sanjose |    300 | 1007 |
+------+----------+---------+--------+------+
5 rows in set (0.00 sec)

52) Find all rows from the customer’s table for which the salesperson number is 1001.

select * from customers where snum = 1001 ;
output:
+------+---------+--------+--------+------+
| CNUM | CNAME   | CITY   | RATING | SNUM |
+------+---------+--------+--------+------+
| 2001 | Hoffman | London |    100 | 1001 |
| 2006 | Clemens | London |    100 | 1001 |
+------+---------+--------+--------+------+
2 rows in set (0.14 sec)

53) Find the total amount in orders for each salesperson where their total of amounts are greater than the amount of the largest order in the table.

SELECT Total,SNUM FROM (SELECT SUM(AMT) AS TOTAL,SNUM FROM orders GROUP BY SNUM) AS O WHERE Total > (SELECT MAX(AMT) FROM orders);
+--------------------+------+
| Total              | SNUM |
+--------------------+------+
| 15382.069885253906 | 1001 |
+--------------------+------+
3 rows in set (0.05 sec)

54) Write a query that selects all orders except those with zero or null in the Amt field from table.

SELECT onum, amt FROM orders WHERE  amt <> 0 AND amt IS NOT NULL;

+------+---------+
| onum | amt     |
+------+---------+
| 3001 |   18.69 |
| 3003 |  767.19 |
| 3002 | 1900.10 |
| 3005 | 5160.45 |
| 3006 | 1098.16 |
| 3009 | 1713.23 |
| 3007 |   75.75 |
| 3008 | 4723.00 |
| 3010 | 1309.95 |
| 3011 | 9891.88 |
+------+---------+

55) Produce all combinations of salespeople and customer names such that the former precedes the latter alphabetically, and the latter has a rating of less than 200. 

SELECT s.sname, c.cname, c.rating FROM customers c, salespeople s WHERE c.snum = s.snum AND s.sname < c.cname AND c.rating < 200;
output:
+--------+---------+--------+
| sname  | cname   | rating |
+--------+---------+--------+
| Motika | Pereira |    100 |
+--------+---------+--------+

56) Find all salespeople name and commission.

SELECT sname , comm FROM salespeople ;
output:
+---------+------+
| sname   | comm |
+---------+------+
| Peel    |   12 |
| Serres  |   13 |
| AxelRod |   10 |
| Motika  |   11 |
| RifKin  |   15 |
| Fran    |   25 |
+---------+------+

57) Write a query that produces the names and cities of all customers with the same rating as Hoffman. Write the query using Hoffman’s cnum rather than his rating, so that it would still be usable if his rating is changed.

SELECT cname , city FROM customers WHERE rating = (SELECT rating FROM customers WHERE cnum = 2001);
output:
+---------+--------+
| cname   | city   |
+---------+--------+
| Hoffman | London |
| Clemens | London |
| Pereira | Rome   |
+---------+--------+

58) Find all salespeople for whom there are customers that follow them in alphabetical order. 

SELECT s.snum, s.sname, c.cname FROM customers c, salespeople s WHERE s.snum = c.snum AND s.sname < c.cname;
output:
+------+---------+----------+
| snum | sname   | cname    |
+------+---------+----------+
| 1003 | AxelRod | Giovanni |
| 1004 | Motika  | Pereira  |
+------+---------+----------+

59) Write a query that produces the names and ratings of all customers who have average orders.

SELECT c.cname, c.rating FROM customers c
INNER JOIN
orders o ON c.cnum = o.cnum AND o.amt >(SELECT AVG(amt) AS amt FROM orders) GROUP BY cname;
output:
+----------+--------+
| cname    | rating |
+----------+--------+
| liu      |    200 |
| Cisneros |    100 |
+----------+--------+


60) Find the SUM of all Amounts from the orders table. 

SELECT SUM(amt) FROM orders ;
output:
+----------+
| SUM(amt) |
+----------+
| 26658.40 |
+----------+

61) Write a SELECT command that produces the order number, amount, and the date from rows in the order table.

SELECT onum , amt , odate FROM orders ;
output:
+------+---------+----------+
| onum | amt     | odate    |
+------+---------+----------+
| 3001 |   18.69 | 10/03/90 |
| 3002 | 1900.10 | 10/03/90 |
| 3003 |  767.19 | 10/03/90 |
| 3005 | 5160.45 | 10/03/90 |
| 3006 | 1098.16 | 10/03/90 |
| 3007 |   75.75 | 10/04/90 |
| 3008 | 4723.00 | 10/05/90 |
| 3009 | 1713.23 | 10/04/90 |
| 3010 | 1309.95 | 10/06/90 |
| 3011 | 9891.88 | 10/06/90 |
+------+---------+----------+

62) Count the number of non NULL rating fields in the Customers table (including repeats).

SELECT COUNT(rating) FROM customers WHERE rating != 0 OR rating != NULL  ;
output:
+---------------+
| COUNT(rating) |
+---------------+
|             7 |
+---------------+

63) Write a query that gives the names of both the salesperson and the customer for each order after the order number. 

SELECT onum, sname , cname FROM orders o , salespeople s , customers c WHERE o.cnum = c.cnum AND s.snum = o.snum ;
output:
+------+---------+----------+
| onum | sname   | cname    |
+------+---------+----------+
| 3003 | Peel    | Hoffman  |
| 3009 | AxelRod | Giovanni |
| 3005 | Serres  | Liu      |
| 3007 | Serres  | Grass    |
| 3010 | Serres  | Grass    |
| 3008 | Peel    | Clemens  |
| 3011 | Peel    | Clemens  |
| 3002 | Motika  | Pereira  |
| 3001 | RifKin  | Cisneros |
| 3006 | RifKin  | Cisneros |
+------+---------+----------+

// with Join
SELECT o.onum , s.sname , c.cname FROM orders o
INNER JOIN customers c
ON o.cnum = c.cnum
INNER JOIN salespeople s
ON c.snum = s.snum;
+------+---------+----------+
| onum | sname   | cname    |
+------+---------+----------+
| 3003 | Peel    | Hoffman  |
| 3009 | AxelRod | Giovanni |
| 3005 | Serres  | Liu      |
| 3007 | Serres  | Grass    |
| 3010 | Serres  | Grass    |
| 3008 | Peel    | Clemens  |
| 3011 | Peel    | Clemens  |
| 3002 | Motika  | Pereira  |
| 3001 | RifKin  | Cisneros |
| 3006 | RifKin  | Cisneros |
+------+---------+----------+
10 rows in set (0.03 sec)

64) List the commissions of all salespeople servicing customers in London. 

SELECT * FROM salespeople WHERE snum IN ( SELECT snum FROM customers WHERE city = "london") ;
output: 
+------+-------+--------+------+
| SNUM | SNAME | CITY   | COMM |
+------+-------+--------+------+
| 1001 | Peel  | London |   12 |
+------+-------+--------+------+

65) Write a query using ANY or ALL that will find all salespeople who have no customers located in their city. 

SELECT * FROM salespeople 
WHERE snum = ANY ( SELECT c.snum FROM customers c , salespeople s WHERE s.snum=c.snum and s.city != c.city ) ;

output:
+------+---------+-----------+------+
| SNUM | SNAME   | CITY      | COMM |
+------+---------+-----------+------+
| 1002 | Serres  | Sanjose   |   13 |
| 1003 | AxelRod | New York  |   10 |
| 1004 | Motika  | London    |   11 |
| 1007 | RifKin  | Barcelona |   15 |
+------+---------+-----------+------+

SELECT * FROM salespeople
INNER JOIN
customers WHERE customers.snum = salespeople.snum AND customers.city != salespeople.city ;
+------+---------+-----------+------+------+----------+---------+--------+------+
| SNUM | SNAME   | CITY      | COMM | CNUM | CNAME    | CITY    | RATING | SNUM |
+------+---------+-----------+------+------+----------+---------+--------+------+
| 1003 | AxelRod | New York  |   10 | 2002 | Giovanni | Rome    |    200 | 1003 |
| 1002 | Serres  | Sanjose   |   13 | 2004 | Grass    | Berlin  |    300 | 1002 |
| 1004 | Motika  | London    |   11 | 2007 | Pereira  | Rome    |    100 | 1004 |
| 1007 | RifKin  | Barcelona |   15 | 2008 | Cisneros | Sanjose |    300 | 1007 |
+------+---------+-----------+------+------+----------+---------+--------+------+


66) Write a query using the EXISTS operator that selects all salespeople with customers located in their cities who are not assigned to them. 

SELECT * FROM salespeople s WHERE EXISTS ( SELECT * FROM customers c WHERE c.city = s.city and s.snum != c.snum) ;

output: 
+------+--------+---------+------+
| SNUM | SNAME  | CITY    | COMM |
+------+--------+---------+------+
| 1004 | Motika | London  |   11 |
| 1008 | Fran   | London  |   25 |
| 1002 | Serres | Sanjose |   13 |
+------+--------+---------+------+
3 rows in set (0.00 sec)

67) Write a query that selects all customers serviced by Peel or Motika. (Hint: The snum field relates the 2 tables to one another.) 

SELECT cnum , cname FROM customers WHERE snum IN (SELECT snum FROM salespeople WHERE sname IN ("motika", "peel" ) ) ;

output: 
+------+---------+
| cnum | cname   |
+------+---------+
| 2001 | Hoffman |
| 2006 | Clemens |
| 2007 | Pereira |
+------+---------+

SELECT c.cnum, c.cname,  s.sname FROM customers c INNER JOIN salespeople s ON c.snum = s.snum WHERE s.sname = 'Peel' || s.sname = 'Motika';

+------+---------+--------+
| cnum | cname   | sname  |
+------+---------+--------+
| 2001 | Hoffman | Peel   |
| 2006 | Clemens | Peel   |
| 2007 | Pereira | Motika |
+------+---------+--------+

68) Count the number of salespeople registering orders for each day. (If a salesperson has more than one order on a given day, he or she should be counted only once.) 

SELECT COUNT(DISTINCT snum) FROM orders GROUP BY odate ;
output:
+----------------------+
| COUNT(DISTINCT snum) |
+----------------------+
|                    4 |
|                    2 |
|                    1 |
|                    2 |
+----------------------+

69) Find all orders attributed to salespeople who live in London.

SELECT onum , amt FROM orders WHERE snum IN (SELECT snum FROM salespeople WHERE city = "london" ) ;
output:
+------+---------+
| onum | amt     |
+------+---------+
| 3003 |  767.19 |
| 3008 | 4723.00 |
| 3011 | 9891.88 |
| 3002 | 1900.10 |
+------+---------+

70) Find all orders by customers not located in the same cities as their salespeople. 

SELECT onum , amt , odate FROM orders WHERE cnum IN (SELECT c.cnum FROM customers c , salespeople s WHERE c.city != s.city AND s.snum=c.snum) ;
output:
+------+---------+----------+
| onum | amt     | odate    |
+------+---------+----------+
| 3009 | 1713.23 | 10/04/90 |
| 3007 |   75.75 | 10/04/90 |
| 3010 | 1309.95 | 10/06/90 |
| 3002 | 1900.10 | 10/03/90 |
| 3001 |   18.69 | 10/03/90 |
| 3006 | 1098.16 | 10/03/90 |
+------+---------+----------+

71) Find all salespeople who have customers with more than one current order.

SELECT sname FROM salespeople WHERE snum IN ( SELECT snum FROM customers WHERE cnum IN (SELECT cnum FROM orders GROUP BY cnum HAVING COUNT(onum) > 1) ) ;

output:
+--------+
| sname  |
+--------+
| Peel   |
| Serres |
| RifKin |
+--------+

72) Write a query that extracts from the customer’s table every customer assigned to a salesperson, who is currently having at least one another customer(besides the customer being selected) with orders in the Orders Table.

SELECT cnum , cname FROM 
(SELECT cnum ,cname , snum FROM customers WHERE snum IN (SELECT snum FROM customers GROUP BY snum HAVING COUNT(snum) > 1 ) ) AS myTable  
WHERE cnum IN (SELECT cnum FROM orders);
output: 

+------+---------+
| cnum | cname   |
+------+---------+
| 2001 | Hoffman |
| 2003 | Liu     |
| 2004 | Grass   |
| 2006 | Clemens |
+------+---------+


73) Write a query on the customer’s table that will find the highest rating in each city. Put the output in this form: for the city (city), the highest rating is (rating). 

SELECT city , MAX(rating) AS Rating FROM customers GROUP BY city ;
output:
+---------+--------+
| city    | Rating |
+---------+--------+
| London  |    100 |
| Rome    |    200 |
| Sanjose |    300 |
| Berlin  |    300 |
+---------+--------+

74) Write a query that will produce the snum values of all salespeople with orders, having amt greater than 1000 in the Orders Table(without repeats).

SELECT DISTINCT(snum) FROM orders WHERE amt > 1000 ;
output:

+------+
| snum |
+------+
| 1001 |
| 1002 |
| 1003 |
| 1004 |
| 1007 |
+------+


75) Write a query that lists customers in a descending order of rating. Output the rating field first, followed by the customer’s names and numbers. 

SELECT Rating , cname AS Name , cnum AS Number FROM customers ORDER BY rating DESC ;
output:
+--------+----------+--------+
| Rating | Name     | Number |
+--------+----------+--------+
|    300 | Grass    |   2004 |
|    300 | Cisneros |   2008 |
|    200 | Giovanni |   2002 |
|    200 | Liu      |   2003 |
|    100 | Hoffman  |   2001 |
|    100 | Clemens  |   2006 |
|    100 | Pereira  |   2007 |
+--------+----------+--------+

76) Find the average commission for salespeople in London. 

SELECT AVG(comm) AS AverageCommision FROM salespeople WHERE city = "London" ;
output:
+------------------+
| AverageCommision |
+------------------+
|          16.0000 |
+------------------+

77) Find all orders credited to the same salesperson who serves Hoffman.(cnum 2001). 

SELECT * FROM orders WHERE snum IN (SELECT snum FROM customers WHERE cname = "hoffman") ; 
output:
+------+---------+----------+------+------+
| ONUM | AMT     | ODATE    | CNUM | SNUM |
+------+---------+----------+------+------+
| 3003 |  767.19 | 10/03/90 | 2001 | 1001 |
| 3008 | 4723.00 | 10/05/90 | 2006 | 1001 |
| 3011 | 9891.88 | 10/06/90 | 2006 | 1001 |
+------+---------+----------+------+------+
3 rows in set (0.00 sec)

SELECT o.onum,  o.snum, o.odate, o.amt FROM orders o 
INNER JOIN 
customers c ON o.snum = c.snum WHERE c.cname = 'Hoffman';

+------+------+------------+---------+
| onum | snum | odate      | amt     |
+------+------+------------+---------+
| 3003 | 1001 | 1990-10-03 |  767.19 |
| 3008 | 1001 | 1990-10-05 | 4723.00 |
| 3011 | 1001 | 1990-10-06 | 9891.88 |
+------+------+------------+---------+

78) Find all salespeople whose commission is in between 0.10 and 0.12(both inclusive). 

SELECT * FROM salespeople WHERE comm/100 = 0.10 OR comm/100 = 0.12 OR comm/100 BETWEEN 0.10 AND 0.12 ;
output:
+------+---------+----------+------+
| SNUM | SNAME   | CITY     | COMM |
+------+---------+----------+------+
| 1001 | Peel    | London   |   12 |
| 1003 | AxelRod | New York |   10 |
| 1004 | Motika  | London   |   11 |
+------+---------+----------+------+
3 rows in set (0.00 sec)


79) Write a query that will give you the names and cities of all salespeople in London with a commission above 0.10.

SELECT sname , city FROM salespeople WHERE city = "london" AND comm/100 > 0.10 ;
output:
+--------+--------+
| sname  | city   |
+--------+--------+
| Peel   | London |
| Motika | London |
| Fran   | London |
+--------+--------+

80) Write a query that selects each customer’s smallest order

SELECT c.cname , o.cnum , MIN(o.amt) AS SmallestOrder FROM orders o
INNER JOIN
customers c ON c.cnum = o.cnum GROUP BY o.cnum ;

output:
+----------+------+---------------+
| cname    | cnum | SmallestOrder |
+----------+------+---------------+
| Hoffman  | 2001 |        767.19 |
| Giovanni | 2002 |       1713.23 |
| Liu      | 2003 |       5160.45 |
| Grass    | 2004 |         75.75 |
| Clemens  | 2006 |       4723.00 |
| Pereira  | 2007 |       1900.10 |
| Cisneros | 2008 |         18.69 |
+----------+------+---------------+
7 rows in set (0.00 sec)

81) Write a query that selects the first customer in alphabetical order whose name begins with ‘G’. 

SELECT * FROM customers WHERE cname LIKE 'G%' ORDER BY cname LIMIT 1 ;
output:
+------+----------+------+--------+------+
| CNUM | CNAME    | CITY | RATING | SNUM |
+------+----------+------+--------+------+
| 2002 | Giovanni | Rome |    200 | 1003 |
+------+----------+------+--------+------+


82) Write a query that counts the number of different non NULL city values in the customers table. 

SELECT COUNT(DISTINCT(city)) FROM customers ;

output:
+-----------------------+
| COUNT(DISTINCT(city)) |
+-----------------------+
|                     4 |
+-----------------------+

83) Find the average amount from the Orders Table.

SELECT AVG(amt) FROM orders;
+-------------+
| AVG(amt)    |
+-------------+
| 2665.840000 |
+-------------+


84) Find all customers who are not located in SanJose and whose rating is above 200. 

SELECT * FROM customers WHERE city != "sanjose" AND rating>200 ;
output:
+------+-------+--------+--------+------+
| CNUM | CNAME | CITY   | RATING | SNUM |
+------+-------+--------+--------+------+
| 2004 | Grass | Berlin |    300 | 1002 |
+------+-------+--------+--------+------+

85) Give a simpler way to write this query. SELECT snum, sname, city, comm FROM salespeople WHERE (comm > = 0.12 OR comm < 0.14); 

SELECT * FROM salespeople;
output:
+------+---------+-----------+------+
| SNUM | SNAME   | CITY      | COMM |
+------+---------+-----------+------+
| 1001 | Peel    | London    |   12 |
| 1002 | Serres  | Sanjose   |   13 |
| 1003 | AxelRod | New York  |   10 |
| 1004 | Motika  | London    |   11 |
| 1007 | RifKin  | Barcelona |   15 |
| 1008 | Fran    | London    |   25 |
+------+---------+-----------+------+
6 rows in set (0.00 sec)

86) Which salespersons attend to customers not in the city they have been assigned to? 

SELECT s.sname , s.city , c.cname , c.city FROM salespeople s
INNER JOIN
Customers c ON
c.snum = s.snum AND s.city != c.city ;
output:
+---------+-----------+----------+---------+
| sname   | city      | cname    | city    |
+---------+-----------+----------+---------+
| AxelRod | New York  | Giovanni | Rome    |
| Serres  | Sanjose   | Grass    | Berlin  |
| Motika  | London    | Pereira  | Rome    |
| RifKin  | Barcelona | Cisneros | Sanjose |
+---------+-----------+----------+---------+

87) Which salespeople get commission greater than 0.11 are serving customers rated less than 250? 

SELECT s.* , c.cname as Serving FROM salespeople s
INNER JOIN
Customers c ON
c.snum = s.snum AND s.comm>11 AND c.rating < 250 ;

output:
+------+--------+---------+------+---------+
| SNUM | SNAME  | CITY    | COMM | Serving |
+------+--------+---------+------+---------+
| 1001 | Peel   | London  |   12 | Hoffman |
| 1001 | Peel   | London  |   12 | Clemens |
| 1002 | Serres | Sanjose |   13 | Liu     |
+------+--------+---------+------+---------+

88) Which salespeople have been assigned to the same city but get different commission percentages?
SELECT s1.* FROM salespeople s1 WHERE s1.city IN (SELECT s2.city FROM salespeople s2 WHERE s2.snum != s1.snum AND s1.comm != s2.comm);

+------+--------+--------+------+
| snum | sname  | city   | comm |
+------+--------+--------+------+
| 1001 | Peel   | London |   12 |
| 1004 | Motika | London |   11 |
| 1008 | Fran   | London |   25 |
+------+--------+--------+------+

89) Which salesperson has earned the maximum commission? 

SELECT s.sname  , SUM(o.amt)*s.comm/100 AS Commission, s.snum FROM salespeople s 
INNER JOIN
orders o ON
s.snum = o.snum GROUP BY snum ORDER BY Commission DESC LIMIT 1;
output:

+-------+-------------+------+
| sname | Commission  | snum |
+-------+-------------+------+
| Peel  | 1845.848400 | 1001 |
+-------+-------------+------+

90) Does the customer who has placed the maximum number of orders have the maximum rating?

SELECT cname , rating , No_of_orders FROM customers c1 
INNER JOIN
(SELECT cnum , count(cnum) as No_of_orders from orders group by cnum having count(cnum) > 1) AS c2 
ON
c1.cnum = c2.cnum;
output:
+----------+--------+--------------+
| cname    | rating | No_of_orders |
+----------+--------+--------------+
| Grass    |    300 |            2 |
| Clemens  |    100 |            2 |
| Cisneros |    300 |            2 |
+----------+--------+--------------+

// Grass , clemens and cisneros has maximum order but only grass and cisneros got the highest rating.

91) List all customers in descending order of customer rating.

SELECT * FROM customers  ORDER BY rating DESC ;
output:
+------+----------+---------+--------+------+
| CNUM | CNAME    | CITY    | RATING | SNUM |
+------+----------+---------+--------+------+
| 2004 | Grass    | Berlin  |    300 | 1002 |
| 2008 | Cisneros | Sanjose |    300 | 1007 |
| 2002 | Giovanni | Rome    |    200 | 1003 |
| 2003 | Liu      | Sanjose |    200 | 1002 |
| 2001 | Hoffman  | London  |    100 | 1001 |
| 2006 | Clemens  | London  |    100 | 1001 |
| 2007 | Pereira  | Rome    |    100 | 1004 |
+------+----------+---------+--------+------+


92) On which days has Hoffman placed orders? 

SELECT odate FROM orders WHERE cnum in ( SELECT cnum FROM customers WHERE cname = "hoffman") ;
output: 
+----------+
| odate    |
+----------+
| 10/03/90 |
+----------+

93) Which salesmen have no orders between 10/03/1990 and 10/05/1990? 

SELECT onum, snum FROM orders WHERE odate NOT BETWEEN "10/03/90" AND "10/05/90";
output:
+------+------+
| onum | snum |
+------+------+
| 3010 | 1002 |
| 3011 | 1001 |
+------+------+

94) How many salespersons have succeeded in getting orders? 

SELECT COUNT(distinct(snum)) FROM orders ;
+-----------------------+
| COUNT(distinct(snum)) |
+-----------------------+
|                     5 |
+-----------------------+

95) How many customers have placed orders? 

SELECT COUNT(DISTINCT(cnum)) FROM Orders ;
output:
+-----------------------+
| COUNT(DISTINCT(cnum)) |
+-----------------------+
|                     7 |
+-----------------------+

96) On which date has each salesman booked an order of maximum value?

SELECT s.snum , s.sname , o.odate , max(o.amt) FROM orders o
INNER JOIN
Salespeople s ON
s.snum = o.snum GROUP BY s.snum ;

output:
+------+---------+----------+------------+
| snum | sname   | odate    | max(o.amt) |
+------+---------+----------+------------+
| 1007 | RifKin  | 10/03/90 |    1098.16 |
| 1004 | Motika  | 10/03/90 |    1900.10 |
| 1001 | Peel    | 10/03/90 |    9891.88 |
| 1002 | Serres  | 10/03/90 |    5160.45 |
| 1003 | AxelRod | 10/04/90 |    1713.23 |
+------+---------+----------+------------+

97) Who is the most successful salesperson?

SELECT s.sname  , SUM(o.amt)*s.comm/100 AS Commission, s.snum FROM salespeople s
INNER JOIN
orders o ON
s.snum = o.snum GROUP BY snum ORDER BY Commission DESC LIMIT 1;

output:
// Peel Got Maximum Commission Among all the Salespeople 
+-------+-------------+------+
| sname | Commission  | snum |
+-------+-------------+------+
| Peel  | 1845.848400 | 1001 |
+-------+-------------+------+


SELECT snum,  count(snum) as No_of_orders from orders group by snum order By No_of_orders desc LIMIT 1;
output:
//Peel got Maximum Number of Orders 
+------+--------------+
| snum | No_of_orders |
+------+--------------+
| 1001 |            3 |
+------+--------------+

// So peel is the Most Successful Salespeople among all the salespeople


98) Which customers have the same rating? 

SELECT c1.cname , c2.cname FROM customers c1 , customers c2 WHERE c1.rating = c2.rating AND c1.cnum!= c2.cnum;
output:
+----------+----------+
| cname    | cname    |
+----------+----------+
| Clemens  | Hoffman  |
| Pereira  | Hoffman  |
| Liu      | Giovanni |
| Giovanni | Liu      |
| Cisneros | Grass    |
| Hoffman  | Clemens  |
| Pereira  | Clemens  |
| Hoffman  | Pereira  |
| Clemens  | Pereira  |
| Grass    | Cisneros |
+----------+----------+

SELECT c1.cname, c2.cname, c1.rating FROM customers c1
INNER JOIN 
customers c2 ON c1.rating = c2.rating  WHERE c1.cnum <> c2.cnum AND c1.cname < c2.cname;

+----------+---------+--------+
| cname    | cname   | rating |
+----------+---------+--------+
| Clemens  | Hoffman |    100 |
| Giovanni | Liu     |    200 |
| Cisneros | Grass   |    300 |
| Clemens  | Pereira |    100 |
| Hoffman  | Pereira |    100 |
+----------+---------+--------+

99) Find all orders greater than the average for October 4th.

SELECT * FROM orders WHERE amt > (SELECT AVG(amt) FROM orders WHERE odate = "10/04/90") ;
output:
+------+---------+----------+------+------+
| ONUM | AMT     | ODATE    | CNUM | SNUM |
+------+---------+----------+------+------+
| 3002 | 1900.10 | 10/03/90 | 2007 | 1004 |
| 3005 | 5160.45 | 10/03/90 | 2003 | 1002 |
| 3006 | 1098.16 | 10/03/90 | 2008 | 1007 |
| 3008 | 4723.00 | 10/05/90 | 2006 | 1001 |
| 3009 | 1713.23 | 10/04/90 | 2002 | 1003 |
| 3010 | 1309.95 | 10/06/90 | 2004 | 1002 |
| 3011 | 9891.88 | 10/06/90 | 2006 | 1001 |
+------+---------+----------+------+------+

100) List all customers with ratings above Grass’s average. 

SELECT * FROM customers WHERE rating > (SELECT AVG(rating) FROM customers WHERE cname = "grass") ;
output:
Empty set (0.00 sec)

101) Which customers have above average orders? 

SELECT cnum , cname FROM customers WHERE cnum IN (SELECT cnum FROM orders WHERE amt > (SELECT AVG(amt) FROM orders)) ;
output: 
+------+---------+
| cnum | cname   |
+------+---------+
| 2003 | Liu     |
| 2006 | Clemens |
+------+---------+

102) Select the total amount in orders for each salesperson for which the total is greater than the amount of the largest order in the table.

SELECT snum , total FROM (SELECT snum , SUM(amt) as total FROM orders GROUP BY snum) as Table1 WHERE total > (SELECT MAX(amt) FROM orders) ;
+------+----------+
| snum | total    |
+------+----------+
| 1001 | 15382.07 |
+------+----------+
1 row in set (0.00 sec)

103) Give names and numbers of all salespersons that have more than one customer? 

SELECT s.snum , s.sname FROM salespeople s
INNER JOIN
( SELECT snum , COUNT(snum) AS Count FROM customers GROUP BY snum) t ON
t.snum = s.snum AND t.count>1 ;

output:
+------+--------+
| snum | sname  |
+------+--------+
| 1001 | Peel   |
| 1002 | Serres |
+------+--------+

104) Select all salespeople by name and number who have customers in their city whom they don’t service.

SELECT s.snum , s.sname , c.cname , s.city FROM salespeople s
INNER JOIN
customers c ON
s.city = c.city AND s.snum != c.snum ;
output:
+------+--------+----------+---------+
| snum | sname  | cname    | city    |
+------+--------+----------+---------+
| 1004 | Motika | Hoffman  | London  |
| 1008 | Fran   | Hoffman  | London  |
| 1004 | Motika | Clemens  | London  |
| 1008 | Fran   | Clemens  | London  |
| 1002 | Serres | Cisneros | Sanjose |
+------+--------+----------+---------+

105) Does the total amount in orders by customer in Rome and London, exceed the commission paid to salesperson in London, and New York by more than 5 times? 

// total amount in orders by customer in Rome and London is 18995.40
SELECT SUM(amt) AS total from orders WHERE cnum in (SELECT cnum FROM customers WHERE city IN("rome","london")) ;
+----------+
| total    |
+----------+
| 18995.40 |
+----------+
// Commission paid to salesperson in London, and New York
SELECT SUM(o.amt)*s.comm/100 AS commission FROM salespeople s
INNER JOIN
orders o ON
s.snum = o.snum AND s.city IN ("London" , "newyork") ;
+-------------+
| commission  |
+-------------+
| 2073.860400 |
+-------------+

// According to Ques
// Does the total Amount exceed the commission by more than 5 times 
// total > 5 * commission
// 18995.40 > 5 * 2073.860
// 18995.40 > 10369.3 
// So yeah , it does exceed more than 5 times

106) Which are the date, order number, amt and city for each salesperson (by name) for the maximum order he has obtained? 

SELECT s.sname ,s.city, o.onum , MAX(o.amt) , o.odate FROM salespeople s
INNER JOIN
orders o ON
s.snum = o.snum GROUP BY s.sname;
output:
+---------+-----------+------+------------+----------+
| sname   | city      | onum | MAX(o.amt) | odate    |
+---------+-----------+------+------------+----------+
| RifKin  | Barcelona | 3001 |    1098.16 | 10/03/90 |
| Motika  | London    | 3002 |    1900.10 | 10/03/90 |
| Peel    | London    | 3003 |    9891.88 | 10/03/90 |
| Serres  | Sanjose   | 3005 |    5160.45 | 10/03/90 |
| AxelRod | New York  | 3009 |    1713.23 | 10/04/90 |
+---------+-----------+------+------------+----------+

107) Which salesperson is having lowest commission?

SELECT s.sname,SUM(o.amt)*s.comm/100 AS Commission, s.snum FROM salespeople s
INNER JOIN
orders o ON s.snum = o.snum GROUP BY snum ORDER BY Commission LIMIT 1;
output:
+--------+------------+------+
| sname  | Commission | snum |
+--------+------------+------+
| RifKin | 167.527500 | 1007 |
+--------+------------+------+


