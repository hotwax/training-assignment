---- Documentation ----

Running the SerializationTest Class for searializing the objects in two different file –
In file output1.ser
In file output2.ser

Running the DeserializationTest class for reading the serialized files reading both the files ---
In file output1.ser
In file output2.ser
Note – Deserialisation worked.

Now after all this changes made accordingly
Change dateOfBirth type from java.lang.String to java.util.Date and change the constructor
implementation accordingly. Don’t change the signature of the constructor. Just use a
single parameter constructor of the Date class to assign the passed String Date to
“dateOfBirth”.

Getting Exception in both the files while deserializing.

java.io.InvalidClassException: Student; local class incompatible:
stream classdesc serialVersionUID = -475765159253012278, local class
serialVersionUID = 2267678840185043506

Solution For this – 

To explicitly declare and initialize serialVersionUID .
If a class does not explicitly define a private static final long serialVersionUID
in the code it will be autogenerated, and there is no guarantee that different machines
will generate the same id; it looks like that is exactly what happened. Also if the
classes are different in any way (using different versions of the class) the
autogenerated serialVersionUIDs will also be different.

After this - 

Made changes in the class –
After that I recreated the  output1.ser with SerializationTest  having date string type.

Now made changes to the Student Class and made date to Date Type of java.util.

When I am Deserializing it, getting this exception – 

java.lang.ClassCastException: cannot assign instance of java.lang.String to field
Student.dateOfBirth of type java.util.Date in instance of Student

About Exception -- 

As its name implies, ClassCastException is an exception that happens when the JVM tries
to cast an object to a class (or in some instances, an interface) and fails. This
relates to explicit type casting [3] and the reason the cast fails can be traced to
an attempt at downcasting an object to a class of which it is not an instance, or to
an interface which it does not implement.

 --- We can also solve this issue by creating dateOfBirth Instance member as Object type. 
After this there is no issue in deserialization means getting no exception.
