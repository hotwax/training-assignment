
Test Case 1
Input:
1
5
1
3
1
7
1
1
3
4
5
Expected Output:
should add nodes 5,3,7 and 1 to tree.
inorder-> 1 3 5 7
preorder-> 5 3 1 7
postorder-> 1 3 7 5

My output:-
=========================
1: add Node
2: remove Node
3: inorder traversal
4: preorder traversal
5: postorder traversal
6: search
7: terminate the program

1
enter Node value to add
5
=========================
1: add Node
2: remove Node
3: inorder traversal
4: preorder traversal
5: postorder traversal
6: search
7: terminate the program

1
enter Node value to add
3
=========================
1: add Node
2: remove Node
3: inorder traversal
4: preorder traversal
5: postorder traversal
6: search
7: terminate the program

1
enter Node value to add
7
=========================
1: add Node
2: remove Node
3: inorder traversal
4: preorder traversal
5: postorder traversal
6: search
7: terminate the program

1
enter Node value to add
1
=========================
1: add Node
2: remove Node
3: inorder traversal
4: preorder traversal
5: postorder traversal
6: search
7: terminate the program

3
inorder-> 1 3 5 7 
=========================
1: add Node
2: remove Node
3: inorder traversal
4: preorder traversal
5: postorder traversal
6: search
7: terminate the program

4
preorder-> 5 3 1 7 
=========================
1: add Node
2: remove Node
3: inorder traversal
4: preorder traversal
5: postorder traversal
6: search
7: terminate the program

=============================================================================================================

Test Case 2: Removing a node from the tree that does not exist
Input:
1
5
1
3
2
8
2
2
2
7
3
Expected Output:
should add nodes 3 and 5 to tree.
don't delete node 8,2,7 as they are not present in the tree. 
inorder-> 3 5

My output:-
=========================
1: add Node
2: remove Node
3: inorder traversal
4: preorder traversal
5: postorder traversal
6: search
7: terminate the program

1
enter Node value to add
5
=========================
1: add Node
2: remove Node
3: inorder traversal
4: preorder traversal
5: postorder traversal
6: search
7: terminate the program

1
enter Node value to add
3
=========================
1: add Node
2: remove Node
3: inorder traversal
4: preorder traversal
5: postorder traversal
6: search
7: terminate the program

2
enter Node value to delete
8
=========================
1: add Node
2: remove Node
3: inorder traversal
4: preorder traversal
5: postorder traversal
6: search
7: terminate the program

2
enter Node value to delete
2
=========================
1: add Node
2: remove Node
3: inorder traversal
4: preorder traversal
5: postorder traversal
6: search
7: terminate the program

2
enter Node value to delete
7
=========================
1: add Node
2: remove Node
3: inorder traversal
4: preorder traversal
5: postorder traversal
6: search
7: terminate the program

3
inorder-> 3 5 
=========================

=============================================================================================================

Test Case 3: Searching for a Node in a Tree
Input:
1
5
1
3
1
7
6
7
Expected Output:
should add node 5,3,7
search of 7 should return true. 
My output:-
=========================
1: add Node
2: remove Node
3: inorder traversal
4: preorder traversal
5: postorder traversal
6: search
7: terminate the program

1
enter Node value to add
5
=========================
1: add Node
2: remove Node
3: inorder traversal
4: preorder traversal
5: postorder traversal
6: search
7: terminate the program

1
enter Node value to add
3
=========================
1: add Node
2: remove Node
3: inorder traversal
4: preorder traversal
5: postorder traversal
6: search
7: terminate the program

1
enter Node value to add
7
=========================
1: add Node
2: remove Node
3: inorder traversal
4: preorder traversal
5: postorder traversal
6: search
7: terminate the program

6
enter value to search
7
true
=========================

=============================================================================================================

Test Case 4: Deleting node present in Tree.
Input:
1
5
1
3
1
7
6
7
Expected Output:
should add node 10, 20
should deleted node 20.
should print inorder i.e. 10. 
My output:-
=========================
1: add Node
2: remove Node
3: inorder traversal
4: preorder traversal
5: postorder traversal
6: search
7: terminate the program

1
enter Node value to add
10
=========================
1: add Node
2: remove Node
3: inorder traversal
4: preorder traversal
5: postorder traversal
6: search
7: terminate the program

1
enter Node value to add
20
=========================
1: add Node
2: remove Node
3: inorder traversal
4: preorder traversal
5: postorder traversal
6: search
7: terminate the program

2
enter Node value to delete
20
=========================
1: add Node
2: remove Node
3: inorder traversal
4: preorder traversal
5: postorder traversal
6: search
7: terminate the program

3
inorder-> 10 
=========================

=============================================================================================================

Test Case 4: Terminating the program.
Input:
7
Expected Output:
program should be terminated properly.
 
My output:-
=========================
1: add Node
2: remove Node
3: inorder traversal
4: preorder traversal
5: postorder traversal
6: search
7: terminate the program

7
BUILD SUCCESSFUL (total time: 2 seconds)
