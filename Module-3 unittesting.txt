Unit Testing-Module:3

1) List all the columns of the Salespeople table.

mysql> DESC SALESPEOPLE;

Approach-descending order based on the values in the SALESPEOPLE column.

Table involved-salespeople

Expected output-
+-------+---------+------+-----+---------+----------------+
| Field | Type    | Null | Key | Default | Extra          |
+-------+---------+------+-----+---------+----------------+
| snum  | int     | NO   | PRI | NULL    | auto_increment |
| sname | char(8) | NO   |     | NULL    |                |
| city  | char(9) | NO   |     | NULL    |                |
| comm  | int     | YES  | UNI | NULL    |                |
+-------+---------+------+-----+---------+----------------+



2. List all customers with a rating of 100.

mysql> SELECT * FROM CUSTOMERS WHERE RATING=100;

Approach-retrieves all the columns and rows from the CUSTOMERS table where the RATING column has a value of 100.

Table involved-customers.

Expected output-
+------+----------+--------+--------+------+
| cnum | cname    | city   | rating | snum |
+------+----------+--------+--------+------+
| 2001 | hoffman  | london |    100 | 1001 |
| 2006 | cisneras | london |    100 | 1001 |
| 2007 | pereira  | rome   |    100 | 1004 |
+------+----------+--------+--------+------+



3). Find the largest order taken by each salesperson on each date.

mysql>  SELECT o.odate, o.snum, s.sname, MAX(o.amt) AS largest_order
    -> FROM orders AS o
    -> JOIN salespeople AS s ON o.snum = s.snum
    -> GROUP BY o.odate, o.snum, s.sname;
Approach-data from two tables, orders and salespeople, by joining them based on the salesperson number (snum) column. It selects the order date (odate), salesperson number (snum), and salesperson name (sname) columns from the orders and salespeople tables.

Table involved-salespeople,orders

Expected output-
+----------+------+---------+---------------+
| odate    | snum | sname   | largest_order |
+----------+------+---------+---------------+
| 10/03/90 | 1007 | rifkin  |       1098.16 |
| 10/03/90 | 1001 | Peel    |        767.19 |
| 10/03/90 | 1004 | motika  |        1900.1 |
| 10/03/90 | 1002 | serres  |       5160.45 |
| 10/04/90 | 1003 | axeirod |       1713.23 |
| 10/04/90 | 1002 | serres  |         75.75 |
| 10/05/90 | 1001 | Peel    |          4723 |
| 10/06/90 | 1002 | serres  |       1309.95 |
| 10/06/90 | 1001 | Peel    |       9891.88 |
+----------+------+---------+---------------+



4) Arrange the Orders table by descending customer number.

mysql> SELECT * FROM orders ORDER BY cnum;

Approach-retrieves all columns and rows from the orders table and sorts the results based on the values in the cnum column in ascending order.

Table involved-orders

Expected output
+------+---------+----------+------+------+
| onum | amt     | odate    | cnum | snum |
+------+---------+----------+------+------+
| 3003 |  767.19 | 10/03/90 | 2001 | 1001 |
| 3009 | 1713.23 | 10/04/90 | 2002 | 1003 |
| 3005 | 5160.45 | 10/03/90 | 2003 | 1002 |
| 3007 |   75.75 | 10/04/90 | 2004 | 1002 |
| 3010 | 1309.95 | 10/06/90 | 2004 | 1002 |
| 3008 |    4723 | 10/05/90 | 2006 | 1001 |
| 3011 | 9891.88 | 10/06/90 | 2006 | 1001 |
| 3002 |  1900.1 | 10/03/90 | 2007 | 1004 |
| 3001 |   18.69 | 10/03/90 | 2008 | 1007 |
| 3006 | 1098.16 | 10/03/90 | 2008 | 1007 |
+------+---------+----------+------+------+




5) Find which salespeople currently have orders in the order table.
 
mysql> select snum, sname, city, comm  FROM salespeople WHERE snum IN ( SELECT DISTINCT snum  FROM orders);

Approach-retrieves data from the salespeople table by selecting the snum, sname, city, and comm columns of salespeople who have made at least one order.

Table involved-salespeople,orders

expected output-
+------+---------+-----------+------+
| snum | sname   | city      | comm |
+------+---------+-----------+------+
| 1001 | Peel    | London    |   12 |
| 1002 | serres  | sanjose   |   13 |
| 1003 | axeirod | new york  |   10 |
| 1004 | motika  | london    |   11 |
| 1007 | rifkin  | barcelona |   15 |
+------+---------+-----------+------+




6) List names of all customers matched with the salespeople serving them.

mysql> SELECT c.cname, s.sname  FROM customers AS c JOIN salespeople AS s ON c.snum = s.snum;

Approach-retrieves data from the salespeople table by selecting the snum, sname, city, and comm columns of salespeople who have made at least one order.

Table involved-customers,salespeople

expected output-
+----------+---------+
| cname    | sname   |
+----------+---------+
| hoffman  | Peel    |
| giovamni | axeirod |
| liu      | serres  |
| grass    | serres  |
| cisneras | Peel    |
| cisneras | rifkin  |
| pereira  | motika  |
+----------+---------+




7) Find the names and numbers of all salespeople who have more than one customer.

mysql> SELECT sname, snum FROM salespeople WHERE snum IN ( SELECT snum FROM customers GROUP BY snum HAVING COUNT(snum) > 1);

Approach-retrieves data from the salespeople table by selecting the sname and snum columns of salespeople who have more than one customer associated with them

Table involved-customers,salespeople

expected output-
+--------+------+
| sname  | snum |
+--------+------+
| Peel   | 1001 |
| serres | 1002 |
+--------+------+




8) Count the orders of each of the salespeople and output the results in descending order.
mysql> SELECT salespeople.snum, salespeople.sname, COALESCE(COUNT(orders.onum), 0) as order_count  FROM salespeople  LEFT JOIN orders ON salespeople.snum = orders.snum GROUP BY salespeople.snum, salespeople.sname ORDER BY order_count DESC;

Approach- retrieves data from two tables, salespeople and orders, by joining them based on the salesperson number (snum) column. It selects the snum and sname columns from the salespeople table and the count of orders associated with each salesperson.

Table involved-salespeople,orders

expected output-

+------+---------+-------------+
| snum | sname   | order_count |
+------+---------+-------------+
| 1001 | Peel    |           3 |
| 1002 | serres  |           3 |
| 1007 | rifkin  |           2 |
| 1003 | axeirod |           1 |
| 1004 | motika  |           1 |
| 1008 | fran    |           0 |
+------+---------+-------------+




9) List the customer table if and only if one or more of the customers in the Customer table are located in SanJose.

mysql> select * from customers WHERE EXISTS (SELECT city FROM customers where city="sanjose");

Approach-retrieves data from the customers table by selecting all columns and rows where there exists at least one other row in the same table with a city value of "sanjose".

Table involved-customers,

expected output-
+------+----------+---------+--------+------+
| cnum | cname    | city    | rating | snum |
+------+----------+---------+--------+------+
| 2001 | hoffman  | london  |    100 | 1001 |
| 2002 | giovamni | rome    |    200 | 1003 |
| 2003 | liu      | sanjose |    200 | 1002 |
| 2004 | grass    | berlin  |    300 | 1002 |
| 2006 | cisneras | london  |    100 | 1001 |
| 2006 | cisneras | sanjose |    300 | 1007 |
| 2007 | pereira  | rome    |    100 | 1004 |
+------+----------+---------+--------+------+




10) Match salespeople to customers according to what city they live in.

mysql>  SELECT salespeople.* FROM salespeople LEFT JOIN customers ON customers.city = salespeople.city;

Approach- retrieves data from two tables, salespeople and customers, by joining them based on the city column. It selects all columns from the salespeople table and returns only the rows where there is no matching row in the customers table for the same city.

Table involved-salespeople,customers

expected output-
+------+---------+-----------+------+
| snum | sname   | city      | comm |
+------+---------+-----------+------+
| 1001 | Peel    | London    |   12 |
| 1001 | Peel    | London    |   12 |
| 1002 | serres  | sanjose   |   13 |
| 1002 | serres  | sanjose   |   13 |
| 1003 | axeirod | new york  |   10 |
| 1004 | motika  | london    |   11 |
| 1004 | motika  | london    |   11 |
| 1007 | rifkin  | barcelona |   15 |
| 1008 | fran    | london    |   25 |
| 1008 | fran    | london    |   25 |
+------+---------+-----------+------+




11) Find all the customers in SanJose who have a rating above 200. 

mysql> select * from customers WHERE city="sanjose" and rating > 200;

Approach-retrieves data from the customers table by selecting all columns and rows where the city column contains "sanjose" and the rating column is greater than 200.

Table involved-customers

expected output-
+------+----------+---------+--------+------+
| cnum | cname    | city    | rating | snum |
+------+----------+---------+--------+------+
| 2006 | cisneras | sanjose |    300 | 1007 |
+------+----------+---------+--------+------+




12) List the names and commissions of all salespeople in London.

mysql> select * from salespeople where city="london";

Approach- retrieves data from the salespeople table by selecting all columns and rows where the city column contains "london".

Table involved-salespeople

expected output-
+------+--------+--------+------+
| snum | sname  | city   | comm |
+------+--------+--------+------+
| 1001 | Peel   | London |   12 |
| 1004 | motika | london |   11 |
| 1008 | fran   | london |   25 |
+------+--------+--------+------+




13) List all the orders of Salesperson Motika from the orders table.

mysql> select *,snum from orders where snum = 1004;

Approach-retrieves data from the orders table by selecting all columns and rows where the snum column contains the value "1004". Additionally, it selects the snum column.

Table involved-orders

expected output-
+------+--------+----------+------+------+------+
| onum | amt    | odate    | cnum | snum | snum |
+------+--------+----------+------+------+------+
| 3002 | 1900.1 | 10/03/90 | 2007 | 1004 | 1004 |
+------+--------+----------+------+------+------+




14) Find all customers who booked orders on October 3.

mysql> select distinct c.cname,c.cnum from customers as c join orders as o on c.cnum = o.cnum where o.odate = '10/03/90';

Approach-retrieves data from the customers table by selecting the distinct cname and cnum columns, and joins it with the orders table on the cnum column from both tables. It then applies a filter to the joined table, where the odate column is equal to '10/03/90'.

Table involved-customers,orders

expected output-
+---------+------+
| cname   | cnum |
+---------+------+
| hoffman | 2001 |
| liu     | 2003 |
| pereira | 2007 |
+---------+------+




15) Give the sums of the amounts from the Orders table, grouped by date, eliminating all those dates where the SUM was not at least 2000 above the maximum Amount.

mysql> SELECT odate, SUM(amt) AS total_for_date FROM orders GROUP BY odate  HAVING total_for_date - 2000 < ( SELECT MAX(amt) FROM orders);

Approach- retrieves data from the orders table by grouping rows based on the odate column and calculating the total amount for each date. It then applies a filter to the resulting group of rows, where the difference between the total amount for each date and 2000 is less than the maximum amount for any order in the table.

Table involved-orders

expected output-
+----------+--------------------+
| odate    | total_for_date     |
+----------+--------------------+
| 10/03/90 |  8944.590208053589 |
| 10/04/90 |   1788.97998046875 |
| 10/05/90 |               4723 |
| 10/06/90 | 11201.829833984375 |
+----------+--------------------+




16) Select all orders that had amounts that were greater than at least one of the orders from October 6.

mysql> SELECT * FROM orders WHERE amt > (SELECT MIN(amt) FROM orders WHERE odate = "10/06/90");

Approach-retrieves data from the orders table by selecting all columns and rows where the amt column is greater than the minimum amt value for the orders with an odate of "10/06/90".

Table involved-orders

expected output-
+------+---------+----------+------+------+
| onum | amt     | odate    | cnum | snum |
+------+---------+----------+------+------+
| 3002 |  1900.1 | 10/03/90 | 2007 | 1004 |
| 3005 | 5160.45 | 10/03/90 | 2003 | 1002 |
| 3009 | 1713.23 | 10/04/90 | 2002 | 1003 |
| 3008 |    4723 | 10/05/90 | 2006 | 1001 |
| 3011 | 9891.88 | 10/06/90 | 2006 | 1001 |
+------+---------+----------+------+------+




17) Write a query that uses the EXISTS operator to extract all salespeople who have customers with a rating of 300.

mysql> SELECT snum,sname,city,comm FROM salespeople WHERE EXISTS(SELECT * from customers WHERE salespeople.snum = customers.snum AND rating = 300);

Approach-retrieves data from the salespeople table by selecting the snum, sname, city, and comm columns of salespeople for those salespeople who have at least one customer with a rating of 300.

Table involved-salespeople,customers

expected output-
+------+--------+-----------+------+
| snum | sname  | city      | comm |
+------+--------+-----------+------+
| 1002 | serres | sanjose   |   13 |
| 1007 | rifkin | barcelona |   15 |
+------+--------+-----------+------+




18) Find all customers whose cnum is 1000 above the snum of Serres.

mysql> SELECT customers.cname  FROM customers LEFT JOIN salespeople ON salespeople.snum = customers.snum WHERE (SELECT cnum - (SELECT snum FROM salespeople  WHERE sname = 'serres')) > 1000;

approach-This SQL query retrieves the names of all customers whose cnum (customer number) is 1000 more than the snum (salesperson number) of the salesperson named Serres. It uses a LEFT JOIN to combine the customers and salespeople tables, and a nested SELECT statement to compare the cnum and snum values.

Table involved-customers,salespeople

Expected output-
+----------+
| cname    |
+----------+
| liu      |
| grass    |
| cisneras |
| cisneras |
| pereira  |
+----------+



19)Give the salespeople’s commissions as percentages instead of decimal numbers.

mysql> select * from salespeople;

Approach-To display the salespeople's commissions as percentages instead of decimal numbers in MySQL, you can use the FORMAT() function to format the commission column

Table involved-salespeople

Expected output-
+------+---------+-----------+------+
| snum | sname   | city      | comm |
+------+---------+-----------+------+
| 1001 | Peel    | London    |   12 |
| 1002 | serres  | sanjose   |   13 |
| 1003 | axeirod | new york  |   10 |
| 1004 | motika  | london    |   11 |
| 1007 | rifkin  | barcelona |   15 |
| 1008 | fran    | london    |   25 |
+------+---------+-----------+------+




20) Find the largest order taken by each salesperson on each date, eliminating those Maximum orders, which are less than 3000. 

mysql> SELECT SNUM,MAX(AMT) AS 'LARGEST ORDER',ODATE FROM ORDERS GROUP BY SNUM,ODATE HAVING MAX(AMT)>=3000;

Approach-retrieves the largest order taken by each salesperson on each date, but only includes orders with a maximum amount (AMT) of 3000 or more. It uses the MAX() function to find the maximum amount for each salesperson and date combination, and groups the results by salesperson and date using the GROUP BY clause

Table involved-orders

Expected output-
+------+---------------+------------+
| SNUM | LARGEST ORDER | ODATE      |
+------+---------------+------------+
| 1002 |       5160.45 | 1990-10-03 |
| 1001 |          4723 | 1990-10-05 |
| 1001 |       9891.88 | 1990-10-06 |
+------+---------------+------------+




21) List all the largest orders for October 3, for each salesperson. 

mysql> SELECT salespeople.snum,sname,MAX(amt) AS Max_amt,odate From salespeople,orders WHERE salespeople.snum=orders.snum AND odate = "10/03/90" GROUP BY orders.snum;

Approach-lists the largest orders for October 3, for each salesperson, by joining the salespeople and orders tables using the salesperson number (snum) as the key. It selects the salesperson number, name, largest order amount (MAX(amt)), and date (odate) of the largest order taken by each salesperson on October 3

Table involved-salespeople,orders

Expected output-
+------+--------+---------+----------+
| snum | sname  | Max_amt | odate    |
+------+--------+---------+----------+
| 1007 | rifkin | 1098.16 | 10/03/90 |
| 1001 | Peel   |  767.19 | 10/03/90 |
| 1004 | motika |  1900.1 | 10/03/90 |
| 1002 | serres | 5160.45 | 10/03/90 |
+------+--------+---------+----------+





22) Find all customers located in cities where Serres has customers. 

mysql> SELECT cnum,cname,city,rating FROM customers  WHERE city IN (SELECT city FROM salespeople WHERE sname = "serres");

Approach-This SQL query retrieves the cnum (customer number), cname (customer name), city, and rating of all customers whose city matches any of the cities associated with the salesperson named "serres" in the salespeople table. It uses a subquery to retrieve the cities associated with the salesperson named "serres", and the IN operator to filter the customers table by those cities. The result will include all customers located in the same cities as "serres".

Table involved-customers,salespeople

Expected output-
+------+----------+---------+--------+
| cnum | cname    | city    | rating |
+------+----------+---------+--------+
| 2003 | liu      | sanjose |    200 |
| 2006 | cisneras | sanjose |    300 |
+------+----------+---------+--------+




23) Select all customers with a rating above 200

mysql> SELECT * FROM customers WHERE rating > 200;

Approach-The SQL statement "SELECT * FROM customers WHERE rating > 200;" retrieves all the columns of data from the "customers" table where the "rating" column value is greater than 200. This query filters the data and only returns the records where the rating is above the specified threshold of 200.

Table involved-customers

Expected output-
+------+----------+---------+--------+------+
| cnum | cname    | city    | rating | snum |
+------+----------+---------+--------+------+
| 2004 | grass    | berlin  |    300 | 1002 |
| 2006 | cisneras | sanjose |    300 | 1007 |
+------+----------+---------+--------+------+




24) Count the number of salespeople currently having orders in the orders table. 

mysql> SELECT COUNT(DISTINCT snum) AS number_of_salespeople from orders;

Approach-selects the number of distinct salespeople (snum) in the "orders" table and assigns it an alias "number_of_salespeople". The COUNT() function returns the number of unique values in the specified column, while the DISTINCT keyword filters out duplicate values. Therefore, the query will return the number of unique salespeople who have made orders in the "orders" table.

Table involved-orders

Expected output-
+-----------------------+
| number_of_salespeople |
+-----------------------+
|                     5 |
+-----------------------+




25) Write a query that produces all customers serviced by salespeople with a commission above 12%. Output the customer’s name, salesperson’s name and the salesperson’s rate of commission. 

mysql> SELECT c.cname, s.sname, s.comm FROM salespeople AS s ,customers AS c WHERE s.snum = c.snum AND s.comm > 12;

Approach-selects the name of the customer (cname), name of the salesperson (sname), and commission rate (comm) from the "salespeople" table aliased as "s" and the "customers" table aliased as "c".

Table involved-salespeople,customers

Expected output-
+----------+--------+------+
| cname    | sname  | comm |
+----------+--------+------+
| liu      | serres |   13 |
| grass    | serres |   13 |
| cisneras | rifkin |   15 |
+----------+--------+------+ 




26) Find salespeople who have multiple customers. 

mysql> SELECT c.cname, s.sname, s.comm FROM salespeople AS s ,customers AS c WHERE s.snum = c.snum AND s.comm > 12;

Approach-selects the name of the customer (cname), name of the salesperson (sname), and commission rate (comm) from the "salespeople" and "customers" tables where the salesperson has a customer associated with them (matched by the snum column) and their commission rate is greater than 12. The "salespeople" table is aliased as "s" and the "customers" table is aliased as "c". The query retrieves information on customers and salespeople who meet these two conditions.

Table involved-salespeople

Expected output-
+----------+--------+------+
| cname    | sname  | comm |
+----------+--------+------+
| liu      | serres |   13 |
| grass    | serres |   13 |
| cisneras | rifkin |   15 |
+----------+--------+------+




27) Find salespeople with customers located in their own cities. 

mysql> SELECT sname, cname, c.city FROM salespeople AS s, customers AS c WHERE c.snum =s.snum AND c.city = s.city;

Approach-selects the name of the salesperson (sname), name of the customer (cname), and city of the customer (c.city) from the "salespeople" and "customers" tables where the snum (salesperson number) column in the "customers" table matches the snum column in the "salespeople" table and the city column in both tables matches.

Table involved-salespeople,customers

Expected output-
+--------+----------+---------+
| sname  | cname    | city    |
+--------+----------+---------+
| Peel   | hoffman  | london  |
| serres | liu      | sanjose |
| Peel   | cisneras | london  |
+--------+----------+---------+





28) Find all salespeople whose name starts with ‘P’ and fourth character is ‘I’.

mysql> SELECT * FROM salespeople WHERE sname LIKE 'p__i%';

Approach-This SQL query selects all columns from the "salespeople" table where the value in the "sname" column starts with 'p', followed by any two characters denoted by the two underscore symbols ('__'), and then followed by any number of characters that can be represented by the percent symbol ('%').

Table involved-salespeople

Expected output-
Empty set




29) Write a query that uses a subquery to obtain all orders for the customer named ‘Cisneros’. Assume you do not know his customer number.

mysql> SELECT * FROM orders WHERE cnum =(SELECT cnum FROM customers WHERE cname = 'cisneras');

Approach-selects all columns from the "orders" table where the value in the "cnum" column matches the "cnum" value in the "customers" table for the customer with the name 'cisneras'.

Table involved-orders,customers

Expected output-
+------+---------+----------+------+------+
| onum | amt     | odate    | cnum | snum |
+------+---------+----------+------+------+
| 3001 |   18.69 | 10/03/90 | 2008 | 1007 |
| 3006 | 1098.16 | 10/03/90 | 2008 | 1007 |
+------+---------+----------+------+------+




30) Find the largest orders for Serres and Rifkin. 

mysql> SELECT * FROM ORDERS WHERE  SNUM IN (SELECT SNUM FROM SALESPEOPLE WHERE SNAME= 'SERRES' OR SNAME= "RIFKIN");

Approach- selects all columns from the "orders" table where the value in the "snum" column matches any of the "snum" values retrieved from the subquery.

Table involved-orders,salespeople

Expected output-
+------+---------+----------+------+------+
| onum | amt     | odate    | cnum | snum |
+------+---------+----------+------+------+
| 3001 |   18.69 | 10/03/90 | 2008 | 1007 |
| 3005 | 5160.45 | 10/03/90 | 2003 | 1002 |
| 3006 | 1098.16 | 10/03/90 | 2008 | 1007 |
| 3007 |   75.75 | 10/04/90 | 2004 | 1002 |
| 3010 | 1309.95 | 10/06/90 | 2004 | 1002 |
+------+---------+----------+------+------+




31) Sort the salespeople table in the following order: snum, sname, commission, city.

mysql> SELECT * FROM salespeople ORDER BY snum,sname,comm,city;

Approach-retrieve all records from the "salespeople" table and order them by four criteria in ascending order:

Table involved-salespeople

Expected output-
+------+---------+-----------+------+
| snum | sname   | city      | comm |
+------+---------+-----------+------+
| 1001 | Peel    | London    |   12 |
| 1002 | serres  | sanjose   |   13 |
| 1003 | axeirod | new york  |   10 |
| 1004 | motika  | london    |   11 |
| 1007 | rifkin  | barcelona |   15 |
| 1008 | fran    | london    |   25 |
+------+---------+-----------+------+




32) Select all customers whose names fall in between ‘A’ and ‘G’ alphabetical range.

mysql> SELECT * FROM customers WHERE cname >= "A" AND cname <="G";

Approach-retrieve all records from the "customers" table where the value in the "cname" column is greater than or equal to "A" and less than or equal to "G".

Table involved-customers

Expected output-
+------+----------+---------+--------+------+
| cnum | cname    | city    | rating | snum |
+------+----------+---------+--------+------+
| 2006 | CLEMENS  | london  |    100 | 1001 |
| 2008 | cisneras | sanjose |    300 | 1007 |
+------+----------+---------+--------+------+




33) Select all the possible combinations of customers you can assign.

mysql> SELECT C1.CNUM AS CNUM1,C1.CNAME AS CNAME1,C2.CNUM AS CNUM2,C2.CNAME AS CNAME2
    -> FROM CUSTOMERS C1
    -> JOIN CUSTOMERS C2
    -> ON C1.CNUM < C2.CNUM;
Approach-join the "customers" table with itself (aliased as C1 and C2, respectively) based on a condition in the ON clause.

Table involved-customers

Expected output-
+-------+----------+-------+----------+
| CNUM1 | CNAME1   | CNUM2 | CNAME2   |
+-------+----------+-------+----------+
|  2001 | hoffman  |  2002 | giovamni |
|  2002 | giovamni |  2003 | liu      |
|  2001 | hoffman  |  2003 | liu      |
|  2003 | liu      |  2004 | grass    |
|  2002 | giovamni |  2004 | grass    |
|  2001 | hoffman  |  2004 | grass    |
|  2004 | grass    |  2006 | CLEMENS  |
|  2003 | liu      |  2006 | CLEMENS  |
|  2002 | giovamni |  2006 | CLEMENS  |
|  2001 | hoffman  |  2006 | CLEMENS  |
|  2007 | pereira  |  2008 | cisneras |
|  2006 | CLEMENS  |  2008 | cisneras |
|  2004 | grass    |  2008 | cisneras |
|  2003 | liu      |  2008 | cisneras |
|  2002 | giovamni |  2008 | cisneras |
|  2001 | hoffman  |  2008 | cisneras |
|  2006 | CLEMENS  |  2007 | pereira  |
|  2004 | grass    |  2007 | pereira  |
|  2003 | liu      |  2007 | pereira  |
|  2002 | giovamni |  2007 | pereira  |
|  2001 | hoffman  |  2007 | pereira  |
+-------+----------+-------+----------+





34) Select all orders that are greater than the average for October 4.

mysql> SELECT * FROM ORDERS WHERE AMT > (SELECT AVG(AMT) FROM ORDERS WHERE ODATE ="10/04/90");

Approach-retrieve all records from the "orders" table where the value in the "amt" column is greater than the average value of "amt" for orders placed on a specific date, which is October 4th, 1990.

Table involved-orders

Expected output-
+------+---------+----------+------+------+
| onum | amt     | odate    | cnum | snum |
+------+---------+----------+------+------+
| 3002 |  1900.1 | 10/03/90 | 2007 | 1004 |
| 3005 | 5160.45 | 10/03/90 | 2003 | 1002 |
| 3006 | 1098.16 | 10/03/90 | 2008 | 1007 |
| 3009 | 1713.23 | 10/04/90 | 2002 | 1003 |
| 3008 |    4723 | 10/05/90 | 2006 | 1001 |
| 3010 | 1309.95 | 10/06/90 | 2004 | 1002 |
| 3011 | 9891.88 | 10/06/90 | 2006 | 1001 |
+------+---------+----------+------+------+





35) Write a select command using correlated subquery that selects the names and numbers of all customers with ratings equal to the maximum for their city. 

mysql> SELECT CNAME,CNUM FROM CUSTOMERS WHERE RATING IN (SELECT MAX(RATING) FROM CUSTOMERS GROUP BY CITY);

Approach-retrieve the "cname" (customer name) and "cnum" (customer number) columns from the "customers" table for all customers whose "rating" value is equal to the maximum rating value for their respective city.

Table involved-customers

Expected output-
+----------+------+
| CNAME    | CNUM |
+----------+------+
| hoffman  | 2001 |
| giovamni | 2002 |
| liu      | 2003 |
| grass    | 2004 |
| CLEMENS  | 2006 |
| cisneras | 2008 |
| pereira  | 2007 |
+----------+------+





36) Write a query that totals the orders for each day and places the results in descending order.

mysql> SELECT SUM(AMT) AS DAY_WISE,ODATE FROM ORDERS GROUP BY ODATE ORDER BY DAY_WISE DESC;

Approach-retrieve the sum of "amt" (amount) for each distinct value in the "odate" column of the "orders" table, grouping the sums by date. It will also include an alias "DAY_WISE" for the sum of "amt".

Table involved-orders

Expected output-
+--------------------+----------+
| DAY_WISE           | ODATE    |
+--------------------+----------+
| 11201.829833984375 | 10/06/90 |
|  8944.590208053589 | 10/03/90 |
|               4723 | 10/05/90 |
|   1788.97998046875 | 10/04/90 |
+--------------------+----------+




37) Write a select command that produces the rating followed by the name of each customer in SanJose. 

mysql> SELECT cname, rating
    -> FROM customers
    -> WHERE city = 'SanJose';
Approach- retrieves the names and ratings of all customers who live in the city of San Jose.

Table involved-customers

Expected output-
+----------+--------+
| cname    | rating |
+----------+--------+
| Liu      |    200 |
| Cisneros |    300 |
+----------+--------+




38) Find all orders with amounts smaller than any amount for a customer in SanJose. 

mysql> SELECT * FROM ORDERS WHERE AMT < ANY(SELECT AMT FROM ORDERS WHERE CNUM IN (SELECT CNUM FROM CUSTOMERS WHERE CITY ="SANJOSE"));

Approach-retrieves all orders where the amount (amt) is less than any amount for orders made by customers who live in San Jose.

Table involved-orders,customers

Expected output-
+------+---------+----------+------+------+
| onum | amt     | odate    | cnum | snum |
+------+---------+----------+------+------+
| 3001 |   18.69 | 10/03/90 | 2008 | 1007 |
| 3003 |  767.19 | 10/03/90 | 2001 | 1001 |
| 3002 |  1900.1 | 10/03/90 | 2007 | 1004 |
| 3006 | 1098.16 | 10/03/90 | 2008 | 1007 |
| 3009 | 1713.23 | 10/04/90 | 2002 | 1003 |
| 3007 |   75.75 | 10/04/90 | 2004 | 1002 |
| 3008 |    4723 | 10/05/90 | 2006 | 1001 |
| 3010 | 1309.95 | 10/06/90 | 2004 | 1002 |
+------+---------+----------+------+------+




39) Find all orders with above average amounts for their customers. 

mysql> SELECT * FROM ORDERS WHERE AMT > ANY(SELECT avg(AMT) FROM ORDERS GROUP BY CNUM);

Approach-retrieves all orders where the amount (amt) is greater than the average amount of all orders made by each customer.

Table involved-orders

Expected output-
+------+---------+----------+------+------+
| onum | amt     | odate    | cnum | snum |
+------+---------+----------+------+------+
| 3003 |  767.19 | 10/03/90 | 2001 | 1001 |
| 3002 |  1900.1 | 10/03/90 | 2007 | 1004 |
| 3005 | 5160.45 | 10/03/90 | 2003 | 1002 |
| 3006 | 1098.16 | 10/03/90 | 2008 | 1007 |
| 3009 | 1713.23 | 10/04/90 | 2002 | 1003 |
| 3008 |    4723 | 10/05/90 | 2006 | 1001 |
| 3010 | 1309.95 | 10/06/90 | 2004 | 1002 |
| 3011 | 9891.88 | 10/06/90 | 2006 | 1001 |
+------+---------+----------+------+------+





40) Write a query that selects the highest rating in each city. 

mysql> SELECT city, MAX(rating) AS HIGHEST_RATING
    -> FROM customers
    -> GROUP BY city;
Approach- retrieves the highest rating for each city in the customers table.

Table involved-customers

Expected output-
+---------+----------------+
| city    | HIGHEST_RATING |
+---------+----------------+
| London  |            100 |
| Rome    |            200 |
| SanJose |            300 |
| Berlin  |            300 |
+---------+----------------+




41) Write a query that calculates the amount of the salesperson’s commission on each order by a customer with a rating above 100.00. 




42) Count the customers with ratings above SanJose’s average. 

mysql> SELECT COUNT(CNUM) FROM CUSTOMERS WHERE RATING > (SELECT AVG(RATING) FROM CUSTOMERS WHERE CITY ="SANJOSE");

Approach-that counts the number of customers whose rating is greater than the average rating of customers in San Jose. 

Table involved-customers

Expected output-
+-------------+
| COUNT(CNUM) |
+-------------+
|           2 |
+-------------+




43) Find all salespeople that are located in either Barcelona or London.

mysql> SELECT * FROM SALESPEOPLE WHERE CITY = "barcelona" OR CITY = "london";

Approach-retrieves all columns and rows from the "SALESPEOPLE" table where the city is either "barcelona" or "london".

Table involved-salespeople

Expected output-
+------+--------+-----------+------+
| snum | sname  | city      | comm |
+------+--------+-----------+------+
| 1001 | Peel   | London    |   12 |
| 1004 | motika | london    |   11 |
| 1007 | rifkin | barcelona |   15 |
| 1008 | fran   | london    |   25 |
+------+--------+-----------+------+





44) Find all salespeople with only one customer.

45) Write a query that joins the Customer table to itself to find all pairs or customers served by a single salesperson. 

mysql> SELECT C1.CNAME,C2.CNAME FROM CUSTOMERS C1 JOIN CUSTOMERS C2 ON C1.SNUM=C2.SNUM AND C1.CNUM !=C2.CNUM;

Approach-retrieves the names of customers who are served by the same salesperson.

Table involved-customers

Expected output-
+---------+---------+
| CNAME   | CNAME   |
+---------+---------+
| CLEMENS | hoffman |
| grass   | liu     |
| liu     | grass   |
| hoffman | CLEMENS |
+---------+---------+





46) Write a query that will give you all orders for more than $1000.00.

mysql> SELECT * FROM ORDERS WHERE AMT> 1000;

Approach-retrieves all columns and rows from the "ORDERS" table where the "AMT" column is greater than 1000. 

Table involved-orders

Expected output-
+------+---------+----------+------+------+
| onum | amt     | odate    | cnum | snum |
+------+---------+----------+------+------+
| 3002 |  1900.1 | 10/03/90 | 2007 | 1004 |
| 3005 | 5160.45 | 10/03/90 | 2003 | 1002 |
| 3006 | 1098.16 | 10/03/90 | 2008 | 1007 |
| 3009 | 1713.23 | 10/04/90 | 2002 | 1003 |
| 3008 |    4723 | 10/05/90 | 2006 | 1001 |
| 3010 | 1309.95 | 10/06/90 | 2004 | 1002 |
| 3011 | 9891.88 | 10/06/90 | 2006 | 1001 |
+------+---------+----------+------+------+




47) Write a query that lists each order number followed by the name of the customer who made that order.

mysql> SELECT ONUM, CNAME FROM Orders INNER JOIN Customers ON Orders.CNUM = Customers.CNUM;

Approach-

Table involved-orders,customers

Expected output-
+------+----------+
| ONUM | CNAME    |
+------+----------+
| 3001 | Cisneros |
| 3002 | Pereira  |
| 3003 | Hoffman  |
| 3005 | Liu      |
| 3006 | Cisneros |
| 3007 | Grass    |
| 3008 | Clemens  |
| 3009 | Giovanni |
| 3010 | Grass    |
| 3011 | Clemens  |
+------+----------+



48) Write a query that selects all the customers whose ratings are equal to or greater than ANY(in the SQL sense) of ‘Serres’.




49) Write two queries that will produce all orders taken on October 3 or October 4. 

mysql> SELECT * FROM Orders WHERE ODATE='10/04/90' UNION SELECT * FROM Orders WHERE ODATE='10/03/90';

Approach-retrieves two columns, "ONUM" and "CNAME", by joining the "ORDERS" and "CUSTOMERS" tables. 

Table involved-orders

Expected output-
+------+---------+----------+------+------+
| onum | amt     | odate    | cnum | snum |
+------+---------+----------+------+------+
| 3009 | 1713.23 | 10/04/90 | 2002 | 1003 |
| 3007 |   75.75 | 10/04/90 | 2004 | 1002 |
| 3001 |   18.69 | 10/03/90 | 2008 | 1007 |
| 3003 |  767.19 | 10/03/90 | 2001 | 1001 |
| 3002 |  1900.1 | 10/03/90 | 2007 | 1004 |
| 3005 | 5160.45 | 10/03/90 | 2003 | 1002 |
| 3006 | 1098.16 | 10/03/90 | 2008 | 1007 |
+------+---------+----------+------+------+




50) Find only those customers whose ratings are higher than every customer in Rome. 

mysql> SELECT * FROM Customers WHERE RATING > (SELECT MAX(RATING) FROM Customers WHERE CITY='Rome');

Approach-retrieves all columns and rows from the "CUSTOMERS" table where the "RATING" column is greater than the maximum rating of customers in Rome.

Table involved-customers

Expected output-
+------+----------+---------+--------+------+
| cnum | cname    | city    | rating | snum |
+------+----------+---------+--------+------+
| 2004 | grass    | berlin  |    300 | 1002 |
| 2008 | cisneras | sanjose |    300 | 1007 |
+------+----------+---------+--------+------+





51) Write a query on the Customers table whose output will exclude all customers with a rating <= 100.00, unless they are located in Rome.

mysql> SELECT * FROM CUSTOMERS WHERE RATING<= 100 OR CITY="ROME";

Approach- retrieves all columns and rows from the "CUSTOMERS" table where the "RATING" column is less than or equal to 100 or the "CITY" column is equal to "ROME".

Table involved-customers

Expected output-
+------+----------+--------+--------+------+
| cnum | cname    | city   | rating | snum |
+------+----------+--------+--------+------+
| 2001 | hoffman  | london |    100 | 1001 |
| 2002 | giovamni | rome   |    200 | 1003 |
| 2006 | CLEMENS  | london |    100 | 1001 |
| 2007 | pereira  | rome   |    100 | 1004 |
+------+----------+--------+--------+------+




52) Find all rows from the customer’s table for which the salesperson number is 1001. 

mysql> SELECT * FROM Customers WHERE SNUM='1001';

Approach-retrieves all columns and rows from the "CUSTOMERS" table where the "SNUM" column is equal to '1001'.

Table involved-customers

Expected output-
+------+---------+--------+--------+------+
| CNUM | CNAME   | CITY   | RATING | SNUM |
+------+---------+--------+--------+------+
| 2001 | Hoffman | London |    100 | 1001 |
| 2006 | Clemens | London |    100 | 1001 |
+------+---------+--------+--------+------+





53) Find the total amount in orders for each salesperson where their total of amounts are greater than the amount of the largest order in the table. 

mysql> SELECT Total,SNUM FROM (SELECT SUM(AMT) AS TOTAL,SNUM FROM Orders GROUP BY SNUM) AS O WHERE Total > (SELECT MAX(AMT) FROM Orders);

Approach-retrieves two columns, "Total" and "SNUM", by grouping the "ORDERS" table by salesperson number ("SNUM") and then filtering the results to only include those salespersons whose total order amount is greater than the maximum order amount in the "ORDERS" table. 

Table involved-orders,

Expected output-
+----------+------+
| Total    | SNUM |
+----------+------+
| 15382.07 | 1001 |
+----------+------+





54) Write a query that selects all orders save those with zeroes or NULL in the amount file. 

mysql> SELECT * FROM Orders WHERE AMT = 0 OR NULL;

Approach-checking for records in the "ORDERS" table where the "AMT" column is either equal to 0 or is NULL.

Table involved-orders

Expected output-
Empty set 




56) Find all salespeople name and commission. 

mysql> SELECT SNAME, COMM FROM Salespeople;

Approach- retrieves two columns, "SNAME" and "COMM", from the "SALESPEOPLE" table

Table involved-salespeole

Expected output-
+---------+------+
| SNAME   | COMM |
+---------+------+
| Peel    |   12 |
| Serres  |   13 |
| AxelRod |   10 |
| Motika  |   11 |
| Rifkin  |   15 |
| Fran    |   25 |
+---------+------+




57) Write a query that produces the names and cities of all customers with the same rating as Hoffman. Write the query using Hoffman’s cnum rather than his rating, so that it would still be usable if his rating is changed.

mysql> SELECT cname, city
    -> FROM customers
    -> WHERE rating = (SELECT rating
    ->                  FROM customers
    ->                  WHERE cnum = 2001);
Approach-retrieves two columns, "CNAME" and "CITY", from the "CUSTOMERS" table, for the customer whose "RATING" is equal to the "RATING" of the customer with "CNUM" 2001.

Table involved-customers

Expected output-
+----------+--------+
| cname    | city   |
+----------+--------+
| Hoffman  | London |
| Clemens  | London |
| Pererira | Rome   |
+----------+--------+




58) Find all salespeople for whom there are customers that follow them in alphabetical order. 

mysql> SELECT sname ,cname  FROM salespeople ,customers WHERE salespeople.snum=customers.snum GROUP BY sname, cname;

Approach- retrieves two columns, "SNAME" and "CNAME", from the "SALESPEOPLE" and "CUSTOMERS" tables, respectively, where the "SNUM" column of the two tables match.

Table involved-salepeople,customers

Expected output-
+---------+----------+
| sname   | cname    |
+---------+----------+
| Peel    | hoffman  |
| axeirod | giovamni |
| serres  | liu      |
| serres  | grass    |
| Peel    | CLEMENS  |
| rifkin  | cisneras |
| motika  | pereira  |
+---------+----------+




59) Write a query that produces the names and ratings of all customers who have average orders. 

mysql> SELECT cname,rating FROM customers WHERE cnum =(SELECT cnum FROM orders WHERE AMT IN (SELECT AVG(AMT) FROM orders));

Approach- retrieves two columns, "CNAME" and "RATING", from the "CUSTOMERS" table, for the customer whose "CNUM" is equal to the "CNUM" of the order(s) with "AMT" equal to the average "AMT" of all orders.

Table involved-customers,orders

Expected output-
Empty set (0.01 sec)




60) Find the SUM of all Amounts from the orders table. 

mysql> SELECT SUM(amt) AS total_of_all_orders
    -> FROM orders;
Approach-retrieves the sum of the "AMT" column of all rows in the "ORDERS" table and aliases the result as "total_of_all_orders".

Table involved-orders

Expected output-
+---------------------+
| total_of_all_orders |
+---------------------+
|             26656.4 |
+---------------------+





61) Write a SELECT command that produces the order number, amount, and the date from rows in the order table. 

mysql> SELECT onum, amt, odate
    -> FROM orders;
Approach-retrieves three columns, "ONUM", "AMT", and "ODATE", from the "ORDERS" table.

Table involved-orders

Expected output-
+------+---------+----------+
| onum | amt     | odate    |
+------+---------+----------+
| 3001 |   18.69 | 10/03/90 |
| 3002 |  1900.1 | 10/03/90 |
| 3003 |  767.19 | 10/03/90 |
| 3005 | 5160.45 | 10/03/90 |
| 3006 | 1096.16 | 10/03/90 |
| 3007 |   75.75 | 10/04/90 |
| 3008 |    4723 | 10/05/90 |
| 3009 | 1713.23 | 10/04/90 |
| 3010 | 1309.95 | 10/06/90 |
| 3011 | 9891.88 | 10/06/90 |
+------+---------+----------+




62) Count the number of non NULL rating fields in the Customers table (including repeats). 

mysql> SELECT COUNT(*) AS count_of_fields
    -> FROM customers;

Approach-retrieves a single column, "count_of_fields", from the "CUSTOMERS" table, which represents the total count of all fields in the table. 

Table involved-customers

Expected output-
+-----------------+
| count_of_fields |
+-----------------+
|               7 |
+-----------------+




64) List the commissions of all salespeople servicing customers in London.

mysql> SELECT * FROM salespeople WHERE city="london";

Approach- retrieves all columns and rows from the "SALESPEOPLE" table where the value in the "CITY" column is equal to "london".

Table involved-salespeople

Expected output-
+------+--------+--------+------+
| snum | sname  | city   | comm |
+------+--------+--------+------+
| 1001 | Peel   | London |   12 |
| 1004 | motika | london |   11 |
| 1008 | fran   | london |   25 |
+------+--------+--------+------+




65) Write a query using ANY or ALL that will find all salespeople who have no customers located in their city. 

mysql> SELECT SNUM,SNAME FROM SALESPEOPLE WHERE SNUM =ANY(SELECT SNUM FROM CUSTOMERS WHERE SALESPEOPLE.CITY !=CUSTOMERS.CITY);

Approach-retrieves two columns, "SNUM" and "SNAME", from the "SALESPEOPLE" table where the value in the "SNUM" column is equal to any value in the "SNUM" column of the "CUSTOMERS" table where the "CITY" value in the "CUSTOMERS" table is not equal to the "CITY" value in the "SALESPEOPLE" table.

Table involved-salespeople,customers

Expected output-
+------+---------+
| SNUM | SNAME   |
+------+---------+
| 1002 | serres  |
| 1003 | axeirod |
| 1004 | motika  |
| 1007 | rifkin  |
+------+---------+




66) Write a query using the EXISTS operator that selects all salespeople with customers located in their cities who are not assigned to them. 

mysql> SELECT * FROM Salespeople WHERE EXISTS(SELECT SNUM FROM Customers WHERE Salespeople.CITY = Customers.CITY AND Salespeople.SNUM != Customers.SNUM);

Approach-retrieves all the rows from the "Salespeople" table where there exists at least one row in the "Customers" table with a matching "CITY" value, but a different "SNUM" value.

Table involved-salespeople,customers

Expected output-
+------+--------+---------+------+
| snum | sname  | city    | comm |
+------+--------+---------+------+
| 1002 | serres | sanjose |   13 |
| 1004 | motika | london  |   11 |
| 1008 | fran   | london  |   25 |
+------+--------+---------+------+




67) Write a query that selects all customers serviced by Peel or Motika. 

mysql>  SELECT * FROM Customers WHERE SNUM = ANY (SELECT SNUM FROM Salespeople WHERE SNAME='Peel' OR SNAME='Motika');

Approach- retrieves all the rows from the "Customers" table where the "SNUM" value matches any of the "SNUM" values in the result set of the subquery. The subquery selects all the "SNUM" values from the "Salespeople" table where the "SNAME" value is either "Peel" or "Motika".

Table involved-customers,salespeople

Expected output-
+------+---------+--------+--------+------+
| cnum | cname   | city   | rating | snum |
+------+---------+--------+--------+------+
| 2001 | hoffman | london |    100 | 1001 |
| 2006 | CLEMENS | london |    100 | 1001 |
| 2007 | pereira | rome   |    100 | 1004 |
+------+---------+--------+--------+------+




68) Count the number of salespeople registering orders for each day. (If a salesperson has more than one order on a given day, he or she should be counted only once.) 

mysql>  SELECT COUNT(DISTINCT SNUM), ODATE FROM Orders GROUP BY ODATE;

Approach-This SQL query retrieves the count of distinct "SNUM" values and "ODATE" values from the "Orders" table, grouped by "ODATE".

Table involved-orders

Expected output-
+----------------------+----------+
| COUNT(DISTINCT SNUM) | ODATE    |
+----------------------+----------+
|                    4 | 10/03/90 |
|                    2 | 10/04/90 |
|                    1 | 10/05/90 |
|                    2 | 10/06/90 |
+----------------------+----------+




69) Find all orders attributed to salespeople who live in London.

mysql> SELECT * FROM Orders WHERE SNUM IN (SELECT SNUM FROM Salespeople WHERE CITY='London');

Approach-retrieves all rows from the "Orders" table where the "SNUM" value matches any of the "SNUM" values in the result set of the subquery. The subquery selects all "SNUM" values from the "Salespeople" table where the "CITY" value is 'London'

Table involved-orders,salespeople

Expected output-
+------+---------+----------+------+------+
| onum | amt     | odate    | cnum | snum |
+------+---------+----------+------+------+
| 3003 |  767.19 | 10/03/90 | 2001 | 1001 |
| 3002 |  1900.1 | 10/03/90 | 2007 | 1004 |
| 3008 |    4723 | 10/05/90 | 2006 | 1001 |
| 3011 | 9891.88 | 10/06/90 | 2006 | 1001 |
+------+---------+----------+------+------+




70) Find all orders by customers not located in the same cities as their salespeople.

mysql> SELECT * FROM Orders WHERE CNUM = ANY (SELECT CNUM FROM Customers AS c INNER JOIN Salespeople AS s ON c.CITY!=s.CITY AND s.SNUM=c.SNUM);

Approach-retrieves all rows from the "Orders" table where the "CNUM" value matches any of the "CNUM" values in the result set of the subquery. The subquery selects all "CNUM" values from the "Customers" table where the "CITY" value is not equal to the "CITY" value of the corresponding salesperson in the "Salespeople" table, and the "SNUM" value in the "Customers" table matches the "SNUM" value in the "Salespeople" table.

Table involved-orders,customers,salespeople

Expected output-
+------+---------+----------+------+------+
| onum | amt     | odate    | cnum | snum |
+------+---------+----------+------+------+
| 3001 |   18.69 | 10/03/90 | 2008 | 1007 |
| 3002 |  1900.1 | 10/03/90 | 2007 | 1004 |
| 3006 | 1098.16 | 10/03/90 | 2008 | 1007 |
| 3009 | 1713.23 | 10/04/90 | 2002 | 1003 |
| 3007 |   75.75 | 10/04/90 | 2004 | 1002 |
| 3010 | 1309.95 | 10/06/90 | 2004 | 1002 |
+------+---------+----------+------+------+





71) Find all salespeople who have customers with more than one current order.

mysql> SELECT * FROM Salespeople WHERE SNUM IN (SELECT SNUM FROM Customers WHERE 1 < (SELECT COUNT(*) FROM Orders WHERE Customers.CNUM = CNUM));

Approach- we will select all the salespeople whose customers have placed more than one order:

Table involved-salespeople,customers,orders

Expected output-
+------+--------+-----------+------+
| snum | sname  | city      | comm |
+------+--------+-----------+------+
| 1001 | Peel   | London    |   12 |
| 1002 | serres | sanjose   |   13 |
| 1007 | rifkin | barcelona |   15 |
+------+--------+-----------+------+





72) Write a query that extracts from the customer’s table every customer assigned to a salesperson, who is currently having at least one another customer(besides the customer being selected) with orders in the Orders Table.

mysql>  SELECT * FROM Customers WHERE SNUM IN(SELECT SNUM FROM Orders WHERE 1<(SELECT COUNT(DISTINCT CNUM) FROM Orders WHERE Customers.SNUM = SNUM));

Approach-we will select all customers who have placed orders with more than one distinct customer:

Table involved-customers,orders

Expected output-
+------+---------+---------+--------+------+
| cnum | cname   | city    | rating | snum |
+------+---------+---------+--------+------+
| 2001 | hoffman | london  |    100 | 1001 |
| 2003 | liu     | sanjose |    200 | 1002 |
| 2004 | grass   | berlin  |    300 | 1002 |
| 2006 | CLEMENS | london  |    100 | 1001 |
+------+---------+---------+--------+------+




73) Write a query on the customer’s table that will find the highest rating in each city. Put the output in this form: for the city (city), the highest rating is (rating). 

mysql> SELECT CITY AS 'For the city', MAX(RATING) AS 'The highest rating' FROM Customers GROUP BY CITY;

Approach-we will select the highest rating for each city in the Customers table:

Table involved-customers

Expected output-
+--------------+--------------------+
| For the city | The highest rating |
+--------------+--------------------+
| london       |                100 |
| rome         |                200 |
| sanjose      |                300 |
| berlin       |                300 |
+--------------+--------------------+




74) Write a query that will produce the snum values of all salespeople with orders, having amt greater than 1000 in the Orders Table(without repeats).

mysql> SELECT DISTINCT(SNUM) FROM Orders WHERE AMT>1000;

Approach-This query will select the distinct salespeople numbers (SNUM) for orders with an amount greater than 1000:


Table involved-orders

Expected output-
+------+
| SNUM |
+------+
| 1004 |
| 1002 |
| 1007 |
| 1003 |
| 1001 |
+------+




75) Write a query that lists customers in a descending order of rating. Output the rating field first, followed by the customer’s names and numbers.

mysql> SELECT RATING, CNAME, CNUM FROM Customers ORDER BY RATING DESC;

Approach-This query will select the rating, customer name (CNAME), and customer number (CNUM) from the Customers table, and order the results by rating in descending order:


Table involved-customers

Expected output-
+--------+----------+------+
| RATING | CNAME    | CNUM |
+--------+----------+------+
|    300 | grass    | 2004 |
|    300 | cisneras | 2008 |
|    200 | giovamni | 2002 |
|    200 | liu      | 2003 |
|    100 | hoffman  | 2001 |
|    100 | CLEMENS  | 2006 |
|    100 | pereira  | 2007 |
+--------+----------+------+




76) Find the average commission for salespeople in London. 

mysql> SELECT AVG(COMM) FROM Salespeople WHERE CITY='London';

Approach-This query will calculate the average commission earned by salespeople who work in London:

Table involved-salespeople

Expected output-
+-----------+
| AVG(COMM) |
+-----------+
|   16.0000 |
+-----------+




77) Find all orders credited to the same salesperson who services Hoffman.(cnum 2001). 

mysql>  SELECT * FROM Orders WHERE SNUM IN (SELECT SNUM FROM Customers WHERE CNUM = 2001);

Approach-This query will select all orders made by the salespeople who have customers with the CNUM of 2001:

Table involved-orders,customers

Expected output-
+------+---------+----------+------+------+
| onum | amt     | odate    | cnum | snum |
+------+---------+----------+------+------+
| 3003 |  767.19 | 10/03/90 | 2001 | 1001 |
| 3008 |    4723 | 10/05/90 | 2006 | 1001 |
| 3011 | 9891.88 | 10/06/90 | 2006 | 1001 |
+------+---------+----------+------+------+




78) Find all salespeople whose commission is in between 0.10 and 0.12(both inclusive).

mysql> SELECT * FROM Salespeople WHERE COMM BETWEEN 10 AND 12;

Approach-This query selects all rows from the Salespeople table where the COMM column value is between 10 and 12:

Table involved-salespepole

Expected output-
+------+---------+----------+------+
| snum | sname   | city     | comm |
+------+---------+----------+------+
| 1003 | axeirod | new york |   10 |
| 1004 | motika  | london   |   11 |
| 1001 | Peel    | London   |   12 |
+------+---------+----------+------+





79) Write a query that will give you the names and cities of all salespeople in London with a commission above 0.10.

mysql> SELECT SNAME, CITY FROM Salespeople WHERE CITY='London' AND COMM>10;

Approach-selecting data from the "Salespeople" table, specifically the "SNAME" and "CITY" columns, with the following criteria:

Table involved-salespeople

Expected output-
+--------+--------+
| SNAME  | CITY   |
+--------+--------+
| motika | london |
| Peel   | London |
| fran   | london |
+--------+--------+




80) Write a query that selects each customer’s smallest order. 

mysql> SELECT MIN(AMT), CNUM FROM Orders GROUP BY CNUM;

Approach-The query SELECT MIN(AMT), CNUM FROM Orders GROUP BY CNUM groups all orders by CNUM and returns the minimum AMT for each group alongside the corresponding CNUM. The GROUP BY clause is used to group the orders by CNUM, and the MIN() function is used to get the minimum AMT for each group.

Table involved-orders

Expected output-
+----------+------+
| MIN(AMT) | CNUM |
+----------+------+
|    18.69 | 2008 |
|   767.19 | 2001 |
|   1900.1 | 2007 |
|  5160.45 | 2003 |
|  1713.23 | 2002 |
|    75.75 | 2004 |
|     4723 | 2006 |
+----------+------+





81) Write a query that selects the first customer in alphabetical order whose name begins with ‘G’.

mysql> SELECT MIN(CNAME) FROM Customers WHERE CNAME LIKE 'G%';

Approach-selects the minimum value of the CNAME column from the Customers table where the CNAME starts with the letter 'G'.

Table involved-customers

Expected output-
+------------+
| MIN(CNAME) |
+------------+
| giovamni   |
+------------+




82) Write a query that counts the number of different non NULL city values in the customers table.

mysql> SELECT COUNT(DISTINCT CITY) FROM Customers;

Approach-This query will return the count of distinct cities in the Customers table:

Table involved-customers

Expected output-
+----------------------+
| COUNT(DISTINCT CITY) |
+----------------------+
|                    4 |
+----------------------+





83) Find the average amount from the Orders Table. 

mysql> SELECT AVG(AMT) FROM Orders; 

Approach-This query will return the average of amt of orders table:

Table involved-orders

Expected output-
+-------------+
| AVG(AMT)    |
+-------------+
| 2665.840000 |
+-------------+





84) Find all customers who are not located in SanJose and whose rating is above 200. 

mysql> SELECT * FROM Customers WHERE CITY!='SanJose' AND RATING>200;

Approach-retrieves all rows from the Customers table where the value in the CITY column is not equal to 'SanJose' AND the value in the RATING column is greater than 200.

Table involved-customers

Expected output-
+------+-------+--------+--------+------+
| CNUM | CNAME | CITY   | RATING | SNUM |
+------+-------+--------+--------+------+
| 2004 | Grass | Berlin |    300 | 1002 |
+------+-------+--------+--------+------+





85) Give a simpler way to write this query.SELECT snum, sname, city, comm FROM salespeople WHERE (comm > 0.12 OR comm < 0.14); 

mysql> SELECT * FROM Salespeople WHERE comm BETWEEN 12 AND 14;

Approach-selects all columns from the "Salespeople" table where the "comm" value is between 12 and 14, inclusive.

Table involved-salespeople

Expected output-
+------+--------+---------+------+
| snum | sname  | city    | comm |
+------+--------+---------+------+
| 1001 | Peel   | London  |   12 |
| 1002 | serres | sanjose |   13 |
+------+--------+---------+------+




86) Which salespersons attend to customers not in the city they have been assigned to? 

mysql> SELECT * FROM Salespeople WHERE SNUM IN (SELECT SNUM FROM Customers WHERE Salespeople.CITY != Customers.CITY AND Salespeople.SNUM = Customers.SNUM);

Approah-This query selects all the salespeople whose city is not the same as any of their customers' cities but they have at least one customer.

Table involved-salespeople,customers

Expected output-
+------+---------+-----------+------+
| snum | sname   | city      | comm |
+------+---------+-----------+------+
| 1002 | serres  | sanjose   |   13 |
| 1003 | axeirod | new york  |   10 |
| 1004 | motika  | london    |   11 |
| 1007 | rifkin  | barcelona |   15 |
+------+---------+-----------+------+




87) Which salespeople get commission greater than 0.11 are serving customers rated less than 250? 

mysql> SELECT * FROM Salespeople WHERE COMM > '11' AND SNUM IN (SELECT SNUM FROM Customers WHERE RATING < 250 AND Salespeople.SNUM = Customers.SNUM);

Approach-we are selecting all the rows from the Salespeople table where the COMM value is greater than 11 and the SNUM is also present in the result set of the subquery.

Table involved-salespeople,customers

Expected output-
+------+--------+---------+------+
| SNUM | SNAME  | CITY    | COMM |
+------+--------+---------+------+
| 1001 | peel   | london  |   12 |
| 1002 | serres | sanJose |   13 |
+------+--------+---------+------+




88) Which salespeople have been assigned to the same city but get different commission percentages? 

mysql> SELECT SNUM,SNAME FROM Salespeople WHERE SNUM IN (SELECT c1.SNUM FROM Customers c1 JOIN Customers c2 ON c1.CITY = c2.CITY AND c1.SNUM != c2.SNUM);

Approach-retrieves the salespeople ID (SNUM) and name (SNAME) from the Salespeople table where the SNUM is in the result set of a subquery. The subquery retrieves the SNUM values of those customers who share the same CITY but have a different SNUM from at least one other customer in the same CITY. Here's the breakdown of the query:

Table involved-salespeople,customers

Expected output-
+------+---------+
| SNUM | SNAME   |
+------+---------+
| 1004 | Motika  |
| 1007 | Rifkin  |
| 1003 | AxelRod |
| 1002 | Serres  |
+------+---------+




89) Which salesperson has earned the maximum commission? 

mysql> SELECT O.SNUM,S.SNAME,SUM(O.AMT*S.COMM/100) FROM ORDERS O JOIN SALESPEOPLE S ON O.SNUM=S.SNUM GROUP BY O.SNUM ORDER BY SUM(O.AMT*S.COMM/100) DESC LIMIT 1;

Approach-This query retrieves the salesperson who earned the highest commission from all orders. Here is a breakdown of each part of the query:

Table involved-orders,salespeople

Expected output-
+------+-------+-----------------------+
| SNUM | SNAME | SUM(O.AMT*S.COMM/100) |
+------+-------+-----------------------+
| 1001 | Peel  |    1845.8483862304688 |
+------+-------+-----------------------+





90) Does the customer who has placed the maximum number of orders have the maximum rating? 

mysql> SELECT "YES" WHERE EXISTS(SELECT * FROM CUSTOMERS WHERE CNUM IN (SELECT CNUM FROM ORDERS GROUP BY CNUM HAVING COUNT(CNUM) =(SELECT COUNT(CNUM) FROM ORDERS GROUP BY CNUM ORDER BY COUNT(CNUM) DESC LIMIT 1)) AND RATING =(SELECT MAX(RATING) FROM CUSTOMERS));

Approach-This query returns "YES" if there exists at least one customer who has placed the highest number of orders and has the highest rating among all customers. Otherwise, it returns an empty result set.

Table involved-customers,orders

Expected output-
+-----+
| YES |
+-----+
| YES |
+-----+




91) List all customers in descending order of customer rating. 

mysql> SELECT * FROM CUSTOMERS ORDER BY RATING DESC;

Approach-selects all columns from the table CUSTOMERS and sorts the results in descending order based on the value in the RATING column. The DESC keyword is used to specify that the results should be sorted in descending order

Table involved-customers

Expected output-
+------+----------+---------+--------+------+
| CNUM | CNAME    | CITY    | RATING | SNUM |
+------+----------+---------+--------+------+
| 2004 | Grass    | Berlin  |    300 | 1002 |
| 2008 | Cisneros | SanJose |    300 | 1007 |
| 2002 | Giovanni | Rome    |    200 | 1003 |
| 2003 | Liu      | SanJose |    200 | 1002 |
| 2001 | Hoffman  | London  |    100 | 1001 |
| 2006 | Clemens  | London  |    100 | 1001 |
| 2007 | Pereira  | Rome    |    100 | 1004 |
+------+----------+---------+--------+------+




92) On which days has Hoffman placed orders? 

mysql> SELECT ODATE AS 'DATES ON WHICH HOFFMAN HAS PLACED ORDERS' FROM ORDERS WHERE CNUM=(SELECT CNUM FROM CUSTOMERS WHERE CNAME='HOFFMAN');

Approach-This query selects the ODATE column from the ORDERS table, where the CNUM column is equal to the CNUM of the customer with CNAME 'HOFFMAN' in the CUSTOMERS table.

Table involved-orders,customers

Expected output-
+------------------------------------------+
| DATES ON WHICH HOFFMAN HAS PLACED ORDERS |
+------------------------------------------+
| 1990-10-03                               |
+------------------------------------------+





93) Which salesmen have no orders between 10/03/1990 and 10/05/1990? 

mysql> SELECT * FROM SALESPEOPLE WHERE SNUM NOT IN (SELECT  DISTINCT SNUM FROM ORDERS WHERE ODATE BETWEEN '1990-10-03' AND '1990-10-05');

Approach-etrieves all the rows from the "SALESPEOPLE" table where the "SNUM" value is not included in the distinct "SNUM" values retrieved from the "ORDERS" table where "ODATE" is between '1990-10-03' and '1990-10-05'.

Table involved-salespeople,orders

Expected output-
+------+-------+--------+------+
| SNUM | SNAME | CITY   | COMM |
+------+-------+--------+------+
| 1008 | Fran  | London |   25 |
+------+-------+--------+------+




94) How many salespersons have succeeded in getting orders? 

mysql> SELECT * FROM SALESPEOPLE WHERE SNUM IN (SELECT DISTINCT SNUM FROM ORDERS);

Approuch-This query selects all the rows from the "Salespeople" table where the "SNUM" value exists in the result set of a subquery that selects distinct "SNUM" values from the "Orders" table.

Table involved-salespeople,orders

Expected output-
+------+---------+-----------+------+
| SNUM | SNAME   | CITY      | COMM |
+------+---------+-----------+------+
| 1001 | Peel    | London    |   12 |
| 1002 | Serres  | SanJose   |   13 |
| 1004 | Motika  | London    |   11 |
| 1007 | Rofkin  | Barcelona |   15 |
| 1003 | AxelRod | New York  |   10 |
+------+---------+-----------+------+




95) How many customers have placed orders? 

mysql> SELECT * FROM CUSTOMERS WHERE CNUM IN (SELECT DISTINCT CNUM FROM ORDERS );

Approach-This query selects all the columns from the Customers table where the CNUM value exists in the distinct CNUM values from the Orders table. It retrieves the customers who have placed orders.

Table involved-orders,customers

Expected output-
+------+----------+---------+--------+------+
| CNUM | CNAME    | CITY    | RATING | SNUM |
+------+----------+---------+--------+------+
| 2001 | Hoffman  | London  |    100 | 1001 |
| 2002 | Giovanni | Rome    |    200 | 1003 |
| 2003 | Liu      | SanJose |    200 | 1002 |
| 2004 | Grass    | Berlin  |    300 | 1002 |
| 2006 | Clemens  | London  |    100 | 1001 |
| 2007 | Pereira  | Rome    |    100 | 1004 |
| 2008 | Cisneros | SanJose |    300 | 1007 |
+------+----------+---------+--------+------+




96) On which date has each salesman booked an order of maximum value? 

mysql> SELECT ODATE, SNUM, MAX(AMT) FROM ORDERS GROUP BY SNUM;

Approach-

Table involved-orders

Expected output-
+----------+------+----------+
| ODATE    | SNUM | MAX(AMT) |
+----------+------+----------+
| 10/03/90 | 1001 |  9891.88 |
| 10/03/90 | 1002 |  5160.45 |
| 10/04/90 | 1003 |  1713.23 |
| 10/03/90 | 1004 |  1900.10 |
| 10/03/90 | 1007 |  1098.16 |
+----------+------+----------+




97) Who is the most successful salesperson? 

mysql> SELECT SNUM,SUM(AMT) FROM ORDERS GROUP BY SNUM ORDER BY SUM(AMT) DESC LIMIT 1;

Approach-This query selects the salesperson number (SNUM) and the sum of the order amounts (AMT) from the Orders table, groups them by SNUM, sorts the results in descending order by the sum of the order amounts, and limits the output to the first row:

Table involved-orders

Expected output-
+------+----------+
| SNUM | SUM(AMT) |
+------+----------+
| 1001 | 15382.07 |
+------+----------+




98) Which customers have the same rating? 

mysql> SELECT C.CNUM,C.CNAME,C1.CNUM,C1.CNAME, C.RATING FROM CUSTOMERS C JOIN CUSTOMERS C1 ON C.RATING=C1.RATING WHERE C.CNUM<C1.CNUM;

Approach-joins the CUSTOMERS table with itself, matching rows where the RATING value is the same. It then selects the CNUM, CNAME, and RATING columns from the left table, and also selects CNUM and CNAME columns from the right table, and only returns rows where the CNUM of the left table is less than the CNUM of the right table.

Table involved-customers

Expected output-
+------+----------+------+----------+--------+
| CNUM | CNAME    | CNUM | CNAME    | RATING |
+------+----------+------+----------+--------+
| 2001 | Hoffman  | 2006 | Clemens  |    100 |
| 2001 | Hoffman  | 2007 | Pereira  |    100 |
| 2002 | Giovanni | 2003 | Liu      |    200 |
| 2004 | Grass    | 2008 | Cisneros |    300 |
| 2006 | Clemens  | 2007 | Pereira  |    100 |
+------+----------+------+----------+--------+




99) Find all orders greater than the average for October 4th. 

mysql> SELECT * FROM ORDERS WHERE AMT>(SELECT AVG(AMT) FROM ORDERS GROUP BY ODATE HAVING ODATE ='1990-10-04');

Approach-This query selects all orders where the amount is greater than the average amount of orders made on October 4th, 1990.

Table involved-orders

Expected output-
+------+---------+------------+------+------+
| ONUM | AMT     | ODATE      | CNUM | SNUM |
+------+---------+------------+------+------+
| 3002 |  1900.1 | 1990-10-03 | 2007 | 1004 |
| 3005 | 5160.45 | 1990-10-03 | 2003 | 1002 |
| 3006 | 1098.16 | 1990-10-03 | 2008 | 1007 |
| 3009 | 1713.23 | 1990-10-04 | 2002 | 1003 |
| 3008 |    4723 | 1990-10-05 | 2006 | 1001 |
| 3010 | 1309.95 | 1990-10-06 | 2004 | 1002 |
| 3011 | 9891.88 | 1990-10-06 | 2006 | 1001 |
+------+---------+------------+------+------+



100.) List all customers with ratings above Grass’s average. 

mysql> SELECT * FROM CUSTOMERS WHERE RATING > (SELECT RATING FROM CUSTOMERS WHERE CNAME = "Grass");

Approach-This query retrieves all customers whose rating is greater than the rating of the customer with name 'Grass':


Table involved-customers

Expected output-
Empty set (0.00 sec)




101) Which customers have above average orders? 

mysql> SELECT CNUM,ONUM,AMT FROM ORDERS WHERE AMT>(SELECT AVG(AMT) FROM ORDERS);

Approach-This query selects the CNUM, ONUM, and AMT columns from the ORDERS table where the AMT value is greater than the average AMT value of all orders.

Table involved-orders

Expected output-
+------+------+---------+
| CNUM | ONUM | AMT     |
+------+------+---------+
| 2003 | 3005 | 5160.45 |
| 2006 | 3008 |    4723 |
| 2006 | 3011 | 9891.88 |
+------+------+---------+




102) Select the total amount in orders for each salesperson for which the total is greater than the amount of the largest order in the table.

mysql> SELECT SNUM, SUM(AMT) FROM ORDERS GROUP BY SNUM HAVING SUM(AMT)>(SELECT MAX(AMT) FROM ORDERS);

Approach-selects the SNUM and the sum of the AMT column from the ORDERS table, grouping the results by SNUM. It then filters the results to only include those groups where the sum of AMT is greater than the maximum AMT value in the ORDERS table.

Table involved-orders

Expected output-
+------+--------------------+
| SNUM | SUM(AMT)           |
+------+--------------------+
| 1001 | 15382.069885253906 |
+------+--------------------+



103) Give names and numbers of all salespersons that have more than one customer? 

mysql> SELECT SNUM,SNAME FROM SALESPEOPLE WHERE SNUM IN (SELECT SNUM FROM CUSTOMERS GROUP BY SNUM HAVING COUNT(SNUM)>1);

Approach-This query selects the SNUM and SNAME columns from the SALESPEOPLE table where the SNUM value is in the result set of a subquery that selects the SNUM values from the CUSTOMERS table grouped by SNUM and having a count greater than 1. 

Table involved-salespeople,customers

Expected output-
+------+--------+
| SNUM | SNAME  |
+------+--------+
| 1001 | Peel   |
| 1002 | Serres |
+------+--------+



104) Select all salespeople by name and number who have customers in their city whom they don’t service. 

mysql> SELECT DISTINCT S.SNUM, S.SNAME FROM SALESPEOPLE S JOIN CUSTOMERS C ON S.CITY=C.CITY WHERE S.SNUM<> C.SNUM;

Approach-This query joins the SALESPEOPLE and CUSTOMERS tables on the condition that the salesperson's city matches the customer's city and the salesperson's SNUM is not equal to the customer's CNUM. It selects the distinct SNUM and SNAME from the SALESPEOPLE table that satisfy this condition.

Table involved-salespeople,customers

Expected output-
+------+--------+
| SNUM | SNAME  |
+------+--------+
| 1008 | Fran   |
| 1004 | Motika |
| 1002 | Serres |
+------+--------+




105) Does the total amount in orders by customer in Rome and London, exceed the commission paid to salesperson in London, and New York by more than 5 times? 

mysql> SELECT IF(
 ( SELECT SUM(O.AMT) / 5 FROM ORDERS O JOIN CUSTOMERS C ON C.CNUM=O.CNUM WHERE C.CITY IN ('LONDON','ROME'))>
    ( SELECT SUM(O.AMT*S.COMM)/100 FROM ORDERS O JOIN SALESPEOPLE S ON S.SNUM=O.SNUM WHERE S.CITY IN 
    ('LONDON','NEW YORK')),'YES','NO');

Approach-This query calculates the total amount of orders made by customers located in either London or Rome and divides it by 5. It then compares this value to the total commission earned by salespeople located in either London or New York, calculated as the sum of each order amount multiplied by the commission percentage, divided by 100. If the first value is greater than the second value, the query returns 'YES', otherwise 'NO'.

Table involved-

Expected output-customers,salespeople,orders
+-------+
| YES
        |
+-------+




106) Which are the date, order number, amt and city for each salesperson (by name) for the maximum order he has obtained?

mysql> SELECT O.ODATE, O.ONUM,O.AMT ,S.SNUM,S.SNAME FROM ORDERS O JOIN SALESPEOPLE S ON S.SNUM=O.SNUM WHERE (O.SNUM,O.AMT) IN ( SELECT SNUM, MAX(AMT) FROM ORDERS GROUP BY SNUM);

Approach-This query selects the ODATE, ONUM, AMT, SNUM, and SNAME columns from the ORDERS and SALESPEOPLE tables where the SNUM and AMT are in a subquery that selects the maximum AMT for each SNUM from the ORDERS table. The subquery is joined with the SALESPEOPLE table on SNUM to get the SNAME column.

Table involved-orders,salespeople

Expected output-
+------------+------+---------+------+---------+
| ODATE      | ONUM | AMT     | SNUM | SNAME   |
+------------+------+---------+------+---------+
| 1990-10-03 | 3002 |  1900.1 | 1004 | Motika  |
| 1990-10-03 | 3005 | 5160.45 | 1002 | Serres  |
| 1990-10-03 | 3006 | 1098.16 | 1007 | Rofkin  |
| 1990-10-04 | 3009 | 1713.23 | 1003 | AxelRod |
| 1990-10-06 | 3011 | 9891.88 | 1001 | Peel    |
+------------+------+---------+------+---------+




107) Which salesperson is having lowest commission? 

mysql> SELECT * FROM SALESPEOPLE WHERE COMM=(SELECT MIN(COMM) FROM SALESPEOPLE);

Approach-This query selects all columns from the SALESPEOPLE table where the COMM column is equal to the minimum value of the COMM column in the SALESPEOPLE table.

Table involved-salespeople

Expected output-
+------+---------+----------+------+
| SNUM | SNAME   | CITY     | COMM |
+------+---------+----------+------+
| 1003 | AxelRod | New York |   10 |
+------+---------+----------+------+
















