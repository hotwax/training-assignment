// menu
Your tree:
5  <---- 10[ height = 2, balance = 0] ----> 15
  <---- 5[ height = 1, balance = 0] ---->
  <---- 15[ height = 1, balance = 0] ---->

Enter 1 to add a node
Enter 2 to remove a node
Enter 3 to check whether data exsits
Enter 4 to exit


case 1: add, remove, check data-  entered invalid data (not a number)

input- 1,2,3
Enter the value of the node:
jkl
output- 
Please give a valid number. java.util.InputMismatchException
(End)



case 2: remove, check data- entered non existing data

Your tree:
5  <---- 10[ height = 2, balance = 0] ----> 15
  <---- 5[ height = 1, balance = 0] ---->
  <---- 15[ height = 1, balance = 0] ---->

input- 2,3
Enter the value of the node:
22
output- 
22 doesn't exists
menu



case 3: add data- entered an existing node value

Your tree:
5  <---- 10[ height = 2, balance = 0] ----> 15
  <---- 5[ height = 1, balance = 0] ---->
  <---- 15[ height = 1, balance = 0] ---->

input- 
1
Enter the value of the node:
5
output- 
node with data 5 already exists.
-------------------------------------
menu




--valid cases

case 4: add a new node-  LL (left left)

Your tree:
5  <---- 10[ height = 2, balance = 1] ---->
  <---- 5[ height = 1, balance = 0] ---->


input- 
1
Enter the value of the node:
3
output- 
-------------------------------------
Your tree:
3  <---- 5[ height = 2, balance = 0] ----> 10
  <---- 3[ height = 1, balance = 0] ---->
  <---- 10[ height = 1, balance = 0] ---->

...menu




case 4: add a new node-  RL (right left)

Your tree:
5  <---- 10[ height = 3, balance = -1] ----> 15
  <---- 5[ height = 1, balance = 0] ---->
  <---- 15[ height = 2, balance = -1] ----> 20
  <---- 20[ height = 1, balance = 0] ---->


input- 
1
Enter the value of the node:
18
output-
-------------------------------------
Your tree:
5  <---- 10[ height = 3, balance = -1] ----> 18
  <---- 5[ height = 1, balance = 0] ---->
15  <---- 18[ height = 2, balance = 0] ----> 20
  <---- 15[ height = 1, balance = 0] ---->
  <---- 20[ height = 1, balance = 0] ---->
  
...menu



case 4: add a new node-  LR (left right)

Your tree:
5  <---- 10[ height = 3, balance = 1] ----> 15
3  <---- 5[ height = 2, balance = 1] ---->
  <---- 3[ height = 1, balance = 0] ---->
  <---- 15[ height = 1, balance = 0] ---->


input- 
1
Enter the value of the node:
4
output- 
-------------------------------------
Your tree:
4  <---- 10[ height = 3, balance = 1] ----> 15
3  <---- 4[ height = 2, balance = 0] ----> 5
  <---- 3[ height = 1, balance = 0] ---->
  <---- 5[ height = 1, balance = 0] ---->
  <---- 15[ height = 1, balance = 0] ---->
  
...menu



case 4: add a new node-  RR (right right)

Your tree:
  <---- 10[ height = 2, balance = -1] ----> 20
  <---- 20[ height = 1, balance = 0] ---->


input- 
1
Enter the value of the node:
30
output-
-------------------------------------
Your tree:
10  <---- 20[ height = 2, balance = 0] ----> 30
  <---- 10[ height = 1, balance = 0] ---->
  <---- 30[ height = 1, balance = 0] ---->

...menu




case 5: remove a node with no child 

Your tree:
5  <---- 10[ height = 3, balance = -1] ----> 15
  <---- 5[ height = 1, balance = 0] ---->
  <---- 15[ height = 2, balance = -1] ----> 20
  <---- 20[ height = 1, balance = 0] ---->

input- 
2
Enter the value of the node:
20
output-
-------------------------------------
Your tree:
5  <---- 10[ height = 2, balance = 0] ----> 15
  <---- 5[ height = 1, balance = 0] ---->
  <---- 15[ height = 1, balance = 0] ---->
...menu



case 6: remove a node with only left child

Your tree:
4  <---- 5[ height = 3, balance = 0] ----> 10
1  <---- 4[ height = 2, balance = 1] ---->
  <---- 1[ height = 1, balance = 0] ---->
8  <---- 10[ height = 2, balance = 0] ----> 20
  <---- 8[ height = 1, balance = 0] ---->
  <---- 20[ height = 1, balance = 0] ---->

input- 
2
Enter the value of the node:
4
output-
-------------------------------------
Your tree:
1  <---- 5[ height = 3, balance = -1] ----> 10
  <---- 1[ height = 1, balance = 0] ---->
8  <---- 10[ height = 2, balance = 0] ----> 20
  <---- 8[ height = 1, balance = 0] ---->
  <---- 20[ height = 1, balance = 0] ---->
...menu



case 7: remove a node with only right child

Your tree:
5  <---- 10[ height = 3, balance = -1] ----> 15
  <---- 5[ height = 1, balance = 0] ---->
  <---- 15[ height = 2, balance = -1] ----> 20
  <---- 20[ height = 1, balance = 0] ---->

input- 
2
Enter the value of the node:
15
output-
-------------------------------------
Your tree:
5  <---- 10[ height = 2, balance = 0] ----> 20
  <---- 5[ height = 1, balance = 0] ---->
  <---- 20[ height = 1, balance = 0] ---->
...menu



case 8: remove a node with both left and right child

Your tree:
5  <---- 10[ height = 3, balance = -1] ----> 15
  <---- 5[ height = 1, balance = 0] ---->
12  <---- 15[ height = 2, balance = 0] ----> 20
  <---- 12[ height = 1, balance = 0] ---->
  <---- 20[ height = 1, balance = 0] ---->

input- 
2
Enter the value of the node:
15
output-
-------------------------------------
Your tree:
5  <---- 10[ height = 3, balance = -1] ----> 12
  <---- 5[ height = 1, balance = 0] ---->
  <---- 12[ height = 2, balance = -1] ----> 20
  <---- 20[ height = 1, balance = 0] ---->
...menu



case 9: check whether a node exists (doesn't exists)

Your tree:
5  <---- 10[ height = 2, balance = 1] ---->
  <---- 5[ height = 1, balance = 0] ---->

input- 
3
Enter the value of the node:
22
output-
22 doesn't exists
-----------------------------
menu



case 10: check whether a node exists (exists)

Your tree:
5  <---- 10[ height = 2, balance = 1] ---->
  <---- 5[ height = 1, balance = 0] ---->

input- 
3
Enter the value of the node:
5
5 exists
-----------------------------
menu


