1) List all the columns of the Salespeople table.

Approach: To get columns we can use Information Schema (Contains all the information about databases)
Expected Output: All the column names of the salespeople table.
Actual Output:
+-------------+
| COLUMN_NAME |
+-------------+
| SNUM        |
| SNAME       |
| CITY        |
| COMM        |
+-------------+

2) List all customers with a rating of 100.

Approach: we can select all the column of customer table with condition of rating 100 in where clause.
Expected Output: All the column of customer table with all the customers with 100 rating.
Actual Output:
+------+---------+--------+--------+------+
| CNUM | CNAME   | CITY   | RATING | SNUM |
+------+---------+--------+--------+------+
| 2001 | Hoffman | London |    100 | 1001 |
| 2005 | Clemens | London |    100 | 1001 |
| 2007 | Pereira | Rome   |    100 | 1004 |
+------+---------+--------+--------+------+

3) Find the largest order taken by each salesperson on each date.

Approach : We can use group by clause to get the largest order taken by each salesperson on each date.
Expected Output:All the columns of order table containing Largest order taken by each salesperson on each date.
Actual Output:
+------+------+---------+------------+------------+
| onum | snum | sname   | odate      | max(o.amt) |
+------+------+---------+------------+------------+
| 3003 | 1001 | Peel    | 1990-03-10 |     767.69 |
| 3008 | 1001 | Peel    | 1990-05-10 |    4723.00 |
| 3011 | 1001 | Peel    | 1990-06-10 |    9891.88 |
| 3005 | 1002 | Serres  | 1990-03-10 |    5160.45 |
| 3007 | 1002 | Serres  | 1990-04-10 |      75.75 |
| 3010 | 1002 | Serres  | 1990-06-10 |    1309.95 |
| 3009 | 1003 | AxelRod | 1990-04-10 |    1713.23 |
| 3002 | 1004 | Motika  | 1990-03-10 |    1900.10 |
| 3001 | 1007 | Rifkin  | 1990-03-10 |    1098.16 |
+------+------+---------+------------+------------+

4) Arrange the Order table by descending customer number.
Approach : We can use order by clause to arrange the order table by descending customer numbers.
Expected Output: All the columns of the orders table are in descending of the customer number.
Actual Output:
+------+---------+------------+------+------+
| ONUM | AMT     | ODATE      | CNUM | SNUM |
+------+---------+------------+------+------+
| 3001 |   18.69 | 1990-03-10 | 2008 | 1007 |
| 3006 | 1098.16 | 1990-03-10 | 2008 | 1007 |
| 3002 | 1900.10 | 1990-03-10 | 2007 | 1004 |
| 3008 | 4723.00 | 1990-05-10 | 2006 | 1001 |
| 3011 | 9891.88 | 1990-06-10 | 2006 | 1001 |
| 3007 |   75.75 | 1990-04-10 | 2004 | 1002 |
| 3010 | 1309.95 | 1990-06-10 | 2004 | 1002 |
| 3005 | 5160.45 | 1990-03-10 | 2003 | 1002 |
| 3009 | 1713.23 | 1990-04-10 | 2002 | 1003 |
| 3003 |  767.69 | 1990-03-10 | 2001 | 1001 |
+------+---------+------------+------+------+

5) Find which salespeople currently have orders in the order table.
Approach: We can use inner join on salespeople and orders table on salespeople number to find which salespeople currently have orders in the order table.
Expected Output: snum and sname from salespeoples table and tuples currently have orders in the order table. 
Actual Output:
+------+---------+
| SNUM | SNAME   |
+------+---------+
| 1001 | Peel    |
| 1002 | Serres  |
| 1003 | AxelRod |
| 1004 | Motika  |
| 1007 | Rifkin  |
+------+---------+

6) List names of all customers matched with the salespeople serving them.
Approach: We can use inner join on salespeople and customer table on salespeople number to list names of all customers matched with the salespeople serving them.
Expected Output: cname and sname from customers and salespoeple table containing names of all customers matched with the salespeople serving them.
Actual Output:
+----------+---------+
| CNAME    | SNAME   |
+----------+---------+
| Hoffman  | Peel    |
| Giovanni | AxelRod |
| Liu      | Serres  |
| Grass    | Serres  |
| Clemens  | Peel    |
| Pereira  | Motika  |
| Cisneros | Rifkin  |
+----------+---------+

7) Find the names and numbers of all salespeople who have more than one customer.
Approach: We can use inner join with the group and have clause with the condition to find salespeople with more than one customer
Expected Output: Names and numbers of all salespeople who have more than one customer.
Actual Output:
+--------+------+
| sname  | snum |
+--------+------+
| Peel   | 1001 |
| Serres | 1002 |
+--------+------+

8) Count the orders of each of the salespeople and output the results in descending order.
Approach: We will use left join on salespeople and orders table with the group by salespeople number and order by no of orders in decreasing order.
Expected Output: salespeople's name,number along with the number of orders they have taken in descending order
Actual Output :
+---------+------+--------------+
| sname   | snum | no_of_orders |
+---------+------+--------------+
| Peel    | 1001 |            3 |
| Serres  | 1002 |            3 |
| Rifkin  | 1007 |            2 |
| AxelRod | 1003 |            1 |
| Motika  | 1004 |            1 |
| Fran    | 1008 |            0 |
+---------+------+--------------+
9) List the customer table if and only if one or more of the customers in the Customer table are located in SanJose.
Approach: We can use the where clause condition on the total count of customers in sanJose if it is greater than or equal to 1
Expected Output: customer number, name, city, rating from customers table along with salespeople number
Actual Output :
+------+----------+---------+--------+------+
| CNUM | CNAME    | CITY    | RATING | SNUM |
+------+----------+---------+--------+------+
| 2001 | Hoffman  | London  |    100 | 1001 |
| 2002 | Giovanni | Rome    |    200 | 1003 |
| 2003 | Liu      | SanJose |    200 | 1002 |
| 2004 | Grass    | Berlin  |    300 | 1002 |
| 2006 | Clemens  | London  |    100 | 1001 |
| 2007 | Pereira  | Rome    |    100 | 1004 |
| 2008 | Cisneros | SanJose |    300 | 1007 |
+------+----------+---------+--------+------+

10) Match salespeople to customers according to what city they live in.
Approach: We will use inner join on salespeople and customers on salespeople number along with on condition of city
Expected Output : All customer and salespeople who has same city .
Actual Output :
+---------+--------+----------+
| city    | sname  | cname    |
+---------+--------+----------+
| London  | Fran   | Hoffman  |
| London  | Motika | Hoffman  |
| London  | Peel   | Hoffman  |
| SanJose | Serres | Liu      |
| London  | Fran   | Clemens  |
| London  | Motika | Clemens  |
| London  | Peel   | Clemens  |
| SanJose | Serres | Cisneros |
+---------+--------+----------+


11) Find all the customers in SanJose who have a rating above 200.

Approach: We will use  where condition and operator on city and rating.
Expected Output : customers details who has rating above 200 and his/her city is sanJose
Actual Output :
+------+----------+---------+--------+------+
| CNUM | CNAME    | CITY    | RATING | SNUM |
+------+----------+---------+--------+------+
| 2008 | Cisneros | SanJose |    300 | 1007 |
+------+----------+---------+--------+------+

12) List the names and commissions of all salespeople in London.

Approach: We will select name and commission columns from salespeople with where condition i.e. wildcard for London city
Expected Output: name and comm of salespeople who are in London city
Actual Output :
+--------+------+
| SNAME  | COMM |
+--------+------+
| Peel   |   12 |
| Motika |   11 |
| Fran   |   25 |
+--------+------+

13) List all the orders of Salesperson Motika from the orders table.
Approach: We will use inner join on salespeople and order table on salespeople number column  with the condition on salespeople name as 'Motika'
Expected Output: We will all order salespeople named Motika
Actual Output :
+------+---------+------------+------+------+
| ONUM | AMT     | ODATE      | CNUM | SNUM |
+------+---------+------------+------+------+
| 3002 | 1900.10 | 1990-03-10 | 2007 | 1004 |
+------+---------+------------+------+------+

14) Find all customers who booked orders on October 3.
Approach: We will inner join on customers and order table on customer number table with condition where date is 3rd of October
Expected Output: name of all the customer who ordered on 3rd of october.
Actual Output:
+----------+------------+
| CNAME    | ODATE      |
+----------+------------+
| Cisneros | 1990-03-10 |
| Pereira  | 1990-03-10 |
| Hoffman  | 1990-03-10 |
| Liu      | 1990-03-10 |
| Cisneros | 1990-03-10 |
+----------+------------+
15) Give the sums of the amounts from the Orders table, grouped by date, eliminating all those dates where the SUM was not at least 2000 above the maximum Amount.

Approach: We will use SUM aggregate function on amt table of order and group by tuples by order date and condition of amt greater than 2000
Expected Output: All the totals by date which is greater than 2000
Actual Output :
+----------+------------+
| SUM(AMT) | ODATE      |
+----------+------------+
|  5160.45 | 1990-03-10 |
|  4723.00 | 1990-05-10 |
|  9891.88 | 1990-06-10 |
+----------+------------+
16) Select all orders that had amounts that were greater than at least one of the orders from October 6.

Approach: We can use sub-query and any operator to filter the tuples from the orders table who has any amt greater than amt on 6th of October
Expected Output: Orders with a greater amount from the 6th of October orders
Actual Output :
+------------+------+---------+
| odate      | onum | amt     |
+------------+------+---------+
| 1990-03-10 | 3002 | 1900.10 |
| 1990-03-10 | 3005 | 5160.45 |
| 1990-05-10 | 3008 | 4723.00 |
| 1990-04-10 | 3009 | 1713.23 |
| 1990-06-10 | 3011 | 9891.88 |
+------------+------+---------+

17) Write a query that uses the EXISTS operator to extract all salespeople who have customers with a rating of 300.

Approach: We will use sub-query and exists operator as mentioned in the question with condition of rating and matching the salespeople number from both the table
Expected Output: salespeople name and number of those salespeople who has customers with 300 rating.
Actual Output: 
+------+--------+
| SNUM | SNAME  |
+------+--------+
| 1002 | Serres |
| 1007 | Rifkin |
+------+--------+
 18) Find all customers whose cnum is 1000 above the snum of Serres. 

Approach: we will use inner join salespeople and customer table on salespeople number with where the condition of customer number greater 1000 more than Serres number 
Expected Output: customer name, number, with salespeople name, number who satisfies the condition
Actual Output:
+----------+------+--------+------+
| CNAME    | CNUM | SNAME  | SNUM |
+----------+------+--------+------+
| Liu      | 2003 | Serres | 1002 |
| Grass    | 2004 | Serres | 1002 |
| Clemens  | 2006 | Peel   | 1001 |
| Pereira  | 2007 | Motika | 1004 |
| Cisneros | 2008 | Rifkin | 1007 |
+----------+------+--------+------+

19) Give the salespeople’s commissions as percentages instead of decimal numbers.

Approach: We will use string concatenation to add the '%' symbol to the commission column of salespeople table
Expected Output: All the entries of the salespeople table with comm column with '%'
Actual Output:
+------+---------+--------------------+
| snum | sname   | comm_in_percentage |
+------+---------+--------------------+
| 1001 | Peel    | 12%                |
| 1002 | Serres  | 13%                |
| 1003 | AxelRod | 10%                |
| 1004 | Motika  | 11%                |
| 1007 | Rifkin  | 15%                |
| 1008 | Fran    | 25%                |
+------+---------+--------------------+

20) Find the largest order taken by each salesperson on each date, eliminating those Maximum orders, which are less than 3000.

Approach: We will use max aggregate function and group by the amt by order date column and condition on amt which is greater than 3000
Expected Output: All the orders with greater than 3000 on each date
Actual Output:
+------------+------+------------+
| max_amount | snum | odate      |
+------------+------+------------+
|    5160.45 | 1002 | 1990-03-10 |
|    4723.00 | 1001 | 1990-05-10 |
|    9891.88 | 1001 | 1990-06-10 |
+------------+------+------------+

21) List all the largest orders for October 3, for each salesperson.

Approach: We will use the max aggregate function on the amt column and group by salespeople number with the condition on the order date which is 3rd of October
Expected Output: All the largest orders on the 3rd of October for each salesperson
Actual Output:
+------+----------+------------+
| snum | MAX(amt) | odate      |
+------+----------+------------+
| 1001 |  9891.88 | 1990-03-10 |
| 1002 |  5160.45 | 1990-03-10 |
| 1004 |  1900.10 | 1990-03-10 |
| 1007 |  1098.16 | 1990-03-10 |
+------+----------+------------+

22) Find all customers located in cities where Serres has customers.

Approach: we will use inner join on customers and salespeople table on salespeople number with where condition on salespeople name 'Serres'
Expected Output: All the customers in the city of Serres
Actual Output:
+------+-------+---------+
| cnum | cname | city    |
+------+-------+---------+
| 2003 | Liu   | SanJose |
| 2004 | Grass | Berlin  |
+------+-------+---------+

23) Select all customers with a rating above 200. 

Approach: We will use where condition on rating column of Customers
Expected Output: All the column of customer table with rating greater than 2000
Actual Output:
+------+----------+---------+--------+------+
| CNUM | CNAME    | CITY    | RATING | SNUM |
+------+----------+---------+--------+------+
| 2004 | Grass    | Berlin  |    300 | 1002 |
| 2008 | Cisneros | SanJose |    300 | 1007 |
+------+----------+---------+--------+------+

24) Count the number of salespeople currently having orders in the orders table.

Approach: We will use the count aggregate function on the salespeople number column of inner joined table salespeople, orders table on salespeople
Expected Output: Number of salespeople who have an order 
Actual Output:
+-----------------------+
| no_of_salespeople     |
+-----------------------+
|                     5 |
+-----------------------+

25) Write a query that produces all customers serviced by salespeople with a commission above 12%.Output the customer’s name, salesperson’s name and the salesperson’s rate of commission. 

Approach: We will select the customer name, salespeople name and commission from the inner join of the customer and salespeople table on the salespeople column with the condition on commissions above 12%
Expected Output: Customers names, Salespeople name, and commission who have commission above 12%
Actual Output: 
+----------+--------+------+
| cname    | sname  | comm |
+----------+--------+------+
| Liu      | Serres |   13 |
| Grass    | Serres |   13 |
| Cisneros | Rifkin |   15 |
+----------+--------+------+

26) Find salespeople who have multiple customers. 

Approach: We will count all the customers greater than 1 from an inner joined table from salespeople and customers on salespeople number and grouped by salespeople.
Expected Output: All the details from the salespeople table who has more than 1 customer.
Actual Output:
+------+--------+---------+------+
| SNUM | SNAME  | CITY    | COMM |
+------+--------+---------+------+
| 1001 | Peel   | London  |   12 |
| 1002 | Serres | SanJose |   13 |
+------+--------+---------+------+

27) Find salespeople with customers located in their own cities. 

Approach: We will use inner join on salespeople and customer table on condition on same city and salespeople
Expected Output: name, number, and city of the salespersons and customers who have the same city.
Actual Output:
+------+--------+-----------------+------+---------+----------------+
| snum | sname  | salespeple_city | cnum | cname   | customers_city |
+------+--------+-----------------+------+---------+----------------+
| 1001 | Peel   | London          | 2001 | Hoffman | London         |
| 1002 | Serres | SanJose         | 2003 | Liu     | SanJose        |
| 1001 | Peel   | London          | 2006 | Clemens | London         |
+------+--------+-----------------+------+---------+----------------+

28) Find all salespeople whose name starts with ‘P’ and fourth character is ‘I’. 

Approach: WE will use condition on the salespeople name with wildcard to select name that has 'P' at first position and 'I' at the 4th,
Expected Output: All the details of salespeople who have 'P' at the starting and 'I' at the 4th position.
Actual Output: 
No such salespeople exists
Empty set (0.00 sec)

29) Write a query that uses a subquery to obtain all orders for the customer named ‘Cisneros’. Assume you do not know his customer number.  

Approach: We can use a sub-query to select all the orders where the customer number is from the customer table whose name is "Cisneros"
Expected Output: All the orders which is placed by ‘Cisneros’
Actual Output:
+------+---------+------------+------+------+
| ONUM | AMT     | ODATE      | CNUM | SNUM |
+------+---------+------------+------+------+
| 3001 |   18.69 | 1990-03-10 | 2008 | 1007 |
| 3006 | 1098.16 | 1990-03-10 | 2008 | 1007 |
+------+---------+------------+------+------+

30) Find the largest orders for Serres and Rifkin. 

Approach: We will use the max aggregate function on the amt column of the inner joined table of salespeople and orders which is grouped by salespeople whose names are Serres and Rifkin.
Expected Output: name and number of Serres and Rifkin with largest amount.
Actual Output:
+------+--------+------------+
| snum | sname  | MAX(o.amt) |
+------+--------+------------+
| 1007 | Rifkin |    1098.16 |
| 1002 | Serres |    5160.45 |
+------+--------+------------+

31) Sort the salespeople table in the following order: snum, sname, commission, city.

Approach: We can directly select sum, name, commission, and city from the salespeople table they will get sorted automatically
Expected Output: snum, sname, comm, and city sorted accordingly.
Actual Output:
+------+---------+------+-----------+
| snum | sname   | comm | city      |
+------+---------+------+-----------+
| 1001 | Peel    |   12 | London    |
| 1002 | Serres  |   13 | SanJose   |
| 1003 | AxelRod |   10 | New York  |
| 1004 | Motika  |   11 | London    |
| 1007 | Rifkin  |   15 | Barcelona |
| 1008 | Fran    |   25 | London    |
+------+---------+------+-----------+

32) Select all customers whose names fall in between ‘A’ and ‘G’ alphabetical range. 

Approach: We will use where condition on customer name 
Expected Output: All the details of customers whose names comes between a and g range
Actual Output:
+------+----------+---------+--------+------+
| CNUM | CNAME    | CITY    | RATING | SNUM |
+------+----------+---------+--------+------+
| 2006 | Clemens  | London  |    100 | 1001 |
| 2008 | Cisneros | SanJose |    300 | 1007 |
+------+----------+---------+--------+------+

33) Select all the possible combinations of customers you can assign. 

Approach: We can use join to get all the possible combinations of customers and salespeople
Expected Output: 
SELECT c.cname, c1.cname
FROM customers c
         JOIN customers c1
              ON c.cnum != c1.cnum AND c.snum != c1.snum;
Actual Output:
+----------+----------+
| cname    | cname    |
+----------+----------+
| Cisneros | Hoffman  |
| Pereira  | Hoffman  |
| Clemens  | Hoffman  |
| Grass    | Hoffman  |
| Liu      | Hoffman  |
| Giovanni | Hoffman  |
| Cisneros | Giovanni |
| Pereira  | Giovanni |
| Clemens  | Giovanni |
| Grass    | Giovanni |
| Liu      | Giovanni |
| Hoffman  | Giovanni |
| Cisneros | Liu      |
| Pereira  | Liu      |
| Clemens  | Liu      |
| Grass    | Liu      |
| Giovanni | Liu      |
| Hoffman  | Liu      |
| Cisneros | Grass    |
| Pereira  | Grass    |
| Clemens  | Grass    |
| Liu      | Grass    |
| Giovanni | Grass    |
| Hoffman  | Grass    |
| Cisneros | Clemens  |
| Pereira  | Clemens  |
| Grass    | Clemens  |
| Liu      | Clemens  |
| Giovanni | Clemens  |
| Hoffman  | Clemens  |
| Cisneros | Pereira  |
| Clemens  | Pereira  |
| Grass    | Pereira  |
| Liu      | Pereira  |
| Giovanni | Pereira  |
| Hoffman  | Pereira  |
| Pereira  | Cisneros |
| Clemens  | Cisneros |
| Grass    | Cisneros |
| Liu      | Cisneros |
| Giovanni | Cisneros |
| Hoffman  | Cisneros |
+----------+----------+

34) Select all orders that are greater than the average for October 4. 

Approach: We can use sub-query to get the avg amount on october 4th and filter amount greater than average
Expected Output: All the details of orders where order amt is greater than avg order on october 4th
Actual Output: 
SELECT * FROM orders WHERE amt > (
        SELECT AVG(amt) FROM orders
                    GROUP BY odate  HAVING odate = "1990-04-10"
        );

+------+---------+------------+------+------+
| ONUM | AMT     | ODATE      | CNUM | SNUM |
+------+---------+------------+------+------+
| 3002 | 1900.10 | 1990-03-10 | 2007 | 1004 |
| 3005 | 5160.45 | 1990-03-10 | 2003 | 1002 |
| 3006 | 1098.16 | 1990-03-10 | 2008 | 1007 |
| 3008 | 4723.00 | 1990-05-10 | 2006 | 1001 |
| 3009 | 1713.23 | 1990-04-10 | 2002 | 1003 |
| 3010 | 1309.95 | 1990-06-10 | 2004 | 1002 |
| 3011 | 9891.88 | 1990-06-10 | 2006 | 1001 |
+------+---------+------------+------+------+

35) Write a select command using correlated subquery that selects the names and numbers of all customers with ratings equal to the maximum for their city. 

Approach: We will use correlated sub-query in which select city and maximum rating of customer of each cities
        and retrieve number, name and rating from customsers table on the basis city and rating.
Expected Output: number, name, and rating who as maximum rating in city.
Actual Output:
+------+----------+--------+
| cnum | cname    | rating |
+------+----------+--------+
| 2001 | Hoffman  |    100 |
| 2002 | Giovanni |    200 |
| 2004 | Grass    |    300 |
| 2006 | Clemens  |    100 |
| 2008 | Cisneros |    300 |
+------+----------+--------+   


36) Write a query that totals the orders for each day and places the results in descending order. 

Approach: We will use sum aggregate on amt of orders table and calculates total amt on each day.
Expected Output: Order date and sum of total amount on each day.
Actual Output:
+------------+----------+
| odate      | amount   |
+------------+----------+
| 1990-06-10 | 11201.83 |
| 1990-03-10 |  8945.09 |
| 1990-05-10 |  4723.00 |
| 1990-04-10 |  1788.98 |
+------------+----------+

37) Write a select command that produces the rating followed by the name of each customer in SanJose. 

Approach: We can directly select rating and name of customers and apply condition on city for SanJose
Expected Output: rating and customers name of Liu and Cisneros who are from SanJose city.
Actual Output:
+--------+----------+
| rating | cname    |
+--------+----------+
|    200 | Liu      |
|    300 | Cisneros |
+--------+----------+

38) Find all orders with amounts smaller than any amount for a customer in SanJose. 

Approach: We can use sub-query to determine all the order's amt from city sanJose by inner join in customers
         and orders then use any opeator with condition for lesser amount in order table.
Expected Output: All the orders details which has smaller amount from any one orders from SanJose city
Actual Output:
+------+---------+------------+------+------+
| ONUM | AMT     | ODATE      | CNUM | SNUM |
+------+---------+------------+------+------+
| 3001 |   18.69 | 1990-03-10 | 2008 | 1007 |
| 3002 | 1900.10 | 1990-03-10 | 2007 | 1004 |
| 3003 |  767.69 | 1990-03-10 | 2001 | 1001 |
| 3006 | 1098.16 | 1990-03-10 | 2008 | 1007 |
| 3007 |   75.75 | 1990-04-10 | 2004 | 1002 |
| 3008 | 4723.00 | 1990-05-10 | 2006 | 1001 |
| 3009 | 1713.23 | 1990-04-10 | 2002 | 1003 |
| 3010 | 1309.95 | 1990-06-10 | 2004 | 1002 |
+------+---------+------------+------+------+

39) Find all orders with above average amounts for their customers. 

Approach: We can use subquery the average (aggregate function) amout from orders table 
          then joins the customer and order table on custmer number with where condition amt is greater from subquery
Expected Output: Details of order whose amout is greater than average amount of all order
Actual Output:
+------+---------+------------+------+------+---------+
| ONUM | AMT     | ODATE      | CNUM | SNUM | cname   |
+------+---------+------------+------+------+---------+
| 3005 | 5160.45 | 1990-03-10 | 2003 | 1002 | Liu     |
| 3008 | 4723.00 | 1990-05-10 | 2006 | 1001 | Clemens |
| 3011 | 9891.88 | 1990-06-10 | 2006 | 1001 | Clemens |
+------+---------+------------+------+------+---------+

40) Write a query that selects the highest rating in each city. 

Approach: We can use aggregate function to get maximum rating and can group result by city from customers table
Expected Output: Highest rating and city column from customers table by each city.
Actual Output:
+--------+---------+
| Rating | city    |
+--------+---------+
|    100 | London  |
|    200 | Rome    |
|    300 | SanJose |
|    300 | Berlin  |
+--------+---------+

41) Write a query that calculates the amount of the salesperson’s commission on each order by a customer with a rating above 100.00.

Approach: We will use correlated subquery to inner join the order and customer table columns (customer name and rating with all orders column) on customer numbers,
          inner join the result with salespeople on salespeople number and calculate the commissions using formula (amount*commission)/100 and round it to 2 decimal using aggregate function.
Expected Output: customer name, rating, amt, salespeople name with commission in percentage and the calculated commission of that salespeople
Actual Output:
+----------+--------+------+---------+---------+--------------------+----------------+
| cname    | rating | ONUM | AMT     | sname   | comm_as_percentage | comm_as_amount |
+----------+--------+------+---------+---------+--------------------+----------------+
| Giovanni |    200 | 3009 | 1713.23 | AxelRod |                 10 |         171.32 |
| Liu      |    200 | 3005 | 5160.45 | Serres  |                 13 |         670.86 |
| Grass    |    300 | 3007 |   75.75 | Serres  |                 13 |           9.85 |
| Grass    |    300 | 3010 | 1309.95 | Serres  |                 13 |         170.29 |
| Cisneros |    300 | 3001 |   18.69 | Rifkin  |                 15 |           2.80 |
| Cisneros |    300 | 3006 | 1098.16 | Rifkin  |                 15 |         164.72 |
+----------+--------+------+---------+---------+--------------------+----------------+

42) Count the customers with ratings above SanJose’s average.

Approach: We will use a subquery to find the average rating sanJose city from customer table then use the result to select the customers who has greater rating.
Expected Output: All the details of customers who has greater rating than customer in sanJose city.
Actual Output: 
+------+----------+---------+--------+------+
| CNUM | CNAME    | CITY    | RATING | SNUM |
+------+----------+---------+--------+------+
| 2004 | Grass    | Berlin  |    300 | 1002 |
| 2008 | Cisneros | SanJose |    300 | 1007 |
+------+----------+---------+--------+------+

43) Find all salespeople that are located in either Barcelona or London.

Approach: We can use condition on city of salespeople table and IN operator to choose Barcelona and London city.
Expected Output: Details of salespeople who belongs to either Barcelona or London
Actual Output:
+------+--------+-----------+------+
| SNUM | SNAME  | CITY      | COMM |
+------+--------+-----------+------+
| 1001 | Peel   | London    |   12 |
| 1004 | Motika | London    |   11 |
| 1007 | Rifkin | Barcelona |   15 |
| 1008 | Fran   | London    |   25 |
+------+--------+-----------+------+

44) Find all salespeople with only one customer.

Approach: We can use inner join on customers and salespeople table on salespeople number and
          group the result by salespeople number and apply the condition of having  one salespeople
Expected Output: Salespeople number, name, city, and commission of salespeople who has single customer
Actual Output:
+------+---------+-----------+------+
| SNUM | SNAME   | CITY      | COMM |
+------+---------+-----------+------+
| 1003 | AxelRod | New York  |   10 |
| 1004 | Motika  | London    |   11 |
| 1007 | Rifkin  | Barcelona |   15 |
+------+---------+-----------+------+

45) Write a query that joins the Customer table to itself to find all pairs or customers served by a single salesperson.

Approach: As mentioned in the question we will self join the table on conditions where customers have same salespeople
Expected Output: salespeople number,customer number, customer name, rating and cities who 
Actual Output:
+---------+---------+
| cname   | cname   |
+---------+---------+
| Clemens | Hoffman |
| Grass   | Liu     |
| Liu     | Grass   |
| Hoffman | Clemens |
+---------+---------+

46) Write a query that will give you all orders for more than $1000.00.

Approach: we will use the where clause to select order with amt greater than 10000
Expected Output: All the details of orders having amount greater than 1000
Actual Output:
+------+---------+------------+------+------+
| ONUM | AMT     | ODATE      | CNUM | SNUM |
+------+---------+------------+------+------+
| 3002 | 1900.10 | 1990-03-10 | 2007 | 1004 |
| 3005 | 5160.45 | 1990-03-10 | 2003 | 1002 |
| 3006 | 1098.16 | 1990-03-10 | 2008 | 1007 |
| 3008 | 4723.00 | 1990-05-10 | 2006 | 1001 |
| 3009 | 1713.23 | 1990-04-10 | 2002 | 1003 |
| 3010 | 1309.95 | 1990-06-10 | 2004 | 1002 |
| 3011 | 9891.88 | 1990-06-10 | 2006 | 1001 |
+------+---------+------------+------+------+

47) Write a query that lists each order number followed by the name of the customer who made that order.

Approach: We will use the inner join on table customer and orders on customer numbers.
Expected Output: Order number along with customer name of each order
Actual Output: 
+------+----------+
| onum | cname    |
+------+----------+
| 3003 | Hoffman  |
| 3009 | Giovanni |
| 3005 | Liu      |
| 3007 | Grass    |
| 3010 | Grass    |
| 3008 | Clemens  |
| 3011 | Clemens  |
| 3002 | Pereira  |
| 3001 | Cisneros |
| 3006 | Cisneros |
+------+----------+

48) Write a query that selects all the customers whose ratings are equal to or greater than ANY(in the SQL sense) of ‘Serres’.

Approach: We will use subquery to get the rating of serres
          using inner on customers and salespeople and filter the rating from customers table using any and >=.
Expected Output: All the columns from customer table who has greater rating than Serres.
Actual Output:
+------+----------+---------+--------+------+
| CNUM | CNAME    | CITY    | RATING | SNUM |
+------+----------+---------+--------+------+
| 2002 | Giovanni | Rome    |    200 | 1003 |
| 2003 | Liu      | SanJose |    200 | 1002 |
| 2004 | Grass    | Berlin  |    300 | 1002 |
| 2008 | Cisneros | SanJose |    300 | 1007 |
+------+----------+---------+--------+------+
49) Write two queries that will produce all orders taken on October 3 or October 4.

Approach: We will use IN (mention 3 and 4 October formatted) opeator to filter out the dates.
Expected: All 7 orders from 3rd and 4th of October.
Actual Output:
+------+---------+------------+------+------+
| ONUM | AMT     | ODATE      | CNUM | SNUM |
+------+---------+------------+------+------+
| 3001 |   18.69 | 1990-03-10 | 2008 | 1007 |
| 3002 | 1900.10 | 1990-03-10 | 2007 | 1004 |
| 3003 |  767.69 | 1990-03-10 | 2001 | 1001 |
| 3005 | 5160.45 | 1990-03-10 | 2003 | 1002 |
| 3006 | 1098.16 | 1990-03-10 | 2008 | 1007 |
+------+---------+------------+------+------+


50) Find only those customers whose ratings are higher than every customer in Rome.

Approach: We will use a subquery to find the rating of customers in Rome and compare that rating with other customers' ratings.
Expected Output: All the columns of the customer table who has a greater rating customer in "Rome" i.e. Grass and Cisneros
Actual Output:
+------+----------+---------+--------+------+
| CNUM | CNAME    | CITY    | RATING | SNUM |
+------+----------+---------+--------+------+
| 2004 | Grass    | Berlin  |    300 | 1002 |
| 2008 | Cisneros | SanJose |    300 | 1007 |
+------+----------+---------+--------+------+


51) Write a query on the Customers table whose output will exclude all customers with a rating &lt;= 100.00, unless they are located in Rome.


Approach:  We can directly select all the columns from the customer's table with conditions i.e rating is not 100 or the city is like Rome.
Expected Output: All the customers from Rome and customers who do have not 100 ratings.
Actual Output:
+------+----------+---------+--------+------+
| CNUM | CNAME    | CITY    | RATING | SNUM |
+------+----------+---------+--------+------+
| 2002 | Giovanni | Rome    |    200 | 1003 |
| 2003 | Liu      | SanJose |    200 | 1002 |
| 2004 | Grass    | Berlin  |    300 | 1002 |
| 2007 | Pereira  | Rome    |    100 | 1004 |
| 2008 | Cisneros | SanJose |    300 | 1007 |
+------+----------+---------+--------+------+

52) Find all rows from the customer’s table for which the salesperson number is 1001.

Approach: We can select all the customers with where clause for sum equals 1001.
Expected Output: All the columns from customers whose salespeople number is 1000 i.e Hoffman and Clemens
Actual Output:
+------+---------+--------+--------+------+
| CNUM | CNAME   | CITY   | RATING | SNUM |
+------+---------+--------+--------+------+
| 2001 | Hoffman | London |    100 | 1001 |
| 2006 | Clemens | London |    100 | 1001 |
+------+---------+--------+--------+------+

53) Find the total amount in orders for each salesperson where their total of amounts are greater than
the amount of the largest order in the table.
Approach: We will calculate the total sales amount of each salesperson (sum aggregate function) by applying
          inner join on orders and salespeople table on salespeople number and group by the result by salespeople number
          then compare with the maximum amount from the orders table (using subquery and max aggregate function).
Expected Output: order number, salespeople name, order date, and amount of peel he has more total sales than maximum in the complete order table
Actual Output:
------+-------+------------+----------+
| onum | sname | odate      | amount   |
+------+-------+------------+----------+
| 3003 | Peel  | 1990-03-10 | 15382.57 |
+------+-------+------------+----------+

54) Write a query that selects all orders save those with zeroes or NULL in the amount file.

Approach: We will select all columns from the orders table and apply the condition in where clause for the amount being 0 or null.
Expected Output: Empty Set because the orders table has no entry with 0 or null as the amount
Actual Output: 
Empty set (0.00 sec)

55) Produce all combinations of salespeople and customer names such that the former precedes the latter alphabetically, and the latter has a rating of less than 200.

Approach: We will use the inner join on customer and salespeople to get both salespeople and customer names together for comparison
          and apply the condition of rating less than 200.
Expected Output: Motika and Pereira satisfy the condition so there both of their name along with rating.
Actual Output:
+--------+---------+--------+
| sname  | cname   | rating |
+--------+---------+--------+
| Motika | Pereira |    100 |
+--------+---------+--------+

56) Find all salespeople name and commission.

Approach: we will select the salespeople's names and commissions from the salespeople table.
Expected Output: sname and comm column from salespeople table.
Actual Output:
+---------+------+
| sname   | comm |
+---------+------+
| Peel    |   12 |
| Serres  |   13 |
| AxelRod |   10 |
| Motika  |   11 |
| Rifkin  |   15 |
| Fran    |   25 |
+---------+------+

57) Write a query that produces the names and cities of all customers with the same rating as Hoffman. Write the query using Hoffman’s cnum rather than his rating, so that it would still be usable if his rating is changed.

Approach: We will use subqueries to get the rating of Hoffman and then match it with the other customers' ratings.
Expected Output: customer name and city whose rating same as Hoffman i.e. Clemens and Pereira.
Actual Output:
+---------+--------+
| cname   | city   |
+---------+--------+
| Clemens | London |
| Pereira | Rome   |
+---------+--------+

58) Find all salespeople for whom there are customers that follow them in alphabetical order.

Approach: WE will use the inner joins on salespeople and customers on salespeople number to get salespeople and customers name together
          then compares thems i.e. the salesperson's name is less than the customer's name.
Expected Output: All the details of the salespeople whose satisfy the condition of alphabetical order i.e. AxelRod and Motika.
Actual Output:
+------+---------+----------+------+
| SNUM | SNAME   | CITY     | COMM |
+------+---------+----------+------+
| 1003 | AxelRod | New York |   10 |
| 1004 | Motika  | London   |   11 |
+------+---------+----------+------+

59) Write a query that produces the names and ratings of all customers who have average orders.

Approach: We will use inner join on the customer and orders table to get the amount and customer together 
          then compares the amount to the average amt from orders and groups the result according to a customer number.
Expected Output: cname and rating of both Liu and Clemens.
Actual Output:
+---------+--------+
| cname   | rating |
+---------+--------+
| Liu     |    200 |
| Clemens |    100 |
+---------+--------+


60) Find the SUM of all Amounts from the orders table.

Approach: We will use aggregate function sum on the orders table.
Expected Output: Total amt from the order table.
Actual Output:
+----------+
| SUM(amt) |
+----------+
| 26658.90 |
+----------+


61) Write a SELECT command that produces the order number, amount, and the date from rows in the order table.

Approach: We can select order number, amount and order date from orders table to get desired output.
Expected Output: onum, amt, and odate columns from order table with all the tuples.
Actual Output:
+------+---------+------------+
| onum | amt     | odate      |
+------+---------+------------+
| 3001 |   18.69 | 1990-03-10 |
| 3002 | 1900.10 | 1990-03-10 |
| 3003 |  767.69 | 1990-03-10 |
| 3005 | 5160.45 | 1990-03-10 |
| 3006 | 1098.16 | 1990-03-10 |
| 3007 |   75.75 | 1990-04-10 |
| 3008 | 4723.00 | 1990-05-10 |
| 3009 | 1713.23 | 1990-04-10 |
| 3010 | 1309.95 | 1990-06-10 |
| 3011 | 9891.88 | 1990-06-10 |
+------+---------+------------+

62) Count the number of non NULL rating fields in the Customers table (including repeats).

Approach: We will use aggregate function count to count the customer number of customer table and apply condition in where clause of not null.
Expected Output: Number of not null rating customers i.e. 7
Actual Output:
+-------------+
| COUNT(cnum) |
+-------------+
|           7 |
+-------------+

63) Write a query that gives the names of both the salesperson and the customer for each order after the order number.

Approach: We will use inner join on all three table salespeople, customers, and, orders to get 
          order number, salespeople, and customer name together on salespeople number and customer number according.
Expected Output: All the order number and their respective salespeople and customer.
Actual Output:
+------+---------+----------+
| onum | sname   | cname    |
+------+---------+----------+
| 3003 | Peel    | Hoffman  |
| 3009 | AxelRod | Giovanni |
| 3005 | Serres  | Liu      |
| 3007 | Serres  | Grass    |
| 3010 | Serres  | Grass    |
| 3008 | Peel    | Clemens  |
| 3011 | Peel    | Clemens  |
| 3002 | Motika  | Pereira  |
| 3001 | Rifkin  | Cisneros |
| 3006 | Rifkin  | Cisneros |
+------+---------+----------+

64) List the commissions of all salespeople servicing customers in London.

Approach: We will use inner join on salespeople and customers table to get the customer city and salespeople details together and 
          then apply the condition of the city is London and will use DISTINCT to avoid duplicates.
Expected Output: Name and commission of Peel because he is the one who satisfies the condition.
Actual Output:
+-------+------+
| sname | comm |
+-------+------+
| Peel  |   12 |
+-------+------+

65) Write a query using ANY or ALL that will find all salespeople who have no customers located in their city.

Approach: We will use the subquery to get the cities of each customer and then use "!=" and ALL operators to compare with salespeople city
Expected Output: All the salespeople's number, names, city, and comm  which are not located on same city i.e. AxelRod, Motika, Rifkin, and Fran
Actual Output:
+------+---------+-----------+------+
| SNUM | SNAME   | CITY      | COMM |
+------+---------+-----------+------+
| 1003 | AxelRod | New York  |   10 |
| 1004 | Motika  | London    |   11 |
| 1007 | Rifkin  | Barcelona |   15 |
| 1008 | Fran    | London    |   25 |
+------+---------+-----------+------+                   

66) Write a query using the EXISTS operator that selects all salespeople with customers located in their cities who are not assigned to them.

Approach: We will use a subquery to get salespeople numbers from customer and salespeople table where they have same city but different salespeople
          then use exists operator on results to get salespeople.
Expected Output: sum, sname, city, and comm from the salespeople table which has the same city but a different customer. i.e Serres, Motika, and Fran.
Actual Output:
+------+--------+---------+------+
| SNUM | SNAME  | CITY    | COMM |
+------+--------+---------+------+
| 1002 | Serres | SanJose |   13 |
| 1004 | Motika | London  |   11 |
| 1008 | Fran   | London  |   25 |
+------+--------+---------+------+

67) Write a query that selects all customers serviced by Peel or Motika.
(Hint: The snum field relates the 2 tables to one another.)
Approach: We will use inner join on salespeople and customer table to get the salespeople number and customer details together and 
          then apply the condition of salespeople name is Peel or Motika using IN operator.
Expected Output: cnum, cname, city and rating with snum of each customers who as been served by Peel and Motika
Actual Output:
+------+---------+--------+--------+------+
| CNUM | CNAME   | CITY   | RATING | SNUM |
+------+---------+--------+--------+------+
| 2001 | Hoffman | London |    100 | 1001 |
| 2006 | Clemens | London |    100 | 1001 |
| 2007 | Pereira | Rome   |    100 | 1004 |
+------+---------+--------+--------+------+

68) Count the number of salespeople registering orders for each day.
(If a salesperson has more than one order on a given day, he or she should be counted only once.)
Approach: We will use the count aggregate function with DISTINCT to count the salespeople number from the orders table and group by the result using order date.
Expected Output: odate and orders on each day i.e 4,2,1,2 according in ascending order.
Actual Output:
+------------+--------+
| odate      | orders |
+------------+--------+
| 1990-03-10 |      4 |
| 1990-04-10 |      2 |
| 1990-05-10 |      1 |
| 1990-06-10 |      2 |
+------------+--------+

69) Find all orders attributed to salespeople who live in London.
Approach: We will use inner join on salespeople and orders table on salespeople number and apply condition in where clause where city is London.
Expected Output: All the columns from orders table where then salespeople city is London. i.e. 3003, 3008, 3011, and 3002 order number.
Actual Output:
+------+---------+------------+------+------+
| ONUM | AMT     | ODATE      | CNUM | SNUM |
+------+---------+------------+------+------+
| 3003 |  767.69 | 1990-03-10 | 2001 | 1001 |
| 3008 | 4723.00 | 1990-05-10 | 2006 | 1001 |
| 3011 | 9891.88 | 1990-06-10 | 2006 | 1001 |
| 3002 | 1900.10 | 1990-03-10 | 2007 | 1004 |
+------+---------+------------+------+------+

70) Find all orders by customers not located in the same cities as their salespeople.

Approach: We will use inner to on all three tables orders, customers, and salespeople on customer and salespeople number where city of customer is not same as salespeople.
Expected Output: All the columns from the customer table where salespeople and customers' city are not the same i.e.  total  6 tuples.
Actual Output:
+------+---------+------------+------+------+
| ONUM | AMT     | ODATE      | CNUM | SNUM |
+------+---------+------------+------+------+
| 3009 | 1713.23 | 1990-04-10 | 2002 | 1003 |
| 3007 |   75.75 | 1990-04-10 | 2004 | 1002 |
| 3010 | 1309.95 | 1990-06-10 | 2004 | 1002 |
| 3002 | 1900.10 | 1990-03-10 | 2007 | 1004 |
| 3001 |   18.69 | 1990-03-10 | 2008 | 1007 |
| 3006 | 1098.16 | 1990-03-10 | 2008 | 1007 |
+------+---------+------------+------+------+


71) Find all salespeople who have customers with more than one current order.

Approach: We will use subquery to get the salespeople number from orders table and group it by salespeople number and count of salespeople number is greater than 1
          then get all the salespeople from the salespeople table where the snum exists in subquery result.
Expected Output: All the columns from the salespeople table with Peel, Serres and Rifkin data.
Actual Output:
+------+--------+-----------+------+
| SNUM | SNAME  | CITY      | COMM |
+------+--------+-----------+------+
| 1001 | Peel   | London    |   12 |
| 1002 | Serres | SanJose   |   13 |
| 1007 | Rifkin | Barcelona |   15 |
+------+--------+-----------+------+

72) Write a query that extracts from the customer’s table every customer assigned to a salesperson, who is currently having at least one another customer(besides the customer being selected) with orders in the Orders Table.

Approach: We will use subquery to get salespeople number from customer and group the result by salespeople number where the count of salespeople number is greater than 1
        then get all the customer who has salespeople number in subquery result.
Expected Output: All the column from customer table who has more than single salespeople i.e Hoffman, Liu, Grass, and Clemens.
Actual Output:
+------+---------+---------+--------+------+
| CNUM | CNAME   | CITY    | RATING | SNUM |
+------+---------+---------+--------+------+
| 2001 | Hoffman | London  |    100 | 1001 |
| 2003 | Liu     | SanJose |    200 | 1002 |
| 2004 | Grass   | Berlin  |    300 | 1002 |
| 2006 | Clemens | London  |    100 | 1001 |
+------+---------+---------+--------+------+

73) Write a query on the customer’s table that will find the highest rating in each city.
Put the output in this form: for the city (city), the highest rating is (rating).

Approach : We will use aggregate function max to get the max rating and group it with city to get each highest rating in each city.
Expected Output: All the four cities with their higher rating from customer table.
Actual Output: 
+---------+-------------+
| city    | MAX(rating) |
+---------+-------------+
| London  |         100 |
| Rome    |         200 |
| SanJose |         300 |
| Berlin  |         300 |
+---------+-------------+

74) Write a query that will produce the snum values of all salespeople with orders, having amt greater than 1000 in the Orders Table(without repeats).

Approach: We will use the DISTINCT operator to select all the unique salespeople’s and where condition of amount greater than 1000 and group the result by salespeople number
Expected Output: snum, onum and amt from orders table which has more than 1000 int amt column.
Actual Output:
+------+------+---------+
| snum | onum | amt     |
+------+------+---------+
| 1001 | 3008 | 4723.00 |
| 1002 | 3005 | 5160.45 |
| 1003 | 3009 | 1713.23 |
| 1004 | 3002 | 1900.10 |
| 1007 | 3006 | 1098.16 |
+------+------+---------+

75) Write a query that lists customers in a descending order of rating.
Output the rating field first, followed by the customer’s names and numbers.
Approach: We will select rating, customer name, customer number from cusotmer table and order the result by rating column in descending.
Expected Output: rating, cname, and cnum columns from the customers table in descending order by rating. i.e. 300 > 200 > 100
Actual Output:
+--------+----------+------+
| rating | cname    | cnum |
+--------+----------+------+
|    300 | Grass    | 2004 |
|    300 | Cisneros | 2008 |
|    200 | Giovanni | 2002 |
|    200 | Liu      | 2003 |
|    100 | Hoffman  | 2001 |
|    100 | Clemens  | 2006 |
|    100 | Pereira  | 2007 |
+--------+----------+------+

76) Find the average commission for salespeople in London.

Approach:  We will use avg aggregate function on commission and group the result by city where city is London
Expected Output: london city and average commission in london city. i.e 16
Actual Output:
+--------+-----------+
| city   | AVG(comm) |
+--------+-----------+
| London |   16.0000 |
+--------+-----------+

77) Find all orders credited to the same salesperson who services Hoffman.(cnum 2001).

Approach: We will use subquery to get the salespeople of Hoffman and then filter the orders according to the salespeople
Expected Output: All the columns of orders table and tuples having salesperson number as 1001 i.e. order number 3003, 3008, and 3011.
Actual Output:
+------+---------+------------+------+------+
| ONUM | AMT     | ODATE      | CNUM | SNUM |
+------+---------+------------+------+------+
| 3003 |  767.69 | 1990-03-10 | 2001 | 1001 |
| 3008 | 4723.00 | 1990-05-10 | 2006 | 1001 |
| 3011 | 9891.88 | 1990-06-10 | 2006 | 1001 |
+------+---------+------------+------+------+

78) Find all salespeople whose commission is in between 0.10 and 0.12(both inclusive).

Approach: We will apply the between condition with where clause on comm column of salespeople
Expected Output: There is no salespeople whose commission is between 0.10 and 0.12 so empty set
Actual Output:
Empty set (0.00 sec)

79) Write a query that will give you the names and cities of all salespeople in London with a commission above 0.10.

Approach: We will select the name and city from salespeople table and apply condition in where clause for city is London and commission having greater than 0.10
Expected Output: sname and city from customers where city is london and commission is greater than 0.10 i.e. Peel, Motika, Fran
Actual Output:
+--------+--------+
| sname  | city   |
+--------+--------+
| Peel   | London |
| Motika | London |
| Fran   | London |
+--------+--------+

80) Write a query that selects each customer’s smallest order.

Approach: We will use inner join on the customer table and orders table on the customer number and calculate the minimum amount using aggregate function and group the result by customer number
Expected Output: cname and minimum amt order placed by each customer
Actual Output:
+----------+----------+
| cname    | MIN(amt) |
+----------+----------+
| Hoffman  |   767.69 |
| Giovanni |  1713.23 |
| Liu      |  5160.45 |
| Grass    |    75.75 |
| Clemens  |  4723.00 |
| Pereira  |  1900.10 |
| Cisneros |    18.69 |
+----------+----------+


81) Write a query that selects the first customer in alphabetical order whose name begins with ‘G’.

Approach: We will use wild card operator like to get the customer whose name starts with G and use order by customer name and limit the result to 1.
Expected Output: First customer whose name start with g character i.e. Giovanni
Actual Output:
+------+----------+------+--------+------+
| CNUM | CNAME    | CITY | RATING | SNUM |
+------+----------+------+--------+------+
| 2002 | Giovanni | Rome |    200 | 1003 |
+------+----------+------+--------+------+

82) Write a query that counts the number of different non NULL city values in the customers table.

Approach: We will use count aggregate function on city from customer table and condition for null in where clause.
Expected Output: Total 4 are such in cusotmer table so Unique_Cities are 4.
Actual Output:
+---------------+
| Unique_Cities |
+---------------+
|             4 |
+---------------+

83) Find the average amount from the Orders Table.

Approach: We will use avg aggregate function on the amount column of the orders table to get avg amount from the orders table.
Expected Output: avg_amt from orders table which sum of all the orders amt divided by total number of orders. i.e. 2665.89000
Actual Output:
+-------------+
| avg_amt     |
+-------------+
| 2665.890000 |
+-------------+

84) Find all customers who are not located in SanJose and whose rating is above 200.

Approach: We will select all the columns of the customers table and apply the condition in where the clause for the city is SanJose and the rating is greater than 200.
Expected Output: All the details of the customer named Grass. i.e. All the condition are matched with him.
Actual Output:
+------+-------+--------+--------+------+
| CNUM | CNAME | CITY   | RATING | SNUM |
+------+-------+--------+--------+------+
| 2004 | Grass | Berlin |    300 | 1002 |
+------+-------+--------+--------+------+

85) Give a simpler way to write this query.SELECT snum, sname, city, comm FROM salespeople WHERE (comm > + 0.12 OR comm &lt; 0.14);

Approach: We can replace column names with * or ALL to get a similar result.
Expected Output: all the column of the salespeople table containing all the tuples. 
Actual Output:
+------+---------+-----------+------+
| SNUM | SNAME   | CITY      | COMM |
+------+---------+-----------+------+
| 1001 | Peel    | London    |   12 |
| 1002 | Serres  | SanJose   |   13 |
| 1003 | AxelRod | New York  |   10 |
| 1004 | Motika  | London    |   11 |
| 1007 | Rifkin  | Barcelona |   15 |
| 1008 | Fran    | London    |   25 |
+------+---------+-----------+------+

86) Which salespersons attend to customers not in the city they have been assigned to ?
Approach: We will inner join the customers and salespeople table on salespeople number and apply the condition in the where clause for cities not same for customer and salespeople
Expected Output: All the column from customer table where the cities do not match with their customer customers i.e. AxelRod, Serres, Motika, and Rifkin
Actual Output:
+------+---------+-----------+------+
| SNUM | SNAME   | CITY      | COMM |
+------+---------+-----------+------+
| 1003 | AxelRod | New York  |   10 |
| 1002 | Serres  | SanJose   |   13 |
| 1004 | Motika  | London    |   11 |
| 1007 | Rifkin  | Barcelona |   15 |
+------+---------+-----------+------+

87) Which salespeople get commission greater than 0.11 are serving customers rated less than 250?

Approach: We will join the salespeople and customers on the salespeople number and apply the condition in where clause for commission greater than 0.11 and rating less than 250 and group the result with 
Expected Output: sname,cname and customer_rating of salespeople who satisfies the condition i.e. Peel, Serres, AxelRod and Motika.
Actual Output:
+---------+----------+-----------------+
| sname   | cname    | customer_rating |
+---------+----------+-----------------+
| Peel    | Hoffman  |             100 |
| Serres  | Liu      |             200 |
| AxelRod | Giovanni |             200 |
| Motika  | Pereira  |             100 |
+---------+----------+-----------------+

88) Which salespeople have been assigned to the same city but get different commission percentages?

Approach: We can use self join on salespeople table on different salespeople and commission but different same city.
Expected Output: All the salespeople from same city but different commission percentages. i.e. Fran, Motika, and Peel.
Actual Output:
+------+--------+--------+------+
| SNUM | SNAME  | CITY   | COMM |
+------+--------+--------+------+
| 1008 | Fran   | London |   25 |
| 1004 | Motika | London |   11 |
| 1001 | Peel   | London |   12 |
+------+--------+--------+------+

89) Which salesperson has earned the maximum commission?

Approach: We can use subquery to get the maximum commission from salespeople table and match that commission in salespeople table.
Expected Output: salespeople how as maximum commission in salespeople table. i.e Fran
Actual Output: 
+------+-------+--------+------+
| SNUM | SNAME | CITY   | COMM |
+------+-------+--------+------+
| 1008 | Fran  | London |   25 |
+------+-------+--------+------+

90) Does the customer who has placed the maximum number of orders have the maximum rating?

Approach: We can count the maximum rating for each customer from the or ders table using the aggregate function in a subquery
          then match the same count from the inner joined table of customers and the orders table on the customer number.
  Expected Output: cnum, rating, cnum, and orders count columns should be there and 
                   The maximum number of orders are 2 so and the ratings of customers who have placed maximum orders are 100 and 300 so the customer's number are 2004, 2006, and 2008
Actual Output:
+------+--------+------+--------------+
| cnum | rating | onum | orders_count |
+------+--------+------+--------------+
| 2004 |    300 | 3007 |            2 |
| 2006 |    100 | 3008 |            2 |
| 2008 |    300 | 3001 |            2 |
+------+--------+------+--------------+

91) List all customers in descending order of customer rating.

Approach: We will select all the columns of the customers and use order by clause on rating in descending order.
Expected Output: All the columns from the customers table are in descending order by rating.
Actual Output:
+------+----------+---------+--------+------+
| CNUM | CNAME    | CITY    | RATING | SNUM |
+------+----------+---------+--------+------+
| 2004 | Grass    | Berlin  |    300 | 1002 |
| 2008 | Cisneros | SanJose |    300 | 1007 |
| 2002 | Giovanni | Rome    |    200 | 1003 |
| 2003 | Liu      | SanJose |    200 | 1002 |
| 2001 | Hoffman  | London  |    100 | 1001 |
| 2006 | Clemens  | London  |    100 | 1001 |
| 2007 | Pereira  | Rome    |    100 | 1004 |
+------+----------+---------+--------+------+

92) On which days has Hoffman placed orders?

Approach: We will use DAYNAME to determine the day on order date from the orders table and filter the Hoffman
Expected Output: order number and day of order placed by Hoffman.
Actual Output:
+------+----------------+
| onum | DAYNAME(odate) |
+------+----------------+
| 3003 | Saturday       |
+------+----------------+

93) Which salesmen have no orders between 10/03/1990 and 10/05/1990?

Approach: We will join salespeople and orders on the salespeople number to get the salespeople and orders together
          and then apply the condition on order date to filter the salespeople who have not palced order between the given dates.
Expected Output: snum, sname, and odate form salespeople and orders
                 Serres and Peel has no order on dates between 3rd October to 5th October.
Actual Output:
+------+--------+------------+
| snum | sname  | odate      |
+------+--------+------------+
| 1002 | Serres | 1990-06-10 |
| 1001 | Peel   | 1990-06-10 |
+------+--------+------------+

94) How many salespersons have succeeded in getting orders?

Approach: We will use the count aggregate function with distinct on the sum of orders table to get all the salespeople to succeed in placing orders.
Expected Output: number of salespeople who succeeded in getting order i.e 5.
Actual Output:
+------------------+
| succeeded_orders |
+------------------+
|                5 |
+------------------+

95) How many customers have placed orders?
Approach: We will use count aggregate function with distinct on cnum from orders table.
Expected Output: all the customers who have placed order i.e 7 customers who have placed order.
Actual Output:
+----------------+
| no_of_customer |
+----------------+
|              7 |
+----------------+

96) On which date has each salesman booked an order of maximum value ?

Approach: We will use  correlated subqueries to join the order table with a custom orders table having columns snum, maximum amount(max aggregate function) grouped by snum on
          salespeople number and amount of both the tables to get the maxinum order each salesperson and
          join this table with salespeople to get the salespeople's people and maximum order together.
Expected Output: sname, amt, snum, and odate from salespeople and orders to get maximum order placed by each salespeople on dates.
Actual Output:
+---------+---------+------+------------+
| sname   | amt     | snum | odate      |
+---------+---------+------+------------+
| Peel    | 9891.88 | 1001 | 1990-06-10 |
| Serres  | 5160.45 | 1002 | 1990-03-10 |
| AxelRod | 1713.23 | 1003 | 1990-04-10 |
| Motika  | 1900.10 | 1004 | 1990-03-10 |
| Rifkin  | 1098.16 | 1007 | 1990-03-10 |
+---------+---------+------+------------+              

97) Who is the most successful salesperson?

Approach: We can determine the most successful salesperson who has placed the maximum amount of order placed.
          We will inner join salespeople and orders table on salespeople number and sum the maximum sales (using aggregate function sum) by salespeople and arrange result in descending order of total amount.
Expected Output: The number and name and order amount of each salesperson.
Actual Output:
+-------+------+------------+
| sname | snum | orders_amt |
+-------+------+------------+
| Peel  | 1001 |   15382.57 |
+-------+------+------------+

98) Which customers have the same rating?

Approach: We will use the self-join on table customers with the same rating and different customer number and select the distinct customer number, names and ratings. 
Expected Output: Customer who have same rating ie. 10 combinations present.
Actual Output:
+------+----------+------+----------+--------+
| cnum | cname    | cnum | cname    | rating |
+------+----------+------+----------+--------+
| 2007 | Pereira  | 2001 | Hoffman  |    100 |
| 2006 | Clemens  | 2001 | Hoffman  |    100 |
| 2003 | Liu      | 2002 | Giovanni |    200 |
| 2002 | Giovanni | 2003 | Liu      |    200 |
| 2008 | Cisneros | 2004 | Grass    |    300 |
| 2007 | Pereira  | 2006 | Clemens  |    100 |
| 2001 | Hoffman  | 2006 | Clemens  |    100 |
| 2006 | Clemens  | 2007 | Pereira  |    100 |
| 2001 | Hoffman  | 2007 | Pereira  |    100 |
| 2004 | Grass    | 2008 | Cisneros |    300 |
+------+----------+------+----------+--------+

99) Find all orders greater than the average for October 4th.

Approach: We will use a subquery to get the average order on 4th October and then compares it with other tuples of orders table.
Expected Output: The the columns of order table with tuples that have more amt than the average amount on October 4th. i.e. 3002, 3005, 3006, 3008, 3009, 3010, and 3011
Actual Output:
+------+---------+------------+------+------+
| ONUM | AMT     | ODATE      | CNUM | SNUM |
+------+---------+------------+------+------+
| 3002 | 1900.10 | 1990-03-10 | 2007 | 1004 |
| 3005 | 5160.45 | 1990-03-10 | 2003 | 1002 |
| 3006 | 1098.16 | 1990-03-10 | 2008 | 1007 |
| 3008 | 4723.00 | 1990-05-10 | 2006 | 1001 |
| 3009 | 1713.23 | 1990-04-10 | 2002 | 1003 |
| 3010 | 1309.95 | 1990-06-10 | 2004 | 1002 |
| 3011 | 9891.88 | 1990-06-10 | 2006 | 1001 |
+------+---------+------------+------+------+     
        
100) List all customers with ratings above Grass’s average.

Approach: We can use a subquery to get the average rating of the customer named grass then compares it with other customers' ratings if greater then include it in the result.
Expected Output: As there is no such customer in the customer table so an empty set.
Actual Output:
Empty set (0.00 sec)

101) Which customers have above average orders?

Approach: We will use a subquery to get the average order from the orders table using the aggregate function and then apply the condition of ALL and greater than to filter the result from 
          customer and order table inner joined on customer number.
Expected Output: All the column of customers table and tuples who has more order amt than average i.e Liu, Clemens.
Actual Output: 
+------+---------+---------+--------+------+
| CNUM | CNAME   | CITY    | RATING | SNUM |
+------+---------+---------+--------+------+
| 2003 | Liu     | SanJose |    200 | 1002 |
| 2006 | Clemens | London  |    100 | 1001 |
+------+---------+---------+--------+------+

102) Select the total amount in orders for each salesperson for which the total is greater than the amount of the largest order in the table.
Approach: We can calculate the total amt of each salesperson using inner join on salespeople number group by the result by salespeople number
        and filter the tuples by amt greater than maximum amount from orders table (calculated using subquery and aggregate function).
Expected Output: Peel is only one who has amt greater than largest order in order table.
Actual Output:
+-------+----------+
| sname | amt      |
+-------+----------+
| Peel  | 15382.57 |
+-------+----------+

103) Give names and numbers of all salespersons that have more than one customer?

Approach: We will use subquery to get the salespeople number from customer who has more than one customer by group by salespeople number.
         Then select the name and number of the basis of salespeople number from subquery.
Expected Output: sname and sum of all the salespeople who has more than one customer i.e. Peel and Serres
Actual Output:
+--------+------+
| sname  | snum |
+--------+------+
| Peel   | 1001 |
| Serres | 1002 |
+--------+------+

104) Select all salespeople by name and number who have customers in their city whom they don’t service.

Approach: We can select name and number of salespeople from inner join on salespeople and cusotmer on not having same salespeople’s number but same city.
Expected Output: sname and snum from salespeople where salespeople city matches to customer.
Actual Output:
+--------+------+
| sname  | snum |
+--------+------+
| Fran   | 1008 |
| Motika | 1004 |
| Serres | 1002 |
+--------+------+

105) Does the total amount in orders by customer in Rome and London, exceed the commission paid to salesperson in London, and New York by more than 5 times?

Approach: We will use subquery to get the customer number city Rome and London then sum amount of only those orders where the customer number matches.
          Similarly for London and New York calculate the commission and multiply it by 5. Select the amount from both group of cities.
Expected Output: Yes, we can see the total of both groups of cities. i.e amt_in_rome_london comm_in_london_newyork.
Actual Output:
+---------------------------------+----------------------------+
| total_amount_by_cust_in_ROM_LON | total_comm_by_sp_in_LON_NY |
+---------------------------------+----------------------------+
|                        18995.90 |               11131.212000 |
+---------------------------------+----------------------------+

106) Which are the date,order number, amt and city for each salesperson (by name) for the maximum order he has obtained?

Approach: We will select date,order number, amt and city from inner joined salespeople and orders table on salespeople number and apply the condition for maximum amt by each salespeople using group by.
Expected Output: odate, onum, amt, city, and sname from order and salespeople table where the salespeople has maximum order amount.
Actual Output:
+------------+------+---------+-----------+---------+
| odate      | onum | amt     | city      | sname   |
+------------+------+---------+-----------+---------+
| 1990-04-10 | 3009 | 1713.23 | New York  | AxelRod |
| 1990-03-10 | 3002 | 1900.10 | London    | Motika  |
| 1990-06-10 | 3011 | 9891.88 | London    | Peel    |
| 1990-03-10 | 3006 | 1098.16 | Barcelona | Rifkin  |
| 1990-03-10 | 3005 | 5160.45 | SanJose   | Serres  |
+------------+------+---------+-----------+---------+

107) Which salesperson is having lowest commission?
Approach: We will select salespeople number, name, and commission and use order by clause and limit on commission column of the salespeople table.
Expected Output: snum, sname, and comm column from salespeople and tuples with minimum commission.
Actual Output:
+------+---------+------+
| snum | sname   | comm |
+------+---------+------+
| 1003 | AxelRod |   10 |
+------+---------+------+
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
