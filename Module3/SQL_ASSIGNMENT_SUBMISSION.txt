1.List all the columns of the Salespeople table. 

mysql> DESC SALESPEOPLE;
+-------+--------------+------+-----+---------+-------+
| Field | Type         | Null | Key | Default | Extra |
+-------+--------------+------+-----+---------+-------+
| SNUM  | int(11)      | YES  |     | NULL    |       |
| SNAME | varchar(100) | YES  |     | NULL    |       |
| CITY  | varchar(100) | YES  |     | NULL    |       |
| COMM  | int(11)      | YES  |     | NULL    |       |
+-------+--------------+------+-----+---------+-------+
4 rows in set (0.02 sec)


2. List all customers with a rating of 100. 
mysql> SELECT * FROM CUSTOMERS WHERE RATING = 100;
+------+---------+--------+--------+------+
| CNUM | CNAME   | CITY   | RATING | SNUM |
+------+---------+--------+--------+------+
| 2001 | Hoffman | London |    100 | 1001 |
| 2006 | Ciemens | London |    100 | 1001 |
| 2007 | Pereira | Rome   |    100 | 1004 |
+------+---------+--------+--------+------+
3 rows in set (0.00 sec)

3. Find the largest order taken by each salesperson on each date. 

mysql> SELECT SALESPEOPLE.SNUM, SALESPEOPLE.SNAME, MAX(ORDERS.AMT) AS AMOUNT,ORDERS.ODATE  FROM SAL
ESPEOPLE INNER JOIN ORDERS ON ORDERS.SNUM=SALESPEOPLE.SNUM GROUP BY ORDERS.ODATE,SALESPEOPLE.SNAME;

+------+---------+---------+----------+
| SNUM | SNAME   | AMOUNT  | ODATE    |
+------+---------+---------+----------+
| 1004 | Motika  | 1900.10 | 10/03/90 |
| 1001 | Peel    |  767.19 | 10/03/90 |
| 1007 | Rifkin  | 1098.16 | 10/03/90 |
| 1002 | Serres  | 5160.45 | 10/03/90 |
| 1003 | AxelRod | 1713.23 | 10/04/90 |
| 1002 | Serres  |   75.75 | 10/04/90 |
| 1001 | Peel    | 9891.88 | 10/05/90 |
| 1002 | Serres  | 1309.95 | 10/05/90 |
+------+---------+---------+----------+
8 rows in set (0.00 sec)

4. Arrange the Order table by descending customer number. 


mysql> SELECT * FROM ORDERS ORDER BY CNUM DESC;
+------+---------+----------+------+------+
| ONUM | AMT     | ODATE    | CNUM | SNUM |
+------+---------+----------+------+------+
| 3001 |   18.69 | 10/03/90 | 2008 | 1007 |
| 3006 | 1098.16 | 10/03/90 | 2008 | 1007 |
| 3002 | 1900.10 | 10/03/90 | 2007 | 1004 |
| 3011 | 9891.88 | 10/05/90 | 2006 | 1001 |
| 3008 | 4723.00 | 10/05/90 | 2006 | 1001 |
| 3010 | 1309.95 | 10/05/90 | 2004 | 1002 |
| 3007 |   75.75 | 10/04/90 | 2004 | 1002 |
| 3005 | 5160.45 | 10/03/90 | 2003 | 1002 |
| 3009 | 1713.23 | 10/04/90 | 2002 | 1003 |
| 3003 |  767.19 | 10/03/90 | 2001 | 1001 |
+------+---------+----------+------+------+
10 rows in set (0.00 sec)

5. Find which salespeople currently have orders in the order table. 
mysql> SELECT DISTINCT(SALESPEOPLE.SNAME) FROM SALESPEOPLE INNER JOIN ORDERS
 ON SALESPEOPLE.SNUM=ORDERS.SNUM;
+---------+
| SNAME   |
+---------+
| Rifkin  |
| Peel    |
| Motika  |
| Serres  |
| AxelRod |
+---------+
5 rows in set (0.00 sec)

6. List names of all customers matched with the salespeople serving them. 

mysql> SELECT CUSTOMERS.CNAME FROM CUSTOMERS INNER JOIN SALE
SPEOPLE ON CUSTOMERS.SNUM=SALESPEOPLE.SNUM;
+----------+
| CNAME    |
+----------+
| Hoffman  |
| Giovanni |
| Liu      |
| Grass    |
| Ciemens  |
| Cisneros |
| Pereira  |
+----------+
7 rows in set (0.00 sec)

7. Find the names and numbers of all salespeople who have more than one customer. 


mysql> SELECT SALESPEOPLE.SNAME , COUNT(CUSTOMERS.SNUM)  FROM SALESPEOPLE INNER JOIN CUSTOMERS ON SALESPEOPLE.SNUM=CUSTOMERS.SNUM GROUP BY CUSTOMERS.SNUM HAVING COUNT(CUSTOMERS.SNUM)>1;
+--------+-----------------------+
| SNAME  | COUNT(CUSTOMERS.SNUM) |
+--------+-----------------------+
| Peel   |                     2 |
| Serres |                     2 |
+--------+-----------------------+
2 rows in set (0.00 sec)

8. Count the orders of each of the salespeople and output the results in descending order. 

mysql> SELECT  SALESPEOPLE.SNUM,COUNT(ORDERS.SNUM) AS "NO. OF ORDERS OF EACH SALESPEOPLE" FROM ORDERS INNER JOIN SALESPEOPLE ON SALESPEOPLE.SNUM=ORDERS.SNUM  GROUP BY ORDERS.SNUM ORDER BY COUNT(ORDERS.SNUM) DESC;
+------+-----------------------------------+
| SNUM | NO. OF ORDERS OF EACH SALESPEOPLE |
+------+-----------------------------------+
| 1001 |                                 3 |
| 1002 |                                 3 |
| 1007 |                                 2 |
| 1004 |                                 1 |
| 1003 |                                 1 |
+------+-----------------------------------+
5 rows in set (0.00 sec)

9. List the customer table if and only if one or more of the customers in the Customer table are located in SanJose.

mysql> SELECT * FROM CUSTOMERS WHERE EXISTS (SELECT CITY FROM CUSTOMERS WHERE CITY="SanJose")
    -> ;
+------+----------+---------+--------+------+
| CNUM | CNAME    | CITY    | RATING | SNUM |
+------+----------+---------+--------+------+
| 2001 | Hoffman  | London  |    100 | 1001 |
| 2002 | Giovanni | Rome    |    200 | 1003 |
| 2003 | Liu      | SanJose |    200 | 1002 |
| 2004 | Grass    | Berlin  |    300 | 1002 |
| 2006 | Ciemens  | London  |    100 | 1001 |
| 2006 | Cisneros | SanJose |    300 | 1007 |
| 2007 | Pereira  | Rome    |    100 | 1004 |
+------+----------+---------+--------+------+
7 rows in set (0.00 sec)

10. Match salespeople to customers according to what city they live in. 

mysql> SELECT SALESPEOPLE.SNAME, CUSTOMERS.CNAME, CUSTOMERS.CITY FROM SALESP
EOPLE INNER JOIN CUSTOMERS ON CUSTOMERS.CITY=SALESPEOPLE.CITY;
+--------+----------+---------+
| SNAME  | CNAME    | CITY    |
+--------+----------+---------+
| Peel   | Hoffman  | London  |
| Motika | Hoffman  | London  |
| Fran   | Hoffman  | London  |
| Serres | Liu      | SanJose |
| Peel   | Ciemens  | London  |
| Motika | Ciemens  | London  |
| Fran   | Ciemens  | London  |
| Serres | Cisneros | SanJose |
+--------+----------+---------+
8 rows in set (0.00 sec)

11.Find all the customers in SanJose who have a rating above 200. 

mysql> SELECT * FROM CUSTOMERS WHERE CITY="SanJose" and RATING>200;
+------+----------+---------+--------+------+
| CNUM | CNAME    | CITY    | RATING | SNUM |
+------+----------+---------+--------+------+
| 2006 | Cisneros | SanJose |    300 | 1007 |
+------+----------+---------+--------+------+
1 row in set (0.00 sec)

12. List the names and commissions of all salespeople in London. 

mysql> SELECT SNAME,CITY,COMM FROM SALESPEOPLE WHERE CITY="London";
+--------+--------+------+
| SNAME  | CITY   | COMM |
+--------+--------+------+
| Peel   | London |   12 |
| Motika | London |   11 |
| Fran   | London |   25 |
+--------+--------+------+
3 rows in set (0.00 sec)

13. List all the orders of Salesperson Motika from the orders table.


mysql> SELECT ORDERS.ONUM,ORDERS.AMT,ORDERS.ODATE,ORDERS.CNUM,ORDERS.SNUM FROM ORDERS INNER JOIN SALESPEOPLE ON SALESPEOPLE.SNUM = ORDERS.SNUM WHERE SALESPEOPLE.SNAME="Motika";
+------+---------+----------+------+------+
| ONUM | AMT     | ODATE    | CNUM | SNUM |
+------+---------+----------+------+------+
| 3002 | 1900.10 | 10/03/90 | 2007 | 1004 |
+------+---------+----------+------+------+
1 row in set (0.00 sec)

14. Find all customers who booked orders on October 3. 


mysql> SELECT CNUM, ODATE FROM ORDERS WHERE ODATE LIKE '10/03%';
+------+----------+
| CNUM | ODATE    |
+------+----------+
| 2008 | 10/03/90 |
| 2001 | 10/03/90 |
| 2007 | 10/03/90 |
| 2003 | 10/03/90 |
| 2008 | 10/03/90 |
+------+----------+
5 rows in set (0.00 sec)

15. Give the sums of the amounts from the Orders table, grouped by date, eliminating all those dates where the SUM was not at least 2000 above the maximum Amount. 


mysql> SELECT SUM(AMT) FROM ORDERS GROUP BY ODATE HAVING SUM(AMT)>=2000;
+----------+
| SUM(AMT) |
+----------+
|  8944.59 |
| 15924.83 |
+----------+
2 rows in set (0.00 sec)

16.Select all orders that had amounts that were greater than at least one of the orders from October 6. 


mysql> SELECT * FROM ORDERS WHERE AMT>= (SELECT MIN(AMT) FROM ORDERS WHERE ODATE LIKE '10/06%' );
+------+---------+----------+------+------+
| ONUM | AMT     | ODATE    | CNUM | SNUM |
+------+---------+----------+------+------+
| 3002 | 1900.10 | 10/03/90 | 2007 | 1004 |
| 3005 | 5160.45 | 10/03/90 | 2003 | 1002 |
| 3009 | 1713.23 | 10/04/90 | 2002 | 1003 |
| 3008 | 4723.00 | 10/05/90 | 2006 | 1001 |
| 3010 | 1309.95 | 10/06/90 | 2004 | 1002 |
| 3011 | 9891.88 | 10/06/90 | 2006 | 1001 |
+------+---------+----------+------+------+
6 rows in set (0.00 sec)


17. Write a query that uses the EXISTS operator to extract all salespeople who have customers with a rating of 300.
mysql> SELECT * FROM SALESPEOPLE WHERE EXISTS (SELECT * FROM CUSTOMERS WHERE SALESPEOPLE.SNUM = CUSTOMERS.SNUM AND RATING =300);
+------+--------+-----------+------+
| SNUM | SNAME  | CITY      | COMM |
+------+--------+-----------+------+
| 1002 | Serres | SanJose   |   13 |
| 1007 | Rifkin | Barcelona |   15 |
+------+--------+-----------+------+
2 rows in set (0.00 sec)


18.Find all customers whose cnum is 1000 above the snum of Serres. 


mysql> SELECT CUSTOMERS.CNAME FROM CUSTOMERS INNER JOIN SALESPEOPLE ON SALESPEOPLE.SNUM =CUSTOMERS.SNUM WHERE CUSTOMERS.CNUM>1000 + (SELECT SALESPEOPLE.
SNUM FROM SALESPEOPLE WHERE SALESPEOPLE.SNAME = "Serres");
+----------+
| CNAME    |
+----------+
| Liu      |
| Grass    |
| Ciemens  |
| Cisneros |
| Pereira  |
+----------+
5 rows in set (0.00 sec)


19.Give the salespeopleâ€™s commissions as percentages instead of decimal numbers. 

Database changed
mysql> SELECT SNUM,SNAME,CITY,(COMM*100)/(SELECT SUM(COMM) FROM SALESPEOPLE)
    -> FROM SALESPEOPLE;
+------+---------+-----------+------------------------------------------------+
| SNUM | SNAME   | CITY      | (COMM*100)/(SELECT SUM(COMM) FROM SALESPEOPLE) |
+------+---------+-----------+------------------------------------------------+
| 1001 | Peel    | London    |                                        13.9535 |
| 1002 | Serres  | SanJose   |                                        15.1163 |
| 1004 | Motika  | London    |                                        12.7907 |
| 1007 | Rifkin  | Barcelona |                                        17.4419 |
| 1003 | AxelRod | New York  |                                        11.6279 |
| 1008 | Fran    | London    |                                        29.0698 |
+------+---------+-----------+------------------------------------------------+
6 rows in set (0.00 sec)


20.Find the largest order taken by each salesperson on each date, eliminating those Maximum orders, which are less than 3000.

mysql> SELECT SALESPEOPLE.SNUM, SALESPEOPLE.SNAME, MAX(ORDERS.AMT) AS AMOUNT, ORDERS.ODATE FROM SALESPEOPLE INNER JOIN ORDERS ON ORDERS.SNUM=SALESPEOPLE.SNUM WHERE ORDERS.AMT>=3000 GROUP BY ORDERS.ODATE, SALESPEOPLE.SNAME;
+------+--------+---------+----------+
| SNUM | SNAME  | AMOUNT  | ODATE    |
+------+--------+---------+----------+
| 1002 | Serres | 5160.45 | 10/03/90 |
| 1001 | Peel   | 4723.00 | 10/05/90 |
| 1001 | Peel   | 9891.88 | 10/06/90 |
+------+--------+---------+----------+
3 rows in set (0.00 sec)

21. List all the largest orders for October 3, for each salesperson. 

mysql> SELECT ONUM,ODATE,CNUM,SNUM,MAX(AMT) FROM ORDERS WHERE ODATE LIKE "10
/03%" GROUP BY SNUM;
+------+----------+------+------+----------+
| ONUM | ODATE    | CNUM | SNUM | MAX(AMT) |
+------+----------+------+------+----------+
| 3003 | 10/03/90 | 2001 | 1001 |   767.19 |
| 3005 | 10/03/90 | 2003 | 1002 |  5160.45 |
| 3002 | 10/03/90 | 2007 | 1004 |  1900.10 |
| 3001 | 10/03/90 | 2008 | 1007 |  1098.16 |
+------+----------+------+------+----------+
4 rows in set (0.00 sec)

22. Find all customers located in cities where Serres has customers. 

mysql> SELECT * FROM SALESPEOPLE INNER JOIN CUSTOMERS ON SALESPEOPLE.SNUM = CUSTOMERS.SNUM WHERE CUSTOMERS.CITY IN (SELECT CUSTOMERS.CITY FROM CUSTOMERS
 WHERE CUSTOMERS.SNUM = (SELECT SALESPEOPLE.SNUM FROM SALESPEOPLE WHERE SALE
SPEOPLE.SNAME = "Serres"));
+------+--------+-----------+------+------+----------+---------+--------+------+
| SNUM | SNAME  | CITY      | COMM | CNUM | CNAME    | CITY    | RATING | SNUM |
+------+--------+-----------+------+------+----------+---------+--------+------+
| 1002 | Serres | SanJose   |   13 | 2003 | Liu      | SanJose |    200 | 1002 |
| 1002 | Serres | SanJose   |   13 | 2004 | Grass    | Berlin  |    300 | 1002 |
| 1007 | Rifkin | Barcelona |   15 | 2006 | Cisneros | SanJose |    300 | 1007 |
+------+--------+-----------+------+------+----------+---------+--------+------+
3 rows in set (0.00 sec)

23.  Select all customers with a rating above 200. 

mysql> SELECT * FROM CUSTOMERS WHERE RATING >200;
+------+----------+---------+--------+------+
| CNUM | CNAME    | CITY    | RATING | SNUM |
+------+----------+---------+--------+------+
| 2004 | Grass    | Berlin  |    300 | 1002 |
| 2006 | Cisneros | SanJose |    300 | 1007 |
+------+----------+---------+--------+------+
2 rows in set (0.00 sec)

24. Count the number of salespeople currently having orders in the orders table. 
mysql> SELECT COUNT(DISTINCT(SNUM)) FROM ORDERS;
+-----------------------+
| COUNT(DISTINCT(SNUM)) |
+-----------------------+
|                     5 |
+-----------------------+
1 row in set (0.00 sec)

25.  Write a query that produces all customers serviced by salespeople with a commission above 12%. Output the customerâ€™s name, salespersonâ€™s name and the salespersonâ€™s rate of commission. 


mysql> SELECT CUSTOMERS.CNUM, CUSTOMERS.CNAME,CUSTOMERS.CITY,CUSTOMERS.RATING,CUSTOMERS.SNUM, SALESPEOPLE.COMM FROM CUSTOMERS INNER JOIN SALESPEOPLE ON
SALESPEOPLE.SNUM = CUSTOMERS.SNUM WHERE SALESPEOPLE.COMM >12;
+------+----------+---------+--------+------+------+
| CNUM | CNAME    | CITY    | RATING | SNUM | COMM |
+------+----------+---------+--------+------+------+
| 2003 | Liu      | SanJose |    200 | 1002 |   13 |
| 2004 | Grass    | Berlin  |    300 | 1002 |   13 |
| 2006 | Cisneros | SanJose |    300 | 1007 |   15 |
+------+----------+---------+--------+------+------+
3 rows in set (0.00 sec)

26. Find salespeople who have multiple customers.


mysql> SELECT SNUM FROM CUSTOMERS GROUP BY SNUM HAVING COUNT(SNUM)>1;
+------+
| SNUM |
+------+
| 1001 |
| 1002 |
+------+
2 rows in set (0.00 sec)

27. Find salespeople with customers located in their own cities. 

mysql> SELECT SALESPEOPLE.SNUM, SALESPEOPLE.SNAME, SALESPEOPLE.CITY, SALESPEOPLE.COMM, CUSTOMERS.CNAME, CUSTOMERS.CITY, CUSTOMERS.SNUM FROM SALESPEOPLE INNER JOIN CUSTOMERS ON SALESPEOPLE.CITY = CUSTOMERS.CITY AND SALESPEOPLE.SNUM = CUSTOMERS.SNUM;
+------+--------+---------+------+---------+---------+------+
| SNUM | SNAME  | CITY    | COMM | CNAME   | CITY    | SNUM |
+------+--------+---------+------+---------+---------+------+
| 1001 | Peel   | London  |   12 | Hoffman | London  | 1001 |
| 1002 | Serres | SanJose |   13 | Liu     | SanJose | 1002 |
| 1001 | Peel   | London  |   12 | Ciemens | London  | 1001 |
+------+--------+---------+------+---------+---------+------+
3 rows in set (0.00 sec)

28. Find all salespeople whose name starts with â€˜Pâ€™ and fourth character is â€˜Iâ€™.


mysql> SELECT * FROM SALESPEOPLE WHERE SNAME LIKE 'P__I%';
Empty set (0.00 sec)


29. Write a query that uses a subquery to obtain all orders for the customer named â€˜Cisnerosâ€™. Assume you do not know his customer number.


mysql> SELECT ORDERS.ONUM, ORDERS.AMT,ORDERS.ODATE,ORDERS.CNUM,ORDERS.SNUM FROM ORDERS INNER JOIN CUSTOMERS ON ORDERS.SNUM = CUSTOMERS.SNUM WHERE ORDERS.CNUM = (SELECT CUSTOMERS.CNUM FROM CUSTOMERS WHERE CUSTOMERS.CNAME= "Cisneros");
+------+---------+----------+------+------+
| ONUM | AMT     | ODATE    | CNUM | SNUM |
+------+---------+----------+------+------+
| 3008 | 4723.00 | 10/05/90 | 2006 | 1001 |
| 3008 | 4723.00 | 10/05/90 | 2006 | 1001 |
| 3011 | 9891.88 | 10/06/90 | 2006 | 1001 |
| 3011 | 9891.88 | 10/06/90 | 2006 | 1001 |
+------+---------+----------+------+------+
4 rows in set (0.00 sec)

30. Find the largest orders for Serres and Rifkin.


mysql> SELECT ORDERS.ONUM, MAX(ORDERS.AMT), SALESPEOPLE.SNAME FROM ORDERS INNER JOIN SALESPEOPLE ON SALESPEOPLE.SNUM = ORDERS.SNUM WHERE SALESPEOPLE.SNUM IN (SELECT SALESPEOPLE.SNUM FROM SALESPEOPLE WHERE SALESPEOPLE.SNAME = "Serres" OR SALESPEOPLE.SNAME = "Rifkin") GROUP BY ORDERS.SNUM;
+------+-----------------+--------+
| ONUM | MAX(ORDERS.AMT) | SNAME  |
+------+-----------------+--------+
| 3005 |         5160.45 | Serres |
| 3001 |         1098.16 | Rifkin |
+------+-----------------+--------+
2 rows in set (0.00 sec)

31. Sort the salespeople table in the following order: snum, sname, commission, city. 


mysql> SELECT * FROM SALESPEOPLE ORDER BY SNUM,SNAME,COMM;
+------+---------+-----------+------+
| SNUM | SNAME   | CITY      | COMM |
+------+---------+-----------+------+
| 1001 | Peel    | London    |   12 |
| 1002 | Serres  | SanJose   |   13 |
| 1003 | AxelRod | New York  |   10 |
| 1004 | Motika  | London    |   11 |
| 1007 | Rifkin  | Barcelona |   15 |
| 1008 | Fran    | London    |   25 |
+------+---------+-----------+------+
6 rows in set (0.00 sec)

32. Select all customers whose names fall in between â€˜Aâ€™ and â€˜Gâ€™ alphabetical range. 


mysql> SELECT * FROM CUSTOMERS WHERE CNAME BETWEEN ('A%') AND ('G');
+------+----------+---------+--------+------+
| CNUM | CNAME    | CITY    | RATING | SNUM |
+------+----------+---------+--------+------+
| 2006 | Ciemens  | London  |    100 | 1001 |
| 2006 | Cisneros | SanJose |    300 | 1007 |
+------+----------+---------+--------+------+
2 rows in set (0.00 sec)


33. Select all the possible combinations of customers you can assign. 

mysql> SELECT CUSTOMERS.CNAME, CUSTOMERS1.CNAME FROM CUSTOMERS JOIN CUSTOMERS CUSTOMERS1 ON CUSTOMERS.CNUM<CUSTOMERS1.CNUM;
+----------+----------+
| CNAME    | CNAME    |
+----------+----------+
| Hoffman  | Giovanni |
| Hoffman  | Liu      |
| Giovanni | Liu      |
| Hoffman  | Grass    |
| Giovanni | Grass    |
| Liu      | Grass    |
| Hoffman  | Ciemens  |
| Giovanni | Ciemens  |
| Liu      | Ciemens  |
| Grass    | Ciemens  |
| Hoffman  | Cisneros |
| Giovanni | Cisneros |
| Liu      | Cisneros |
| Grass    | Cisneros |
| Hoffman  | Pereira  |
| Giovanni | Pereira  |
| Liu      | Pereira  |
| Grass    | Pereira  |
| Ciemens  | Pereira  |
| Cisneros | Pereira  |
+----------+----------+
20 rows in set (0.00 sec)

34. Select all orders that are greater than the average for October 4. 


mysql> SELECT * FROM ORDERS WHERE AMT > ( SELECT AVG(AMT) FROM ORDERS WHERE ODATE LIKE "10/04%");
+------+---------+----------+------+------+
| ONUM | AMT     | ODATE    | CNUM | SNUM |
+------+---------+----------+------+------+
| 3002 | 1900.10 | 10/03/90 | 2007 | 1004 |
| 3005 | 5160.45 | 10/03/90 | 2003 | 1002 |
| 3006 | 1098.16 | 10/03/90 | 2008 | 1007 |
| 3009 | 1713.23 | 10/04/90 | 2002 | 1003 |
| 3008 | 4723.00 | 10/05/90 | 2006 | 1001 |
| 3010 | 1309.95 | 10/06/90 | 2004 | 1002 |
| 3011 | 9891.88 | 10/06/90 | 2006 | 1001 |
+------+---------+----------+------+------+
7 rows in set (0.00 sec)

35. Write a select command using correlated subquery that selects the names and numbers of all customers with ratings equal to the maximum for their city. 


mysql> SELECT * FROM CUSTOMERS WHERE RATING IN (SELECT MAX(RATING) FROM CUSTOMERS GROUP BY CITY);
+------+----------+---------+--------+------+
| CNUM | CNAME    | CITY    | RATING | SNUM |
+------+----------+---------+--------+------+
| 2001 | Hoffman  | London  |    100 | 1001 |
| 2002 | Giovanni | Rome    |    200 | 1003 |
| 2003 | Liu      | SanJose |    200 | 1002 |
| 2004 | Grass    | Berlin  |    300 | 1002 |
| 2006 | Ciemens  | London  |    100 | 1001 |
| 2006 | Cisneros | SanJose |    300 | 1007 |
| 2007 | Pereira  | Rome    |    100 | 1004 |
+------+----------+---------+--------+------+
7 rows in set (0.00 sec)

36. Write a query that totals the orders for each day and places the results in descending order.


mysql> SELECT COUNT(AMT), ODATE FROM ORDERS GROUP BY ODATE ORDER BY COUNT(AM
T) DESC;
+------------+----------+
| COUNT(AMT) | ODATE    |
+------------+----------+
|          5 | 10/03/90 |
|          2 | 10/04/90 |
|          2 | 10/06/90 |
|          1 | 10/05/90 |
+------------+----------+
4 rows in set (0.00 sec)

37. Write a select command that produces the rating followed by the name of each customer in SanJose. 


mysql> SELECT RATING, CNAME, CITY FROM CUSTOMERS WHERE CITY="SanJose";
+--------+----------+---------+
| RATING | CNAME    | CITY    |
+--------+----------+---------+
|    200 | Liu      | SanJose |
|    300 | Cisneros | SanJose |
+--------+----------+---------+
2 rows in set (0.00 sec)

38.Find all orders with amounts smaller than any amount for a customer in SanJose. 

mysql> SELECT * FROM ORDERS WHERE AMT < ANY (SELECT AMT FROM ORDERS WHERE CNUM IN (SELECT CNUM FROM CUSTOMERS WHERE CITY = "SanJose"));
+------+---------+----------+------+------+
| ONUM | AMT     | ODATE    | CNUM | SNUM |
+------+---------+----------+------+------+
| 3001 |   18.69 | 10/03/90 | 2008 | 1007 |
| 3003 |  767.19 | 10/03/90 | 2001 | 1001 |
| 3002 | 1900.10 | 10/03/90 | 2007 | 1004 |
| 3005 | 5160.45 | 10/03/90 | 2003 | 1002 |
| 3006 | 1098.16 | 10/03/90 | 2008 | 1007 |
| 3009 | 1713.23 | 10/04/90 | 2002 | 1003 |
| 3008 | 4723.00 | 10/05/90 | 2006 | 1001 |
| 3010 | 1309.95 | 10/06/90 | 2004 | 1002 |
| 3007 |   75.75 | 10/04/90 | 2004 | 1002 |
+------+---------+----------+------+------+
9 rows in set (0.00 sec)


39. Find all orders with above average amounts for their customers. 

mysql> SELECT * FROM ORDERS WHERE AMT > ANY (SELECT AVG(AMT) FROM ORDERS GROUP BY CNUM);
+------+---------+----------+------+------+
| ONUM | AMT     | ODATE    | CNUM | SNUM |
+------+---------+----------+------+------+
| 3003 |  767.19 | 10/03/90 | 2001 | 1001 |
| 3002 | 1900.10 | 10/03/90 | 2007 | 1004 |
| 3005 | 5160.45 | 10/03/90 | 2003 | 1002 |
| 3006 | 1098.16 | 10/03/90 | 2008 | 1007 |
| 3009 | 1713.23 | 10/04/90 | 2002 | 1003 |
| 3008 | 4723.00 | 10/05/90 | 2006 | 1001 |
| 3010 | 1309.95 | 10/06/90 | 2004 | 1002 |
| 3011 | 9891.88 | 10/06/90 | 2006 | 1001 |
+------+---------+----------+------+------+
8 rows in set (0.00 sec)

40.  Write a query that selects the highest rating in each city


mysql> SELECT CITY, MAX(RATING) FROM CUSTOMERS GROUP BY CITY;
+---------+-------------+
| CITY    | MAX(RATING) |
+---------+-------------+
| Berlin  |         300 |
| London  |         100 |
| Rome    |         200 |
| SanJose |         300 |
+---------+-------------+
4 rows in set (0.00 sec)

41. Write a query that calculates the amount of the salespersonâ€™s commission on each order by a customer with a rating above 100.00. 42) Count the customers with ratings above SanJoseâ€™s average.

mysql> SELECT O.ONUM, (O.AMT * S.COMM/100.0) FROM ORDERS O JOIN CUSTOMERS C ON O.CNUM = C.CNUM AND C.RATING>100 JOIN SALESPEOPLE S ON O.SNUM = S.SNUM WHERE O.AMT = (SELECT MAX(AMT) FROM ORDERS WHERE SNUM = S.SNUM);
+------+------------------------+
| ONUM | (O.AMT * S.COMM/100.0) |
+------+------------------------+
| 3005 |             670.858525 |
| 3009 |             171.322998 |
| 3011 |            1187.025586 |
+------+------------------------+
3 rows in set (0.00 sec)


42. Count the customers with ratings above SanJoseâ€™s average. 

mysql> SELECT COUNT(CNUM) FROM CUSTOMERS WHERE RATING  IN (SELECT RATING FROM CUSTOMERS WHERE CITY = "SanJose");
+-------------+
| COUNT(CNUM) |
+-------------+
|           4 |
+-------------+
1 row in set (0.00 sec)

43. Find all salespeople that are located in either Barcelona or London. 


mysql> SELECT * FROM SALESPEOPLE WHERE CITY ="Barcelona" OR CITY = "London";

+------+--------+-----------+------+
| SNUM | SNAME  | CITY      | COMM |
+------+--------+-----------+------+
| 1001 | Peel   | London    |   12 |
| 1004 | Motika | London    |   11 |
| 1007 | Rifkin | Barcelona |   15 |
| 1008 | Fran   | London    |   25 |
+------+--------+-----------+------+
4 rows in set (0.00 sec)

44. Find all salespeople with only one customer. 


mysql> SELECT * FROM CUSTOMERS GROUP BY SNUM HAVING COUNT(CNUM)=1;
+------+----------+---------+--------+------+
| CNUM | CNAME    | CITY    | RATING | SNUM |
+------+----------+---------+--------+------+
| 2002 | Giovanni | Rome    |    200 | 1003 |
| 2007 | Pereira  | Rome    |    100 | 1004 |
| 2006 | Cisneros | SanJose |    300 | 1007 |
+------+----------+---------+--------+------+
3 rows in set (0.00 sec)


45.Write a query that joins the Customer table to itself to find all pairs or customers served by a single salesperson.

mysql> SELECT C1.CNAME , C2.CNAME, S.SNAME FROM CUSTOMERS C1 JOIN CUSTOMERS
C2 ON C1.SNUM = C2.SNUM AND C1.CNUM<C2.CNUM  JOIN SALESPEOPLE S ON C1.SNUM =
 S.SNUM ;
+---------+---------+--------+
| CNAME   | CNAME   | SNAME  |
+---------+---------+--------+
| Liu     | Grass   | Serres |
| Hoffman | Ciemens | Peel   |
+---------+---------+--------+
2 rows in set (0.00 sec)

46 .  Write a query that will give you all orders for more than $1000.00. 


mysql> SELECT * FROM ORDERS WHERE AMT >1000;
+------+---------+----------+------+------+
| ONUM | AMT     | ODATE    | CNUM | SNUM |
+------+---------+----------+------+------+
| 3002 | 1900.10 | 10/03/90 | 2007 | 1004 |
| 3005 | 5160.45 | 10/03/90 | 2003 | 1002 |
| 3006 | 1098.16 | 10/03/90 | 2008 | 1007 |
| 3009 | 1713.23 | 10/04/90 | 2002 | 1003 |
| 3008 | 4723.00 | 10/05/90 | 2006 | 1001 |
| 3010 | 1309.95 | 10/06/90 | 2004 | 1002 |
| 3011 | 9891.88 | 10/06/90 | 2006 | 1001 |
+------+---------+----------+------+------+
7 rows in set (0.00 sec)

47. Write a query that lists each order number followed by the name of the customer who made that order. 


mysql> SELECT O.ONUM, O.AMT,O.ODATE,C.CNAME FROM ORDERS O INNER JOIN CUSTOMERS C ON C.CNUM = O.CNUM;
+------+---------+----------+----------+
| ONUM | AMT     | ODATE    | CNAME    |
+------+---------+----------+----------+
| 3003 |  767.19 | 10/03/90 | Hoffman  |
| 3002 | 1900.10 | 10/03/90 | Pereira  |
| 3005 | 5160.45 | 10/03/90 | Liu      |
| 3009 | 1713.23 | 10/04/90 | Giovanni |
| 3008 | 4723.00 | 10/05/90 | Ciemens  |
| 3008 | 4723.00 | 10/05/90 | Cisneros |
| 3010 | 1309.95 | 10/06/90 | Grass    |
| 3011 | 9891.88 | 10/06/90 | Ciemens  |
| 3011 | 9891.88 | 10/06/90 | Cisneros |
| 3007 |   75.75 | 10/04/90 | Grass    |
+------+---------+----------+----------+
10 rows in set (0.00 sec)

48. Write a query that selects all the customers whose ratings are equal to or greater than ANY(in the SQL sense) of â€˜Serresâ€™.


mysql> SELECT * FROM CUSTOMERS WHERE RATING >= ANY (SELECT RATING FROM CUSTOMERS WHERE SNUM IN (SELECT SNUM FROM SALESPEOPLE WHERE SNAME = "Serres"));
+------+----------+---------+--------+------+
| CNUM | CNAME    | CITY    | RATING | SNUM |
+------+----------+---------+--------+------+
| 2002 | Giovanni | Rome    |    200 | 1003 |
| 2003 | Liu      | SanJose |    200 | 1002 |
| 2004 | Grass    | Berlin  |    300 | 1002 |
| 2006 | Cisneros | SanJose |    300 | 1007 |
+------+----------+---------+--------+------+
4 rows in set (0.00 sec)


49. Write two queries that will produce all orders taken on October 3 or October 4. 
mysql> SELECT * FROM ORDERS WHERE ODATE = "10/03/90" OR ODATE = "10/04/90";
+------+---------+----------+------+------+
| ONUM | AMT     | ODATE    | CNUM | SNUM |
+------+---------+----------+------+------+
| 3001 |   18.69 | 10/03/90 | 2008 | 1007 |
| 3003 |  767.19 | 10/03/90 | 2001 | 1001 |
| 3002 | 1900.10 | 10/03/90 | 2007 | 1004 |
| 3005 | 5160.45 | 10/03/90 | 2003 | 1002 |
| 3006 | 1098.16 | 10/03/90 | 2008 | 1007 |
| 3009 | 1713.23 | 10/04/90 | 2002 | 1003 |
| 3007 |   75.75 | 10/04/90 | 2004 | 1002 |
+------+---------+----------+------+------+
7 rows in set (0.00 sec)

50.Find only those customers whose ratings are higher than every customer in Rome. 


mysql> SELECT * FROM CUSTOMERS WHERE RATING  > (SELECT MAX(RATING) FROM CUST
OMERS WHERE CITY="Rome");
+------+----------+---------+--------+------+
| CNUM | CNAME    | CITY    | RATING | SNUM |
+------+----------+---------+--------+------+
| 2004 | Grass    | Berlin  |    300 | 1002 |
| 2006 | Cisneros | SanJose |    300 | 1007 |
+------+----------+---------+--------+------+
2 rows in set (0.00 sec)


51. Write a query on the Customers table whose output will exclude all customers with a rating&lt;= 100.00, unless they are located in Rome.

mysql> SELECT * FROM CUSTOMERS WHERE RATING !=100 OR CITY="Rome";
+------+----------+---------+--------+------+
| CNUM | CNAME    | CITY    | RATING | SNUM |
+------+----------+---------+--------+------+
| 2002 | Giovanni | Rome    |    200 | 1003 |
| 2003 | Liu      | SanJose |    200 | 1002 |
| 2004 | Grass    | Berlin  |    300 | 1002 |
| 2006 | Cisneros | SanJose |    300 | 1007 |
| 2007 | Pereira  | Rome    |    100 | 1004 |
+------+----------+---------+--------+------+
5 rows in set (0.00 sec)

52. Find all rows from the customerâ€™s table for which the salesperson number is 1001. 


mysql> SELECT * FROM CUSTOMERS WHERE SNUM = 1001;
+------+---------+--------+--------+------+
| CNUM | CNAME   | CITY   | RATING | SNUM |
+------+---------+--------+--------+------+
| 2001 | Hoffman | London |    100 | 1001 |
| 2006 | Ciemens | London |    100 | 1001 |
+------+---------+--------+--------+------+
2 rows in set (0.00 sec)


53.  Find the total amount in orders for each salesperson where their total of amounts are greater than the amount of the largest order in the table.


mysql> SELECT SUM(AMT) FROM ORDERS GROUP BY SNUM HAVING SUM(AMT)>(SELECT MAX(AMT) FROM ORDERS);
+----------+
| SUM(AMT) |
+----------+
| 15382.07 |
+----------+
1 row in set (0.00 sec)


54.Write a query that selects all orders save those with zeroes or NULL in the amount file. 

mysql> SELECT * FROM ORDERS WHERE AMT IS NOT NULL;
+------+---------+----------+------+------+
| ONUM | AMT     | ODATE    | CNUM | SNUM |
+------+---------+----------+------+------+
| 3001 |   18.69 | 10/03/90 | 2008 | 1007 |
| 3003 |  767.19 | 10/03/90 | 2001 | 1001 |
| 3002 | 1900.10 | 10/03/90 | 2007 | 1004 |
| 3005 | 5160.45 | 10/03/90 | 2003 | 1002 |
| 3006 | 1098.16 | 10/03/90 | 2008 | 1007 |
| 3009 | 1713.23 | 10/04/90 | 2002 | 1003 |
| 3008 | 4723.00 | 10/05/90 | 2006 | 1001 |
| 3010 | 1309.95 | 10/06/90 | 2004 | 1002 |
| 3011 | 9891.88 | 10/06/90 | 2006 | 1001 |
| 3007 |   75.75 | 10/04/90 | 2004 | 1002 |
+------+---------+----------+------+------+
10 rows in set (0.00 sec)

55. Produce all combinations of salespeople and customer names such that the former precedes the latter alphabetically, and the latter has a rating of less than 200. 


mysql> SELECT S.SNUM,S.SNAME,C.CNUM,CNAME FROM CUSTOMERS C JOIN SALESPEOPLE S ON S.SNUM = C.SNUM WHERE C.RATING<200 AND S.SNAME <C.CNAME ;
+------+--------+------+---------+
| SNUM | SNAME  | CNUM | CNAME   |
+------+--------+------+---------+
| 1004 | Motika | 2007 | Pereira |
+------+--------+------+---------+
1 row in set (0.00 sec)



56.  Find all salespeople name and commission. 


mysql> SELECT SNAME AS "NAME", COMM AS "COMMISSION" FROM SALESPEOPLE;
+---------+------------+
| NAME    | COMMISSION |
+---------+------------+
| Peel    |         12 |
| Serres  |         13 |
| Motika  |         11 |
| Rifkin  |         15 |
| AxelRod |         10 |
| Fran    |         25 |
+---------+------------+
6 rows in set (0.00 sec)

57. Write a query that produces the names and cities of all customers with the same rating as Hoffman. Write the query using Hoffmanâ€™s cnum rather than his rating, so that it would still be usable if his rating is changed. 


mysql> SELECT CNAME AS "NAME", CITY FROM CUSTOMERS WHERE RATING = (SELECT RATING FROM CUSTOMERS WHERE CNAME="Hoffman");
+---------+--------+
| NAME    | CITY   |
+---------+--------+
| Hoffman | London |
| Ciemens | London |
| Pereira | Rome   |
+---------+--------+
3 rows in set (0.00 sec)

58. Find all salespeople for whom there are customers that follow them in alphabetical order.



mysql> SELECT S.SNAME, C.CNAME FROM CUSTOMERS C INNER JOIN SALESPEOPLE S ON C.SNUM = S.SNUM GROUP BY S.SNAME,C.CNAME;
+---------+----------+
| SNAME   | CNAME    |
+---------+----------+
| AxelRod | Giovanni |
| Motika  | Pereira  |
| Peel    | Ciemens  |
| Peel    | Hoffman  |
| Rifkin  | Cisneros |
| Serres  | Grass    |
| Serres  | Liu      |
+---------+----------+
7 rows in set (0.00 sec)

59.Write a query that produces the names and ratings of all customers who have average orders. 

mysql> SELECT C.CNAME,C.RATING FROM CUSTOMERS C INNER JOIN ORDERS O ON C.CNUM = O.CNUM WHERE O.AMT> (SELECT AVG(AMT) FROM ORDERS);
+----------+--------+
| CNAME    | RATING |
+----------+--------+
| Liu      |    200 |
| Ciemens  |    100 |
| Cisneros |    300 |
| Ciemens  |    100 |
| Cisneros |    300 |
+----------+--------+
5 rows in set (0.00 sec)

60.  Find the SUM of all Amounts from the orders table.


mysql> SELECT SUM(AMT) FROM ORDERS;
+----------+
| SUM(AMT) |
+----------+
| 26658.40 |
+----------+
1 row in set (0.00 sec)


61. Write a SELECT command that produces the order number, amount, and the date from rows in the order table. 62) Count the number of non NULL rating fields in the Customers table (including repeats). 






