Salespeople table
+------+---------+-----------+------+
| snum | sname   | city      | comm |
+------+---------+-----------+------+
| 1001 | Peel    | London    |   12 |
| 1002 | Serres  | SanJose   |   13 |
| 1003 | AxelRod | New York  |   10 |
| 1004 | Motika  | London    |   11 |
| 1007 | Rifkin  | Barcelona |   15 |
| 1008 | Fran    | London    |   25 |
+------+---------+-----------+------+

Customers table
+------+----------+---------+--------+------+
| cnum | cname    | city    | rating | snum |
+------+----------+---------+--------+------+
| 2001 | Hoffman  | London  |    100 | 1001 |
| 2002 | Giovanni | Rome    |    200 | 1003 |
| 2003 | Liu      | SanJose |    200 | 1002 |
| 2004 | Grass    | Berlin  |    300 | 1002 |
| 2006 | Clemens  | London  |    100 | 1001 |
| 2008 | Cisneros | SanJose |    300 | 1007 |
| 2007 | Pererira | Rome    |    100 | 1004 |
+------+----------+---------+--------+------+

Orders table
+------+---------+----------+------+------+
| onum | amt     | odate    | cnum | snum |
+------+---------+----------+------+------+
| 3001 |   18.69 | 10/03/90 | 2008 | 1007 |
| 3002 |  1900.1 | 10/03/90 | 2007 | 1004 |
| 3003 |  767.19 | 10/03/90 | 2001 | 1001 |
| 3005 | 5160.45 | 10/03/90 | 2003 | 1002 |
| 3006 | 1098.16 | 10/03/90 | 2008 | 1007 |
| 3007 |   75.75 | 10/04/90 | 2004 | 1002 |
| 3008 |    4723 | 10/05/90 | 2005 | 1001 |
| 3009 | 1713.23 | 10/04/90 | 2002 | 1003 |
| 3010 | 1309.95 | 10/06/90 | 2004 | 1002 |
| 3011 | 9891.88 | 10/06/90 | 2006 | 1001 |
+------+---------+----------+------+------+

1) List all the columns of the Salespeople table. 

Expected Result:
+-------------+
| COLUMN_NAME |
+-------------+
| snum        |
| sname       |
| city        |
| comm        |
+-------------+

Approach: To get the answers we can use describe or show columns command.

Actual Result: 
+-------+-------------+------+-----+---------+-------+
| Field | Type        | Null | Key | Default | Extra |
+-------+-------------+------+-----+---------+-------+
| snum  | int         | NO   | PRI | NULL    |       |
| sname | varchar(30) | NO   |     | NULL    |       |
| city  | varchar(30) | NO   |     | NULL    |       |
| comm  | int         | YES  |     | NULL    |       |
+-------+-------------+------+-----+---------+-------+

2) List all customers with a rating of 100.

Expected Result:
The query should return Hoffman, Clemens, Pererira with all the details from other columns.

Approach: 
We can use where clause to fetch our answer.

Actual Output:
+------+----------+--------+--------+------+
| cnum | cname    | city   | rating | snum |
+------+----------+--------+--------+------+
| 2001 | Hoffman  | London |    100 | 1001 |
| 2006 | Clemens  | London |    100 | 1001 |
| 2007 | Pererira | Rome   |    100 | 1004 |
+------+----------+--------+--------+------+

3) Find the largest order taken by each salesperson on each date.

Expected Result:
The query should return salesperson's name, salesperson's id or snum, date, maximum amount for that date.

Approach:
To find the largest order taken by each salesperson on each date, we need to join the orders table with the salespeople table on the snum column.
Then, we can group the results by odate, snum, and sname, 
and use the MAX function to get the largest order amount for each group.

Actual Output:
+----------+------+---------+---------------+
| odate    | snum | sname   | largest_order |
+----------+------+---------+---------------+
| 10/03/90 | 1007 | Rifkin  |       1096.16 |
| 10/03/90 | 1004 | Motika  |        1900.1 |
| 10/03/90 | 1001 | Peel    |        767.19 |
| 10/03/90 | 1002 | Serres  |       5160.45 |
| 10/04/90 | 1002 | Serres  |         75.75 |
| 10/05/90 | 1001 | Peel    |          4723 |
| 10/04/90 | 1003 | AxelRod |       1713.23 |
| 10/06/90 | 1002 | Serres  |       1309.95 |
| 10/06/90 | 1001 | Peel    |       9891.88 |
+----------+------+---------+---------------+

4) Arrange the Orders table by descending customer number. 

Expected Result:
The query should return the table in descending order by customer number.

Approach:
We will first select all the columns from the orders table and use order by cnum.

Actual result:
+------+---------+----------+------+------+
| onum | amt     | odate    | cnum | snum |
+------+---------+----------+------+------+
| 3003 |  767.19 | 10/03/90 | 2001 | 1001 |
| 3009 | 1713.23 | 10/04/90 | 2002 | 1003 |
| 3005 | 5160.45 | 10/03/90 | 2003 | 1002 |
| 3007 |   75.75 | 10/04/90 | 2004 | 1002 |
| 3010 | 1309.95 | 10/06/90 | 2004 | 1002 |
| 3008 |    4723 | 10/05/90 | 2005 | 1001 |
| 3011 | 9891.88 | 10/06/90 | 2006 | 1001 |
| 3002 |  1900.1 | 10/03/90 | 2007 | 1004 |
| 3001 |   18.69 | 10/03/90 | 2008 | 1007 |
| 3006 | 1096.16 | 10/03/90 | 2008 | 1007 |
+------+---------+----------+------+------+

5) Find which salespeople currently have orders in the order table. 

Expected Result:
The query should return all columms from salespeople with snum 1001,1002,1003,1004,1007

Approach:
I will use the select command to select all the columns from salespeople table and use IN operator to get the results.

Actual Result:
+------+---------+-----------+------+
| snum | sname   | city      | comm |
+------+---------+-----------+------+
| 1001 | Peel    | London    |   12 |
| 1002 | Serres  | SanJose   |   13 |
| 1003 | AxelRod | New York  |   10 |
| 1004 | Motika  | London    |   11 |
| 1007 | Rifkin  | Barcelona |   15 |
+------+---------+-----------+------+

6) List names of all customers matched with the salespeople serving them. 

Expected Result:
The query should return customer's name followed by salespeople's name.

Approach:
We will use the select command to select cname, sname from the respective tables and use 
inner join on snum column present in both the tables.

Actual Result:
+----------+---------+
| cname    | sname   |
+----------+---------+
| Hoffman  | Peel    |
| Giovanni | AxelRod |
| Liu      | Serres  |
| Grass    | Serres  |
| Clemens  | Peel    |
| Cisneros | Rifkin  |
| Pererira | Motika  |
+----------+---------+

7) Find the names and numbers of all salespeople who have more than one customer. 

Expected Result:
The query should return peel, 1001, serres, 1002.

Approach:
I will use left join between salespeople and customers table on snum column, group by on snum
and sname column and having clause on snum column.

Actual Result:
+--------+------+------------------+
| sname  | snum | number_of_orders |
+--------+------+------------------+
| Peel   | 1001 |                2 |
| Serres | 1002 |                2 |
+--------+------+------------------+
2 rows in set (0.01 sec)

8) Count the orders of each of the salespeople and output the results in descending order. 

Expected Result:
The query should return snum, sname, number of orders for every salesperson present in the table.
The output should contain 6 rows.

Approach:
I will left join on snum column between salespeople and orders table and group by on snum and sname column and
order by on order_count column to get the answer.

Actual Result:
+------+---------+------------+
| snum | sname   | order_count|
+------+---------+------------+
| 1001 | Peel    |          3 |
| 1002 | Serres  |          3 |
| 1007 | Rifkin  |          2 |
| 1004 | Motika  |          1 |
| 1003 | AxelRod |          1 |
| 1008 | Fran    |          0 |
+------+---------+------------+

9) List the customer table if and only if one or more of the customers in the Customer table are located in SanJose. 

Expected Result:
The query should return all the columms from customers table.

Approach:
We will first use select command to get all the columms from customers table. Make use of subquery to fetch the Count
of city in Sanjose and use that with where clasue and get the result. 

Actual Result:
+------+----------+---------+--------+------+
| cnum | cname    | city    | rating | snum |
+------+----------+---------+--------+------+
| 2001 | Hoffman  | London  |    100 | 1001 |
| 2002 | Giovanni | Rome    |    200 | 1003 |
| 2003 | Liu      | SanJose |    200 | 1002 |
| 2004 | Grass    | Berlin  |    300 | 1002 |
| 2006 | Clemens  | London  |    100 | 1001 |
| 2008 | Cisneros | SanJose |    300 | 1007 |
| 2007 | Pererira | Rome    |    100 | 1004 |
+------+----------+---------+--------+------+

10) Match salespeople to customers according to what city they live in. 

Expected Result:
The query should return salesperson name, customer name with city common to both of them.

Approach:
This query selects the sname column from the salespeople table (aliased as s), the cname column from the customers table (aliased as c),
and the city column from the salespeople table. It then uses an INNER JOIN to combine the two tables based on their matching city values.

Actual Result:
+-------------+----------+---------+
| salesperson | customer | city    |
+-------------+----------+---------+
| Fran        | Hoffman  | London  |
| Motika      | Hoffman  | London  |
| Peel        | Hoffman  | London  |
| Serres      | Liu      | SanJose |
| Fran        | Clemens  | London  |
| Motika      | Clemens  | London  |
| Peel        | Clemens  | London  |
| Serres      | Cisneros | SanJose |
+-------------+----------+---------+

11) Find all the customers in SanJose who have a rating above 200. 

Expected Result:
The query should return cisneros, 300 as output.

Approach:
Use select commnad to select cname, rating and use where clasue to filter condition as per the question.

Actual Result:
+----------+--------+
| cname    | rating |
+----------+--------+
| Cisneros |    300 |
+----------+--------+

12) List the names and commissions of all salespeople in London. 

Expected Result:
The query should return paul, motika, fran with their respective commission.

Approach:
Use select statement to select the columms from salespeople table and then use where clause to filter the data.

Actual Result:
+--------+------+
| sname  | comm |
+--------+------+
| Peel   |   12 |
| Motika |   11 |
| Fran   |   25 |
+--------+------+

13) List all the orders of Salesperson Motika from the orders table.

Expected Result:
The query should return all the columns of orders table followed by the columns of salespeople table.

Approach:
We will use inner join on snum column between salespeople and orders table and filter the data using where clause.

Actual Result:
+------+--------+----------+------+------+--------+--------+------+
| onum | amt    | odate    | cnum | snum | sname  | city   | comm |
+------+--------+----------+------+------+--------+--------+------+
| 3002 | 1900.1 | 10/03/90 | 2007 | 1004 | Motika | London |   11 |
+------+--------+----------+------+------+--------+--------+------+

14) Find all customers who booked orders on October 3. 

Expected Result:
The query should return the cname, cnum of Pereira, cisneros, Hoffman, Liu.

Approach:
Use inner join on cnum column between customers and orders table and where clause on odate column to get the answer. 

Actual Result:
+------+----------+------------+
| cnum | cname    | odate      |
+------+----------+------------+
| 2001 | Hoffman  | 10/03/90   |
| 2003 | liu      | 10/03/90   |
| 2008 | Cisneros | 10/03/90   |
| 2007 | Pereira  | 10/03/90   |
+------+----------+------------+

15) Give the sums of the amounts from the Orders table, grouped by date, eliminating all those dates where the SUM was not at least 2000 above the maximum Amount. 

Expected Result:
The query should return empty set.

Approach:
We can use the SQL GROUP BY clause, the SUM() function, and a subquery to calculate the maximum amount for each date.

Actual Result:
Empty set (0.00 sec)

16) Select all orders that had amounts that were greater than at least one of the orders from October 6. 

Expected Result:
The query should return all columns from orders whose onum is 3002, 3005, 3008, 3009, 3011.

Approach:
The query uses a subquery to find the minimum amt value of orders placed on October 6, and then selects all 
the rows from the orders table where the amt value is greater than this minimum value.

Actual Result:
+------+---------+----------+------+------+
| onum | amt     | odate    | cnum | snum |
+------+---------+----------+------+------+
| 3002 |  1900.1 | 10/03/90 | 2007 | 1004 |
| 3005 | 5160.45 | 10/03/90 | 2003 | 1002 |
| 3008 |    4723 | 10/05/90 | 2005 | 1001 |
| 3009 | 1713.23 | 10/04/90 | 2002 | 1003 |
| 3011 | 9891.88 | 10/06/90 | 2006 | 1001 |
+------+---------+----------+------+------+

17) Write a query that uses the EXISTS operator to extract all salespeople who have customers with a rating of 300.

Expected Result:
The query should all columns corresponding to snum 1002, 1007.

Approach:
The outer query selects all salespeople columns from the "salespeople" table and the 
WHERE clause uses the EXISTS operator with a subquery to check if there is at least one row in the customers table that
matches the condition: the "snum" value of the customer is the same as the "snum" value of the salesperson in the outer query, 
and the "rating" value of the customer is 300.

Actual Result:
+------+--------+-----------+------+
| snum | sname  | city      | comm |
+------+--------+-----------+------+
| 1002 | Serres | SanJose   |   13 |
| 1007 | Rifkin | Barcelona |   15 |
+------+--------+-----------+------+

18) Find all customers whose cnum is 1000 above the snum of Serres. 

Expected Result:
The cnum of serres is 1002 and after adding 1000 is 2002.
The query should return 2003, 2004, 2006, 2007, 2008.

Approach:
We will make use of subquery in the where clause and use left join on customers and salespeople table on snum column.

Actual Result:
+----------+------+
| cname    | cnum |
+----------+------+
| Liu      | 2003 |
| Grass    | 2004 |
| Clemens  | 2006 |
| Cisneros | 2008 |
| Pererira | 2007 |
+----------+------+

19) Give the salespeople’s commissions as percentages instead of decimal numbers. 

Expected Result:
The query should return all the columns from salespeople table and should return comm column as (comm*100).

Approach:
Simply use select statement and AS, Concat function to achieve the result.

Actual Result:
+------+---------+-----------+------------+
| snum | sname   | city      | commission |
+------+---------+-----------+------------+
| 1001 | Peel    | London    | 12%        |
| 1002 | Serres  | SanJose   | 13%        |
| 1003 | AxelRod | New York  | 10%        |
| 1004 | Motika  | London    | 11%        |
| 1007 | Rifkin  | Barcelona | 15%        |
| 1008 | Fran    | London    | 25%        |
+------+---------+-----------+------------+

20) Find the largest order taken by each salesperson on each date, eliminating those Maximum orders, which are less than 3000. 

Expected Result:
The query should return rifkin, peel, serres followed by their date of order and the max amount.

Approach:
We will use inner join between salespeople and orders table on snum column group by odate and having max_order > 3000.

Actual Result:
+--------+----------+-----------+
| sname  | odate    | max_order |
+--------+----------+-----------+
| Serres | 10/03/90 |   5160.45 |
| Peel   | 10/05/90 |      4723 |
| Peel   | 10/06/90 |   9891.88 |
+--------+----------+-----------+

21) List all the largest orders for October 3, for each salesperson. 

Expected Result:
The query should return snum, sname, max_amt, odate of snum 1001, 1002, 1004, 1007.

Approach:
We will use group by clause to group the odate then use MAX() function to get the max amount from the dates where 
snum from salespeople = snum from orders table.

Actual Result:
+------+--------+---------+----------+
| snum | sname  | Max_amt | odate    |
+------+--------+---------+----------+
| 1007 | Rifkin | 1096.16 | 10/03/90 |
| 1004 | Motika |  1900.1 | 10/03/90 |
| 1001 | Peel   |  767.19 | 10/03/90 |
| 1002 | Serres | 5160.45 | 10/03/90 |
+------+--------+---------+----------+

22) Find all customers located in cities where Serres has customers. 
Expected Result:
The query should return all the columms of customers corresponding to cnum 2003, 2008

Approach:
I will use the IN operator and make use of subquery where I will select the city with sname = 'Serres'.

Actual Result:
+------+----------+---------+--------+------+
| cnum | cname    | city    | rating | snum |
+------+----------+---------+--------+------+
| 2003 | liu      | SanJose |    200 | 1002 |
| 2004 | Grass    | Berlin  |    300 | 1002 |
| 2008 | Cisneros | SanJose |    300 | 1007 |
+------+----------+---------+--------+------+

23) Select all customers with a rating above 200. 

Expected Result:
The query should return all the columms from customers where cnum is 2004, 2007.

Approach:
Select all the columns from Customers table and use where clause to filter the data.

Actual Result:
+------+----------+---------+--------+------+
| cnum | cname    | city    | rating | snum |
+------+----------+---------+--------+------+
| 2004 | Grass    | Berlin  |    300 | 1002 |
| 2008 | Cisneros | SanJose |    300 | 1007 |
+------+----------+---------+--------+------+

24) Count the number of salespeople currently having orders in the orders table. 
Expected Result:
The query should return 5 as the answer.

Appraoch:
Using count aggregate function on snum column will get the result.

Actual Result:
+-----------------------+
| number_of_salespeople |
+-----------------------+
|                     5 |
+-----------------------+


25) Write a query that produces all customers serviced by salespeople with a commission above 12%. Output the customer’s name, salesperson’s name and the salesperson’s rate of commission. 
Expected Result:
The query should return cname, sname, comm of Liu, Grass, cisneros.

Approach:
I will use inner join on snum column between the tables and where clause where comm > 12.

Actual Result:
+----------+--------+------+
| cname    | sname  | comm |
+----------+--------+------+
| Liu      | Serres |   13 |
| Grass    | Serres |   13 |
| Cisneros | Rifkin |   15 |
+----------+--------+------+

26) Find salespeople who have multiple customers. 
Expected Result:
The query should return snum, sname, count of columns of snum with 1001, 1002.

Approach:
I will use inner join on snum column and group by on snum and sname column having count > 1.

Actual Result:
+------+--------+----------------+
| snum | sname  | customer_count |
+------+--------+----------------+
| 1001 | Peel   |              2 |
| 1002 | Serres |              2 |
+------+--------+----------------+

27) Find salespeople with customers located in their own cities. 
Expected Result:
The query should return sname, cname, city of peel and serres.

Approach:
I will use inner join on snum column and where clause on city column.

Actual Result:
+--------+---------+---------+
| sname  | cname   | city    |
+--------+---------+---------+
| Peel   | Hoffman | London  |
| Serres | Liu     | SanJose |
| Peel   | Clemens | London  |
+--------+---------+---------+

28) Find all salespeople whose name starts with ‘P’ and fourth character is ‘I’. 
Expected Result:
The query should return empty set.

Approach:
I will use LIKE operator on sname column to get my results.

Actual Result:
Empty set (0.00 sec)

29) Write a query that uses a subquery to obtain all orders for the customer named ‘Cisneros’. Assume you do not know his customer number. 
Expected Result:
The query should all the columns from orders table where onum is 3001, 3006.

Approach:
I will use subquery to return the snum of cisneros and in outer query I will use IN operator 
to get the result.

Actual Result:
+------+---------+------------+------+------+
| onum | amt     | odate      | cnum | snum |
+------+---------+------------+------+------+
| 3001 |   18.69 | 10/03/90   | 2008 | 1007 |
| 3006 | 1098.16 | 10/03/90   | 2008 | 1007 |
+------+---------+------------+------+------+

30) Find the largest orders for Serres and Rifkin. 
Expected Result:
The query should return snum, sname, max_amt for Rifkin and Serres.

Approach:
By using inner join on snum column, group by, having clause on sname, snum column 
we can get the result. 

Actual Result:
+------+--------+---------+
| snum | sname  | max_amt |
+------+--------+---------+
| 1007 | Rifkin | 1096.16 |
| 1002 | Serres | 5160.45 |
+------+--------+---------+

31) Sort the salespeople table in the following order: snum, sname, commission, city. 
Expected Result:
+------+---------+-----------+------+
| snum | sname   | city      | comm |
+------+---------+-----------+------+
| 1001 | Peel    | London    |   12 |
| 1002 | Serres  | SanJose   |   13 |
| 1003 | AxelRod | New York  |   10 |
| 1004 | Motika  | London    |   11 |
| 1007 | Rifkin  | Barcelona |   15 |
| 1008 | Fran    | London    |   25 |
+------+---------+-----------+------+

Approach:
Select all the columns from salespeople table and use order by in the following sequence snum, sname, commission, city.

Actual Result:
+------+---------+-----------+------+
| snum | sname   | city      | comm |
+------+---------+-----------+------+
| 1001 | Peel    | London    |   12 |
| 1002 | Serres  | SanJose   |   13 |
| 1003 | AxelRod | New York  |   10 |
| 1004 | Motika  | London    |   11 |
| 1007 | Rifkin  | Barcelona |   15 |
| 1008 | Fran    | London    |   25 |
+------+---------+-----------+------+

32) Select all customers whose names fall in between ‘A’ and ‘G’ alphabetical range. 

Expected Result:
The query should return all the rows from customers with snum 2006, 2008, 2004, 2002.

Previous Approach:
I used the between operator to get the answer.

Edge Case:
But it was not able to include the names starting with g.

Previous Appraoch:
I used LIKE operator to get the answer.

Edge Case:
It was giving names starting with either A or G not both.

Approach(Final):
I used substr function with where clause to get the answer.

Actual Result:
+------+----------+---------+--------+------+
| cnum | cname    | city    | rating | snum |
+------+----------+---------+--------+------+
| 2002 | Giovanni | Rome    |    200 | 1003 |
| 2004 | Grass    | Berlin  |    300 | 1002 |
| 2008 | Cisneros | SanJose |    300 | 1007 |
| 2006 | Clemens  | London  |    100 | 1001 |
+------+----------+---------+--------+------+

33) Select all the possible combinations of customers you can assign. 
Expected Result & Approach:
Many approaches are allowed for this question as many combinations can be made. I selected cnum and cname from
customers and self join the table with itself where cnum1 < cnum2.  

Actual Result:
+-------+----------+-------+----------+
| cnum1 | cname1   | cnum2 | cname2   |
+-------+----------+-------+----------+
|  2001 | Hoffman  |  2002 | Giovanni |
|  2001 | Hoffman  |  2003 | Liu      |
|  2001 | Hoffman  |  2004 | Grass    |
|  2001 | Hoffman  |  2006 | Clemens  |
|  2001 | Hoffman  |  2007 | Cisneros |
|  2001 | Hoffman  |  2008 | Pererira |
|  2002 | Giovanni |  2003 | Liu      |
|  2002 | Giovanni |  2004 | Grass    |
|  2002 | Giovanni |  2006 | Clemens  |
|  2002 | Giovanni |  2007 | Cisneros |
|  2002 | Giovanni |  2008 | Pererira |
|  2003 | Liu      |  2004 | Grass    |
|  2003 | Liu      |  2006 | Clemens  |
|  2003 | Liu      |  2007 | Cisneros |
|  2003 | Liu      |  2008 | Pererira |
|  2004 | Grass    |  2006 | Clemens  |
|  2004 | Grass    |  2007 | Cisneros |
|  2004 | Grass    |  2008 | Pererira |
|  2006 | Clemens  |  2007 | Cisneros |
|  2006 | Clemens  |  2008 | Pererira |
|  2008 | Cisneros |  2008 | Pererira |
+-------+----------+-------+----------+

34) Select all orders that are greater than the average for October 4. 
Expected Result:
The query should return all the rows from orders whose onum is 3002, 3005, 3006, 3008, 3009, 3010, 3011.

Approach:
I will make use of subquery which will return the avg of orders when the date was 10/04/90 and use the outer 
query to to get the data which is greater than the avg value.

Actual Result:
+------+---------+----------+------+------+
| onum | amt     | odate    | cnum | snum |
+------+---------+----------+------+------+
| 3002 |  1900.1 | 10/03/90 | 2007 | 1004 |
| 3005 | 5160.45 | 10/03/90 | 2003 | 1002 |
| 3006 | 1096.16 | 10/03/90 | 2008 | 1007 |
| 3008 |    4723 | 10/05/90 | 2005 | 1001 |
| 3009 | 1713.23 | 10/04/90 | 2002 | 1003 |
| 3010 | 1309.95 | 10/06/90 | 2004 | 1002 |
| 3011 | 9891.88 | 10/06/90 | 2006 | 1001 |
+------+---------+----------+------+------+

35) Write a select command using correlated subquery that selects the names and numbers of all customers with ratings equal to the maximum for their city. 
Expected Result:
The query should return the cnum and cname of cnum 2001, 2002, 2004, 2006, 2007.

Approach:
I will use a subquery which will return me the max rating for the customers and in the outer I will match that rating 
with the rating present in customers table and get the result.

Actual Result:
+------+----------+
| cnum | cname    |
+------+----------+
| 2001 | Hoffman  |
| 2002 | Giovanni |
| 2004 | Grass    |
| 2006 | Clemens  |
| 2008 | Cisneros |
+------+----------+

36) Write a query that totals the orders for each day and places the results in descending order. 
Expected Result:
The query should return the daywise total amount and odate and display the data in descending order.

Approach:
Select the sum(amt) as day_wise and group them by odate and order by day_wise in descending order.

Actual Result:
+----------+----------+
| DAY_WISE | odate    |
+----------+----------+
| 11201.83 | 10/06/90 |
|  8942.59 | 10/03/90 |
|     4723 | 10/05/90 |
|  1788.98 | 10/04/90 |
+----------+----------+

37) Write a select command that produces the rating followed by the name of each customer in SanJose. 
Expected Result:
The query should return cname and rating cloumn of liu and cisneros.

Approach:
Use the where clause on city = 'SanJose' after selecting the relevant columns from the customers table.

Actual Result:
+----------+--------+
| cname    | rating |
+----------+--------+
| Liu      |    200 |
| Cisneros |    300 |
+----------+--------+

38) Find all orders with amounts smaller than any amount for a customer in SanJose. 
Expected Result:
The query should return all the rows from the orders table except when onum is 3005, 3011.

Approach:
I will make use of 2 subqueries and ANY operator to get the answers.

Actual Result:
+------+---------+----------+------+------+
| onum | amt     | odate    | cnum | snum |
+------+---------+----------+------+------+
| 3001 |   18.69 | 10/03/90 | 2008 | 1007 |
| 3002 |  1900.1 | 10/03/90 | 2007 | 1004 |
| 3003 |  767.19 | 10/03/90 | 2001 | 1001 |
| 3006 | 1096.16 | 10/03/90 | 2008 | 1007 |
| 3007 |   75.75 | 10/04/90 | 2004 | 1002 |
| 3008 |    4723 | 10/05/90 | 2005 | 1001 |
| 3009 | 1713.23 | 10/04/90 | 2002 | 1003 |
| 3010 | 1309.95 | 10/06/90 | 2004 | 1002 |
+------+---------+----------+------+------+

39) Find all orders with above average amounts for their customers. 
Expected Result:
The query should return all rows from orders table where onum is 3006, 3010, 3011

Appraoch:
Using inner join on orders and customers table on cnum column and a subquery which will
select the average amount for respective customer on cnum column we can get the answer.

Actual Result:
+------+------------+----------+---------+
| onum | odate      | cname    | amt     |
+------+------------+----------+---------+
| 3006 | 10/03/90   | Cisneros | 1098.16 |
| 3010 | 10/06/90   | Grass    | 1309.95 |
| 3011 | 10/06/90   | Clemens  | 9891.88 |
+------+------------+----------+---------+

40) Write a query that selects the highest rating in each city. 
Expected Result:
The query should return city of london, Rome, SanJose, Berlin with their highest rating.

Approach:
USing max and group by operator we can achieve the task.

Actual Result:
+---------+----------------+
| city    | HIGHEST_RATING |
+---------+----------------+
| London  |            100 |
| Rome    |            200 |
| SanJose |            300 |
| Berlin  |            300 |
+---------+----------------+
4 rows in set (0.00 sec)


41) Write a query that calculates the amount of the salesperson’s commission on each order by a customer with a rating above 100.00. 
Expected Result:
The query should return onum, sname, comm, rating, commission columns where onum is 3002, 3005, 3007, 3009, 3010

Approach:
I will use inner join on customers and orders table on cnum column and the resultant to be again inner join with
salespeople table on snum column where rating > 100.

Actual Result:
+------+---------+------+--------+--------------------+
| onum | sname   | comm | rating | commission         |
+------+---------+------+--------+--------------------+
| 3002 | Motika  |   11 |    300 |            209.011 |
| 3005 | Serres  |   13 |    200 |  670.8584999999999 |
| 3007 | Serres  |   13 |    300 |             9.8475 |
| 3009 | AxelRod |   10 |    200 | 171.32299999999998 |
| 3010 | Serres  |   13 |    300 | 170.29350000000002 |
+------+---------+------+--------+--------------------+

42) Count the customers with ratings above SanJose’s average. 
Expected Result:
The query should return 2 as the answer.

Approach:
I will use subquery that will give me the avg rating from city SanJose and then in outer query I will utilize that result by comparing 
it with rating and use count operator to get the result.

Actual Result:
+------------------+
| number_of_people |
+------------------+
|                2 |
+------------------+
1 row in set (0.00 sec)


43) Find all salespeople that are located in either Barcelona or London. 
Expected Result:
The query should return all the rows from salespeople table with snum 1001, 1004, 1007, 1008.

Approach:
Use IN operator which will act as multiple or and get us the desired result.  

Actual Result:
+------+--------+-----------+------+
| snum | sname  | city      | comm |
+------+--------+-----------+------+
| 1001 | Peel   | London    |   12 |
| 1004 | Motika | London    |   11 |
| 1007 | Rifkin | Barcelona |   15 |
| 1008 | Fran   | London    |   25 |
+------+--------+-----------+------+


44) Find all salespeople with only one customer. 
Expected Result:
The result should return all the rows from salespeople table with snum 1003, 1004, 1007.

Approach:
I will use group by and having operator inside the subquery to get snum as result and in outer query use IN operator
to get the corresponding rows from salespeople table/

Actual Result:
+------+---------+-----------+------+
| snum | sname   | city      | comm |
+------+---------+-----------+------+
| 1003 | AxelRod | New York  |   10 |
| 1004 | Motika  | London    |   11 |
| 1007 | Rifkin  | Barcelona |   15 |
+------+---------+-----------+------+


45) Write a query that joins the Customer table to itself to find all pairs or customers served by a single salesperson. 
Expected Result:
+-----------+-----------+-------------+
| customer1 | customer2 | salesperson |
+-----------+-----------+-------------+
| Hoffman   | Clemens   | Peel        |
| Liu       | Grass     | Serres      |
+-----------+-----------+-------------+

Approach:
Self join customers on snum column and the resultant to be inner join with salespeople on snum columm.
I have used c1.cnum < c2.snum so that the same name does not repeats itself again. 

Actual Result:
+-----------+-----------+-------------+
| customer1 | customer2 | salesperson |
+-----------+-----------+-------------+
| Hoffman   | Clemens   | Peel        |
| Liu       | Grass     | Serres      |
+-----------+-----------+-------------+

46) Write a query that will give you all orders for more than $1000.00. 
Expected Result:
The query should return all the rows from the orders table with onum 3006, 3010, 3009, 3002, 3008, 3005, 3011.

Approach:
use where clause on amt and order by to get the amount in ascending order. 

Actual Result:
+------+---------+----------+------+------+
| onum | amt     | odate    | cnum | snum |
+------+---------+----------+------+------+
| 3006 | 1096.16 | 10/03/90 | 2008 | 1007 |
| 3010 | 1309.95 | 10/06/90 | 2004 | 1002 |
| 3009 | 1713.23 | 10/04/90 | 2002 | 1003 |
| 3002 |  1900.1 | 10/03/90 | 2007 | 1004 |
| 3008 |    4723 | 10/05/90 | 2005 | 1001 |
| 3005 | 5160.45 | 10/03/90 | 2003 | 1002 |
| 3011 | 9891.88 | 10/06/90 | 2006 | 1001 |
+------+---------+----------+------+------+
7 rows in set (0.00 sec)


47) Write a query that lists each order number followed by the name of the customer who made that order. 
Expected Result:
The should return all onum and the names of customers who ordered them.

Approach:
Use inner join on cnum column between orders and customers table and order by onum columm.

Actual Result:
+------+----------+
| onum | cname    |
+------+----------+
| 3001 | Cisneros |
| 3002 | Pereira  |
| 3003 | Hoffman  |
| 3005 | liu      |
| 3006 | Cisneros |
| 3007 | Grass    |
| 3008 | Clemens  |
| 3009 | Giovanni |
| 3010 | Grass    |
| 3011 | Clemens  |
+------+----------+


48) Write a query that selects all the customers whose ratings are equal to or greater than ANY(in the SQL sense) of ‘Serres’.
Expected Result:
The query should return all the rows from customers where cnum is 2002, 2003, 2004, 2007.

Approach:
I will make use of 2 subqueries and ANY operator to get the results.


Actual Result:
+------+----------+---------+--------+------+
| cnum | cname    | city    | rating | snum |
+------+----------+---------+--------+------+
| 2002 | Giovanni | Rome    |    200 | 1003 |
| 2003 | Liu      | SanJose |    200 | 1002 |
| 2004 | Grass    | Berlin  |    300 | 1002 |
| 2008 | Cisneros | SanJose |    300 | 1007 |
+------+----------+---------+--------+------+
4 rows in set (0.00 sec)


49) Write two queries that will produce all orders taken on October 3 or October 4. 
Expected Result:
The query should return all the rows with onum 3001, 3002, 3003, 3005, 3007, 3006, 3009.

Approach:
I made use of IN operator to get the result.

Actual Result:
+------+---------+----------+------+------+
| onum | amt     | odate    | cnum | snum |
+------+---------+----------+------+------+
| 3001 |   18.69 | 10/03/90 | 2008 | 1007 |
| 3002 |  1900.1 | 10/03/90 | 2007 | 1004 |
| 3003 |  767.19 | 10/03/90 | 2001 | 1001 |
| 3005 | 5160.45 | 10/03/90 | 2003 | 1002 |
| 3006 | 1096.16 | 10/03/90 | 2008 | 1007 |
| 3007 |   75.75 | 10/04/90 | 2004 | 1002 |
| 3009 | 1713.23 | 10/04/90 | 2002 | 1003 |
+------+---------+----------+------+------+
7 rows in set (0.00 sec)

50) Find only those customers whose ratings are higher than every customer in Rome. 

mysql> SELECT *
    -> FROM customers
    -> WHERE rating > ( SELECT MAX(rating)
    ->                  FROM customers
    ->                  WHERE city = 'Rome');
+------+----------+---------+--------+------+
| cnum | cname    | city    | rating | snum |
+------+----------+---------+--------+------+
| 2004 | Grass    | Berlin  |    300 | 1002 |
| 2008 | Cisneros | SanJose |    300 | 1007 |
+------+----------+---------+--------+------+



51) Write a query on the Customers table whose output will exclude all customers with a rating= 100.00, unless they are located in Rome. 
Expected Result:
The query should return all the rows from customers table where cnum is 2002, 2003, 2004, 2007, 2008

Actual Result:
+------+----------+---------+--------+------+
| cnum | cname    | city    | rating | snum |
+------+----------+---------+--------+------+
| 2002 | Giovanni | Rome    |    200 | 1003 |
| 2003 | Liu      | SanJose |    200 | 1002 |
| 2004 | Grass    | Berlin  |    300 | 1002 |
| 2007 | Pererira | Rome    |    100 | 1004 |
| 2008 | Cisneros | SanJose |    300 | 1007 |
+------+----------+---------+--------+------+

52) Find all rows from the customer’s table for which the salesperson number is 1001. 
Expected Result:
The query should return all the rows from customers where cnum is 2001, 2006.

Approach:
I used inner join between the customers table and salespeople table on snum column and used where clause.

Actual Result:
+------+---------+--------+--------+------+
| cnum | cname   | city   | rating | snum |
+------+---------+--------+--------+------+
| 2001 | Hoffman | London |    100 | 1001 |
| 2006 | Clemens | London |    100 | 1001 |
+------+---------+--------+--------+------+
2 rows in set (0.00 sec)


53) Find the total amount in orders for each salesperson where their total of amounts are greater than the amount of the largest order in the table. 
Expected Result:
This query should return 15382.07, 1001, Peel.

Approach:
I used where on snum column, group by on snum and having clause to check the condition and get the answer.

Actual Result:
+--------------+------+-------+
| max_for_each | snum | sname |
+--------------+------+-------+
|     15382.07 | 1001 | Peel  |
+--------------+------+-------+
1 row in set (0.01 sec)



54) Write a query that selects all orders save those with zeroes or NULL in the amount file. 
Expected Result:
Empty set (0.00 sec)

Approach:
Use into outfile command to achieve the task.

Actual Result:
Empty set (0.00 sec)


55) Produce all combinations of salespeople and customer names such that the former precedes the latter alphabetically, and the latter has a rating of less than 200. 
Expected Result:
The query should return motika pererira 100.

Approach:
Use inner join on snum columm and where clause on snum and sname column and order by on sname, cname columm.

Actual Result:
+-------------+----------+--------+
| salesperson | customer | rating |
+-------------+----------+--------+
| Motika      | Pererira |    100 |
+-------------+----------+--------+


56) Find all salespeople name and commission. 
Expected Result:
+---------+------+
| sname   | comm |
+---------+------+
| Peel    |   12 |
| Serres  |   13 |
| AxelRod |   10 |
| Motika  |   11 |
| Rifkin  |   15 |
| Fran    |   25 |
+---------+------+

Approach:
select and from command will achieve the task.

Actual Result:
+---------+------+
| sname   | comm |
+---------+------+
| Peel    |   12 |
| Serres  |   13 |
| AxelRod |   10 |
| Motika  |   11 |
| Rifkin  |   15 |
| Fran    |   25 |
+---------+------+

57) Write a query that produces the names and cities of all customers with the same rating as Hoffman. Write the query using Hoffman’s cnum rather than his rating, so that it would still be usable if his rating is changed. 
Expected Result:
The query should return cname and city of Hoffman, Clemens, Pereira.

Approach:
I used subquery which returns rating as result and in outer I have used the result to compare with the rating of
customers table in where clause to get the results.

Actual Result:
+----------+--------+
| cname    | city   |
+----------+--------+
| Hoffman  | London |
| Clemens  | London |
| Pererira | Rome   |
+----------+--------+

58) Find all salespeople for whom there are customers that follow them in alphabetical order. 
Expected Result:
The query should return sname, cname of AxelRod, Motika & Giovanni, Pereira.

Approach:
I used group by and having clause on sname and cname column and inner join between customers and salespeople table
on snum column to achieve the task.

Actual Result:
+---------+----------+
| sname   | cname    |
+---------+----------+
| AxelRod | Giovanni |
| Motika  | Pererira |
+---------+----------+



59) Write a query that produces the names and ratings of all customers who have average orders. 
Expected Result:
The answer gets equal to and greater than the average orders. If it is only equal to the average then 
the query will return empty set.
The query should return cname, rating of Liu, Clemens.

Approach:
Use inner join on cnum columm between customers and orders table and an inner query which returns average of amt
from orders.

Actual Result:

+---------+--------+
| CNAME   | RATING |
+---------+--------+
| Liu     |    200 |
| Clemens |    100 |
+---------+--------+

60) Find the SUM of all Amounts from the orders table. 
Expected Result:
The query should return 26658.4

Approach:
Use sum aggregate to get the answer.

Actual Result:
+---------------------+
| total_of_all_orders |
+---------------------+
|             26658.4 |
+---------------------+


61) Write a SELECT command that produces the order number, amount, and the date from rows in the order table. 
Expected Result:
This query should return all rows from the orders table.

Approach:
A simple select statement with the names of onum, amt, odate column.

Actual Result:
+------+---------+----------+
| onum | amt     | odate    |
+------+---------+----------+
| 3001 |   18.69 | 10/03/90 |
| 3002 |  1900.1 | 10/03/90 |
| 3003 |  767.19 | 10/03/90 |
| 3005 | 5160.45 | 10/03/90 |
| 3006 | 1096.16 | 10/03/90 |
| 3007 |   75.75 | 10/04/90 |
| 3008 |    4723 | 10/05/90 |
| 3009 | 1713.23 | 10/04/90 |
| 3010 | 1309.95 | 10/06/90 |
| 3011 | 9891.88 | 10/06/90 |
+------+---------+----------+
10 rows in set (0.00 sec)

62) Count the number of non NULL rating fields in the Customers table (including repeats). 
Expected Result:
The query should return 7.

Approach:
Count aggregate function on rating columm will get the result.

Actual Result:
+-----------------+
| count_of_fields |
+-----------------+
|               7 |
+-----------------+
1 row in set (0.00 sec)


63) Write a query that gives the names of both the salesperson and the customer for each order after the order number. 
Expected Result:
The query should return onum, sname, cname from salespeople and customers table.

Approach:
Use inner join on snum column between salespeople and orders table and the resultant to be again inner joined 
on cnum columm with customers table.

Actual Result:
+------+---------+----------+
| onum | sname   | cname    |
+------+---------+----------+
| 3001 | Rifkin  | Cisneros |
| 3002 | Motika  | Pererira |
| 3003 | Peel    | Hoffman  |
| 3005 | Serres  | Liu      |
| 3006 | Rifkin  | Cisneros |
| 3007 | Serres  | Grass    |
| 3008 | Peel    | NULL     |
| 3009 | AxelRod | Giovanni |
| 3010 | Serres  | Grass    |
| 3011 | Peel    | Clemens  |
+------+---------+----------+

64) List the commissions of all salespeople servicing customers in London. 
Expected Result:
The query should return sname, comm, city of peel.

Approach:
We can inner query which returns snum and use that in outer to match the results with the selected columns i.e.
sname, comm, city.

Actual Result:
+-------+------+--------+
| sname | comm | city   |
+-------+------+--------+
| Peel  |   12 | London |
+-------+------+--------+
1 row in set (0.01 sec)


65) Write a query using ANY or ALL that will find all salespeople who have no customers located in their city. 
Expected Result:
The query should return snum, sname, city,comm from salespeople table whose snum is 1002, 1003, 1004, 1007.

Approach:
Use ANY and Not equal to operator to get the desired results.

Actual Result:
+------+---------+-----------+------+
| snum | sname   | city      | comm |
+------+---------+-----------+------+
| 1002 | Serres  | SanJose   |   13 |
| 1003 | AxelRod | New York  |   10 |
| 1004 | Motika  | London    |   11 |
| 1007 | Rifkin  | Barcelona |   15 |
+------+---------+-----------+------+

66) Write a query using the EXISTS operator that selects all salespeople with customers located in their cities who are not assigned to them. 

mysql> SELECT s.*
    -> FROM salespeople s
    -> WHERE EXISTS (
    ->   SELECT 1
    ->   FROM customers c
    ->   WHERE c.city = s.city
    ->   AND c.snum != s.snum
    -> );
+------+--------+---------+------+
| snum | sname  | city    | comm |
+------+--------+---------+------+
| 1002 | Serres | SanJose |   13 |
| 1004 | Motika | London  |   11 |
| 1008 | Fran   | London  |   25 |
+------+--------+---------+------+
3 rows in set (0.00 sec)


67) Write a query that selects all customers serviced by Peel or Motika. (Hint: The snum field relates the 2 tables to one another.) 
Expected Result:
The query should return all the rows from customers table where cnum is 2001, 2006, 2007.

Approach:
With the help of IN operator and subquery which return snum as result we can achieve the result.

Actual Result:
+------+----------+--------+--------+------+
| cnum | cname    | city   | rating | snum |
+------+----------+--------+--------+------+
| 2001 | Hoffman  | London |    100 | 1001 |
| 2006 | Clemens  | London |    100 | 1001 |
| 2007 | Pererira | Rome   |    100 | 1004 |
+------+----------+--------+--------+------+


68) Count the number of salespeople registering orders for each day. (If a salesperson has more than one order on a given day, he or she should be counted only once.) 
Expected Result:
The query should return odate, number of count of persons who ordered on that day.

Approach:
Using count on snum column and group by on odate we can achieve the task. 

Actual Result:
+----------+-------------------+
| odate    | number_of_persons |
+----------+-------------------+
| 10/03/90 |                 4 |
| 10/04/90 |                 2 |
| 10/05/90 |                 1 |
| 10/06/90 |                 2 |
+----------+-------------------+


69) Find all orders attributed to salespeople who live in London. 
Expected Result:
The query should return all the rows from orders table where onum is 3002, 3003, 3008, 3011.

Approach:
By using subquery and ANY operator we can get the answer.

Actual Result:
+------+---------+----------+------+------+
| onum | amt     | odate    | cnum | snum |
+------+---------+----------+------+------+
| 3002 |  1900.1 | 10/03/90 | 2007 | 1004 |
| 3003 |  767.19 | 10/03/90 | 2001 | 1001 |
| 3008 |    4723 | 10/05/90 | 2005 | 1001 |
| 3011 | 9891.88 | 10/06/90 | 2006 | 1001 |
+------+---------+----------+------+------+
4 rows in set (0.01 sec)	


70) Find all orders by customers not located in the same cities as their salespeople. 
Expected Result:
The query should return all the rows from orders table with onum 3001, 3002, 3006, 3007, 309, 3010.

Approach:
By making use of 2 subqueries, The innermost will return snum as result and the second subquery will return cnum as
result so that outernost query can make use of that result and get the answer.

Actual Result:
+------+---------+----------+------+------+
| onum | amt     | odate    | cnum | snum |
+------+---------+----------+------+------+
| 3001 |   18.69 | 10/03/90 | 2008 | 1007 |
| 3002 |  1900.1 | 10/03/90 | 2007 | 1004 |
| 3006 | 1096.16 | 10/03/90 | 2008 | 1007 |
| 3007 |   75.75 | 10/04/90 | 2004 | 1002 |
| 3009 | 1713.23 | 10/04/90 | 2002 | 1003 |
| 3010 | 1309.95 | 10/06/90 | 2004 | 1002 |
+------+---------+----------+------+------+

71) Find all salespeople who have customers with more than one current order. 
Expected Result:
The query should return all rows from salespeople with the number if orders column of snum 1007, 1001, 1002.

Approach:
I will use inner join between salespeople and orders table on snum column with group by and
having clause on snum columm to get the answer.

Actual Result:
+------+--------+-----------+------+------------------+
| snum | sname  | city      | comm | number_of_orders |
+------+--------+-----------+------+------------------+
| 1007 | Rifkin | Barcelona |   15 |                2 |
| 1001 | Peel   | London    |   12 |                3 |
| 1002 | Serres | SanJose   |   13 |                3 |
+------+--------+-----------+------+------------------+



72) Write a query that extracts from the customer’s table every customer assigned to a salesperson, who is currently having at least one another customer(besides the customer being selected) with orders in the Orders Table. 
Expected Result:
The query should return cnum, cname, city, rating, snum, onum, amt of cnum having 2001, 2003, 2004, 2006.

Appraoch:
Using IN operator, group by, having, where clause we can get the answer.

Actual Result:
+------+---------+---------+--------+------+
| cnum | cname   | city    | rating | snum |
+------+---------+---------+--------+------+
| 2001 | Hoffman | London  |    100 | 1001 |
| 2003 | Liu     | SanJose |    200 | 1002 |
| 2004 | Grass   | Berlin  |    300 | 1002 |
| 2006 | Clemens | London  |    100 | 1001 |
+------+---------+---------+--------+------+


73) Write a query on the customer’s table that will find the highest rating in each city. Put the output in this form: for the city (city), the highest rating is (rating). 
Expected Result:
The query should return city and rating column of London, Rome, SanJose, Berlin.

Approach:
Use group by clause with city column to achieve the task.

Actual Result:
+---------+--------+
| city    | rating |
+---------+--------+
| London  |    100 |
| Rome    |    200 |
| SanJose |    300 |
| Berlin  |    300 |
+---------+--------+


74) Write a query that will produce the snum values of all salespeople with orders, having amt greater than 1000 in the Orders Table(without repeats). 
Expected Result:
The query should return all the rows from salespeople table where snum is 1001, 1002, 1003, 1004, 1007.

Approach:
Using subquery IN operator, WHERE, group by clause we can get the amswer.

Actual Result:
+------+---------+-----------+------+
| snum | sname   | city      | comm |
+------+---------+-----------+------+
| 1001 | Peel    | London    |   12 |
| 1002 | Serres  | SanJose   |   13 |
| 1003 | AxelRod | New York  |   10 |
| 1004 | Motika  | London    |   11 |
| 1007 | Rifkin  | Barcelona |   15 |
+------+---------+-----------+------+


75) Write a query that lists customers in a descending order of rating. Output the rating field first, followed by the customer’s names and numbers. 
Expected Result:
The query should return rating,cname, cnum column of cnum 2004, 2007, 2002, 2003, 2001, 2006, 2008.

Approach:
Using order by clause on rating in descending order will get the desired result.

Actual Result:
+--------+----------+------+
| rating | cname    | cnum |
+--------+----------+------+
|    300 | Grass    | 2004 |
|    300 | Cisneros | 2008 |
|    200 | Giovanni | 2002 |
|    200 | Liu      | 2003 |
|    100 | Hoffman  | 2001 |
|    100 | Clemens  | 2006 |
|    100 | Pererira | 2007 |
+--------+----------+------+

76) Find the average commission for salespeople in London. 
Expected Result:
The query should return 16.00 as the answer.

Approach:
using AVG aggregate on comm column and where city = 'London' will get the answer. 

Actual Result:
+--------------------+
| average_commission |
+--------------------+
|            16.0000 |
+--------------------+

77) Find all orders credited to the same salesperson who services Hoffman.(cnum 2001). 
Expected Result:
The query should return all the rows of orders table where onum is 3003, 3008, 3011.

Approach:
By using a subquery which return snum as answer and using that as input for IN operator we can get the answer.

Actual Result:
+------+---------+----------+------+------+
| onum | amt     | odate    | cnum | snum |
+------+---------+----------+------+------+
| 3003 |  767.19 | 10/03/90 | 2001 | 1001 |
| 3008 |    4723 | 10/05/90 | 2005 | 1001 |
| 3011 | 9891.88 | 10/06/90 | 2006 | 1001 |
+------+---------+----------+------+------+


78) Find all salespeople whose commission is in between 0.10 and 0.12(both inclusive). 
Expected Result:
The query should return all the rows of salespeople table where snum is 1001, 1003, 1004.

Approach:
Using BETWEEN operator on comm column will get the answer.

Actual Result:
+------+---------+----------+------+
| snum | sname   | city     | comm |
+------+---------+----------+------+
| 1001 | Peel    | London   |   12 |
| 1003 | AxelRod | New York |   10 |
| 1004 | Motika  | London   |   11 |
+------+---------+----------+------+

79) Write a query that will give you the names and cities of all salespeople in London with a commission above 0.10.
Expected Result:
The query should return sname, city of Peel, Motika, Fran.

Approach:
Using WHERE clause and AND operator we can get the answer.

Actual Result:
+--------+--------+
| sname  | city   |
+--------+--------+
| Peel   | London |
| Motika | London |
| Fran   | London |
+--------+--------+

80) Write a query that selects each customer’s smallest order. 
Expected Result:
The query should cnum, cnmae and minmum amount of order column with cnum as 2001, 2002, 2003, 2004, 2006, 2007, 2008.

Approach:
We will use left join between customers and orders table on snum column and group by clause on cnum column to get 
the answer.

Actual Result:
+------+----------+----------------------+
| cnum | cname    | minimum_order_amount |
+------+----------+----------------------+
| 2001 | Hoffman  |               767.19 |
| 2002 | Giovanni |              1713.23 |
| 2003 | Liu      |                75.75 |
| 2004 | Grass    |                75.75 |
| 2006 | Clemens  |               767.19 |
| 2007 | Pererira |               1900.1 |
| 2008 | Cisneros |                18.69 |
+------+----------+----------------------+


81) Write a query that selects the first customer in alphabetical order whose name begins with ‘G’. 
Expected Result:
The query should return all the roes feom customers table with cnum as 2002.

Approach:
I will use LIKE operator on canme column and LIMIT clause to get the answer.

Actual Result:
+------+----------+------+--------+------+
| cnum | cname    | city | rating | snum |
+------+----------+------+--------+------+
| 2002 | Giovanni | Rome |    200 | 1003 |
+------+----------+------+--------+------+


82) Write a query that counts the number of different non NULL city values in the customers table. 
Expected Result:
The query should return 4 as the answer. 

Approach:
Using COUNT() aggregate function on city column we get our desired answer. 

Actual Result:
+----------------------+
| COUNT(DISTINCT city) |
+----------------------+
|                    4 |
+----------------------+

83) Find the average amount from the Orders Table. 
Expected Result:
The query should return 2665.64 as the result.

Approach:
USing AVG() aggregate function on amt column we get the answer.

Actual Result:
+--------------------+
| Average_amount     |
+--------------------+
| 2665.6400000000003 |
+--------------------+

84) Find all customers who are not located in SanJose and whose rating is above 200. 
Expected Result:
The query should return all the rows from the customers table where cnum is 2004.

Approach:
Using WHERE clause on city column and NOT IN, AND operator we can get the answer.

Actual Result:
+------+-------+--------+--------+------+
| cnum | cname | city   | rating | snum |
+------+-------+--------+--------+------+
| 2004 | Grass | Berlin |    300 | 1002 |
+------+-------+--------+--------+------+


85) Give a simpler way to write this query.SELECT snum, sname, city, comm FROM salespeople WHERE (comm > + 0.12 OR comm < 0.14); 
Expected Result:
The query should return all the rows from salespeople table where snum is 1001, 1002.

Approach:
Using BETWEEN operator on comm column will get the result. 

Actual Result:
+------+--------+---------+------+
| snum | sname  | city    | comm |
+------+--------+---------+------+
| 1001 | Peel   | London  |   12 |
| 1002 | Serres | SanJose |   13 |
+------+--------+---------+------+

86) Which salespersons attend to customers not in the city they have been assigned to? 
Expected Result:
The query should return all the rows of salespeople table and cnum, cname, city with snum 1003, 1002, 1007, 1004

Approach:
Using left join on snum column between salespeople and customers table and where clause on city we can get the answer.

Actual Result:
+------+---------+-----------+------+------+----------+---------+
| snum | sname   | city      | comm | cnum | cname    | city    |
+------+---------+-----------+------+------+----------+---------+
| 1003 | AxelRod | New York  |   10 | 2002 | Giovanni | Rome    |
| 1002 | Serres  | SanJose   |   13 | 2004 | Grass    | Berlin  |
| 1007 | Rifkin  | Barcelona |   15 | 2008 | Cisneros | SanJose |
| 1004 | Motika  | London    |   11 | 2007 | Pererira | Rome    |
+------+---------+-----------+------+------+----------+---------+


87) Which salespeople get commission greater than 0.11 are serving customers rated less than 250? 
Expected Result:
The query should return all the rows of salespeople table and rating from customers table with snum as 1001, 1002.

Approach:
By using WHERE clasue and AND operator we can get the answer.

Actual Result:
+------+--------+---------+------+--------+
| snum | sname  | city    | comm | rating |
+------+--------+---------+------+--------+
| 1001 | Peel   | London  |   12 |    100 |
| 1002 | Serres | SanJose |   13 |    200 |
+------+--------+---------+------+--------+


88) Which salespeople have been assigned to the same city but get different commission percentages? 
Expected Result:
The query should return all the rows from salespeople table with snum as 1001, 1004, 1008.

Approach:
Using a subquery which returns city as rsult and IN operator will get the result.

Actual Result:
+------+--------+--------+------+
| snum | sname  | city   | comm |
+------+--------+--------+------+
| 1001 | Peel   | London |   12 |
| 1004 | Motika | London |   11 |
| 1008 | Fran   | London |   25 |
+------+--------+--------+------+


89) Which salesperson has earned the maximum commission? 
Expected Result:
The query should return sname, comm of Fran.

Approach:
using inner join between salespeople and orders table on snum column, group by clause on snum
column and order by clause in earned_money column with limit as 1 we can get the answer.

Actual Result:
+------+-------+--------+------+--------------+
| snum | sname | city   | comm | earned_money |
+------+-------+--------+------+--------------+
| 1001 | Peel  | London |   12 |      1845.84 |
+------+-------+--------+------+--------------+


90) Does the customer who has placed the maximum number of orders have the maximum rating? 
Expected Result:
The query should return cnum, rating, onum, orders_count for cnum 2008, 2004, 2006.

Approach:
Using subquery group by, having clause and max aggregate function we can get the answer.

Actual Result:
+------+----------+--------+--------+
| cnum | cname    | rating | orders |
+------+----------+--------+--------+
| 2004 | Grass    |    300 |      2 |
| 2006 | Clemens  |    100 |      2 |
| 2008 | Cisneros |    300 |      2 |
+------+----------+--------+--------+


91) List all customers in descending order of customer rating. 
Expected Result:
The result should return all the rows of customers table in descending order by rating.

Approach:
Using order by clause on rating column with DESC will get the result.

Actual Result:
+------+----------+---------+--------+------+
| cnum | cname    | city    | rating | snum |
+------+----------+---------+--------+------+
| 2004 | Grass    | Berlin  |    300 | 1002 |
| 2008 | Cisneros | SanJose |    300 | 1007 |
| 2002 | Giovanni | Rome    |    200 | 1003 |
| 2003 | liu      | SanJose |    200 | 1002 |
| 2001 | Hoffman  | London  |    100 | 1001 |
| 2006 | Clemens  | London  |    100 | 1001 |
| 2007 | Pereira  | Rome    |    100 | 1004 |
+------+----------+---------+--------+------+


92) On which days has Hoffman placed orders? 
Expected Result:
The query should return 10/03/90 as the result.

Approach:
Using a subquery which return cnum as result and using that result to compare with cnum in outer query to get the
date will fetch the answer.

Actual Result:
+----------+
| odate    |
+----------+
| 10/03/90 |
+----------+

if we want day on that date.
+-----------+
| day       |
+-----------+
| Wednesday |
+-----------+


93) Which salesmen have no orders between 10/03/1990 and 10/05/1990? 
Expected Result:
The query should return all the rows from salespeople where snum is 1008.

Approach:
Using inner join between salespeople and orders table on snum column and not between operator
we can get the answer.

Actual Result:
+------+--------+----------+
| snum | sname  | odate    |
+------+--------+----------+
| 1002 | Serres | 10/06/90 |
| 1001 | Peel   | 10/06/90 |
+------+--------+----------+


94) How many salespersons have succeeded in getting orders? 
Expected Result:
The query should return 5 as the answer.

Approach:
Using count aggregate function on snum column will get the result.

Actual Result:
+-----------------------+
| number_of_salesperson |
+-----------------------+
|                     5 |
+-----------------------+


95) How many customers have placed orders? 
Expected Result:
The query should return 7 as the answer.

Approach:
Using count aggregate function on cnum column will get the result.

Actual Result:
+---------------------+
| number_of_customers |
+---------------------+
|                   7 |
+---------------------+


96) On which date has each salesman booked an order of maximum value? 
Expected Result:
The query should return snum, sname, odate, amt of snum 1004, 1002, 1007, 1003, 1001.

Approach:
I have used inner join on subquery on snum column and the resultant is again inner joined with orders table 
on snum column to get the result.

Actual Result:
+------+---------+----------+---------+
| snum | sname   | odate    | amt     |
+------+---------+----------+---------+
| 1004 | Motika  | 10/03/90 |  1900.1 |
| 1002 | Serres  | 10/03/90 | 5160.45 |
| 1007 | Rifkin  | 10/03/90 | 1096.16 |
| 1003 | AxelRod | 10/04/90 | 1713.23 |
| 1001 | Peel    | 10/06/90 | 9891.88 |
+------+---------+----------+---------+

97) Who is the most successful salesperson? 
Expected Result:
The result is displayed on the basis the basis of total amount of order placed.
The query should return all the rows from salespeople table and maximum_amount for the salesperson.

Approach:
Using inner join between salespeople and orders table on snum column and group by, order by, limit clause 
we can get the desired amswer.

Actual Result:
+------+-------+--------+------+----------------+
| snum | sname | city   | comm | maximum_amount |
+------+-------+--------+------+----------------+
| 1001 | Peel  | London |   12 |       15382.07 |
+------+-------+--------+------+----------------+


98) Which customers have the same rating? 
Expected Result:
The query shoulf return first customer name, second customer name, rating of all those people who have the same rating.

Approach:
By using inner join on customer table with itself and using where clause on rating and cnum column we get the answer.

Actual Result:
+----------+--------+----------+--------+
| cname    | rating | cname    | rating |
+----------+--------+----------+--------+
| Pererira |    100 | Hoffman  |    100 |
| Clemens  |    100 | Hoffman  |    100 |
| Liu      |    200 | Giovanni |    200 |
| Giovanni |    200 | Liu      |    200 |
| Cisneros |    300 | Grass    |    300 |
| Pererira |    100 | Clemens  |    100 |
| Hoffman  |    100 | Clemens  |    100 |
| Grass    |    300 | Cisneros |    300 |
| Clemens  |    100 | Pererira |    100 |
| Hoffman  |    100 | Pererira |    100 |
+----------+--------+----------+--------+


99) Find all orders greater than the average for October 4th. 
Expected Result:
The query should return all the rows from orders table where onum is 3002, 3005, 3006, 3008, 3009, 3010, 3011.

Approach:
Using a subquery which return average as result and using that to compare with amt in outer query will get the result.

Actual Result:
+------+---------+----------+------+------+
| onum | amt     | odate    | cnum | snum |
+------+---------+----------+------+------+
| 3002 |  1900.1 | 10/03/90 | 2007 | 1004 |
| 3005 | 5160.45 | 10/03/90 | 2003 | 1002 |
| 3006 | 1096.16 | 10/03/90 | 2008 | 1007 |
| 3008 |    4723 | 10/05/90 | 2005 | 1001 |
| 3009 | 1713.23 | 10/04/90 | 2002 | 1003 |
| 3010 | 1309.95 | 10/06/90 | 2004 | 1002 |
| 3011 | 9891.88 | 10/06/90 | 2006 | 1001 |
+------+---------+----------+------+------+

100) List all customers with ratings above Grass’s average. 
Expected Result:
The query should return empty set as output.

Approach:
Using a subquery which return average rating for the cname = 'Grass' and in the outer query using it to compare 
with rating we get the desired result.

Actual Result:
Empty set (0.00 sec)


101) Which customers have above average orders? 
Expected Result:
The query should return all rows from customers table where cnum is 2003, 2006.

Approach:
Using 2 subqueries and AVG aggregate function and IN operator and WHERE clause we can get the desired results.

Actual Result:
+------+---------+---------+--------+------+
| cnum | cname   | city    | rating | snum |
+------+---------+---------+--------+------+
| 2003 | Liu     | SanJose |    200 | 1002 |
| 2006 | Clemens | London  |    100 | 1001 |
+------+---------+---------+--------+------+


102) Select the total amount in orders for each salesperson for which the total is greater than the amount of the largest order in the table. 
Expected Result:
The query should return snum, sname, maximum_amount for peel.

Appraoch:
We can use select statement with where condition, SUM function, INNER JOIN and a subquery  to get largest 
amount of order table and use group by clause on snum column to get the answer.

Actual Result:
+------+-------+----------------+
| snum | sname | maximum_amount |
+------+-------+----------------+
| 1001 | Peel  |       15382.07 |
+------+-------+----------------+

103) Give names and numbers of all salespersons that have more than one customer? 

Expected Result:
The query should return sname, snum of 1001, 1002.

Approach:
by using a subquery which uses Group by on snum column and Having return snum as answer which will be used in 
outer query with IN operator to get the answer.

Actual Result:
+--------+------+
| sname  | snum |
+--------+------+
| Peel   | 1001 |
| Serres | 1002 |
+--------+------+


104) Select all salespeople by name and number who have customers in their city whom they don’t service. 

Expected Result:
The query should return sname, snum of 1008, 1004, 1002 as output.

Appraoch:
Using select statement on sname, snum WHERE clause on city and snum column will get the answer.  

Actual Result:
+--------+------+
| sname  | snum |
+--------+------+
| Fran   | 1008 |
| Motika | 1004 |
| Serres | 1002 |
+--------+------+

105) Does the total amount in orders by customer in Rome and London, exceed the commission paid to salesperson in London, and New York by more than 5 times? 
Expected Result:
The query should return 13489.15 in the first column and 11130.9 in the second column.

Approach:
We will use subquery to get the customer number city Rome and London then sum amount of only those orders where the 
customer number matches.Similarly for London and New York calculate the commission and multiply it by 5.

Actual Result:
+----------------------------+-----------------------------+
| maximmum_order_Rome_London | maximum_comm_NewYork_London |
+----------------------------+-----------------------------+
|                   13489.15 |                     11130.9 |
+----------------------------+-----------------------------+

106) Which are the date, order number, amt and city for each salesperson (by name) for themaximum order he has obtained? 
Expected Result:
The query should return sname, odate, onum, amt, city where onum is 3002, 3005, 3006, 3009, 3011.

Appraoch:
Using inner join on salespeople and orders table on snum column and the rsultant to be again inner joined 
with customers table on cnum columm and a subquery which uses group by on snum columm return snum and max_amount 
as result to outer query and in outer query we will use where clause to get the answer.

Actual Result:
+---------+----------+------+---------+---------+
| sname   | odate    | onum | amt     | city    |
+---------+----------+------+---------+---------+
| Motika  | 10/03/90 | 3002 |  1900.1 | SanJose |
| Serres  | 10/03/90 | 3005 | 5160.45 | SanJose |
| Rifkin  | 10/03/90 | 3006 | 1096.16 | Rome    |
| AxelRod | 10/04/90 | 3009 | 1713.23 | Rome    |
| Peel    | 10/06/90 | 3011 | 9891.88 | London  |
+---------+----------+------+---------+---------+
5 rows in set (0.01 sec)


107) Which salesperson is having lowest commission? 
Expected Result:
The query should return all the rows from salespeople table where snum is 1003.

Approach:
I will use a subquery which will return the minimum value of commission and use where clause in outer query which 
will compare it with comm and get the answer.

Actual Result:
+---------+------+
| sname   | comm |
+---------+------+
| AxelRod |   10 |
+---------+------+