
Salespeople Table

+------+---------+------------+------+
| SNUM | SNAME   | CITY       | COMM |
+------+---------+------------+------+
| 1001 | Peel    | London     |   12 |
| 1002 | Serres  | SanJose    |   13 |
| 1003 | AxelRod | New York   |   10 |
| 1004 | Motika  | London     |   11 |
| 1007 | Rifkin  | Barcenlona |   15 |
| 1008 | Fran    | London     |   25 |
+------+---------+------------+------+


Customers Table

+------+----------+---------+--------+------+
| CNUM | CNAME    | CITY    | RATING | SNUM |
+------+----------+---------+--------+------+
| 2001 | Hoffman  | London  |    100 | 1001 |
| 2002 | Giovanni | Rome    |    200 | 1003 |
| 2003 | Liu      | Sanjose |    200 | 1002 |
| 2004 | Grass    | Berlin  |    300 | 1002 |
| 2006 | Clemens  | London  |    100 | 1001 |
| 2008 | Cisneros | SanJose |    300 | 1007 |
| 2007 | Pereira  | Rome    |    100 | 1004 |
+------+----------+---------+--------+------+


Orders Table

+------+---------+------------+------+------+
| ONUM | AMT     | ODATE      | CNUM | SNUM |
+------+---------+------------+------+------+
| 3001 |   18.69 | 1990-03-10 | 2008 | 1007 |
| 3003 |  767.19 | 1990-03-10 | 2001 | 1001 |
| 3002 |  1900.1 | 1990-03-10 | 2007 | 1004 |
| 3005 | 5160.45 | 1990-03-10 | 2003 | 1002 |
| 3006 | 1098.16 | 1990-03-10 | 2008 | 1007 |
| 3009 | 1713.23 | 1990-04-10 | 2002 | 1003 |
| 3007 |   75.75 | 1990-04-10 | 2004 | 1002 |
| 3008 |    4723 | 1990-05-10 | 2006 | 1001 |
| 3010 | 1309.95 | 1990-06-10 | 2004 | 1002 |
| 3011 | 9891.88 | 1990-06-10 | 2006 | 1001 |
+------+---------+------------+------+------+

1) List all the columns of the Salespeople table. 

Approach: using desc command or show coloumns command to list the coloumns of salespeople table, alternatively we can use INFORMATION_SCHEMA.COLUMNS to display column of spacified table

Expected Output: All the column names of the salespeople table.

+-------+--------------+------+-----+---------+-------+
| Field | Type         | Null | Key | Default | Extra |
+-------+--------------+------+-----+---------+-------+
| SNUM  | int          | NO   | PRI | NULL    |       |
| SNAME | varchar(100) | YES  |     | NULL    |       |
| CITY  | varchar(100) | YES  |     | NULL    |       |
| COMM  | int          | YES  |     | NULL    |       |
+-------+--------------+------+-----+---------+-------+

Table involved: Salespeople



2) List all customers with a rating of 100. 

Approach: using where clause to select the customers with rating of 100

Expected Output:All columns of customer table with all the customers with 100 rating.

+---------+
| CNAME   |
+---------+
| Hoffman |
| Clemens |
| Pereira |
+---------+

Table involved: Customers



3) Find the largest order taken by each salesperson on each date. 

Approach: selecting the date, salesperson name, and maximum order amount from orders table joined with salespeople table, grouped by date and salesperson.

Expected Output: odate from orders and sname from salespeople table containing Largest order taken by each salesperson on each date.

+------------+---------+------------+
| odate      | sname   | max(o.amt) |
+------------+---------+------------+
| 1990-03-10 | Rifkin  |    1098.16 |
| 1990-03-10 | Peel    |     767.19 |
| 1990-03-10 | Motika  |     1990.1 |
| 1990-03-10 | Serres  |    5160.45 |
| 1990-04-10 | AxelRod |    1713.23 |
| 1990-04-10 | Serres  |      75.75 |
| 1990-05-10 | Peel    |       4723 |
| 1990-06-10 | Serres  |    1309.95 |
| 1990-06-10 | Peel    |    9891.88 |
+------------+---------+------------+

Table involved: Salespeople, Orders



4) Arrange the Order table by descending customer number. 

Approach: Using order by to siaplay teh customer table in descending order by cnum

Expected Output:  All the columns of the orders table are in descending of the customer number.
Actual Output:

+------+---------+------------+------+------+
| ONUM | AMT     | ODATE      | CNUM | SNUM |
+------+---------+------------+------+------+
| 3001 |   18.69 | 1990-03-10 | 2008 | 1007 |
| 3006 | 1098.16 | 1990-03-10 | 2008 | 1007 |
| 3002 |  1990.1 | 1990-03-10 | 2007 | 1004 |
| 3008 |    4723 | 1990-05-10 | 2006 | 1001 |
| 3011 | 9891.88 | 1990-06-10 | 2006 | 1001 |
| 3007 |   75.75 | 1990-04-10 | 2004 | 1002 |
| 3010 | 1309.95 | 1990-06-10 | 2004 | 1002 |
| 3005 | 5160.45 | 1990-03-10 | 2003 | 1002 |
| 3009 | 1713.23 | 1990-04-10 | 2002 | 1003 |
| 3003 |  767.19 | 1990-03-10 | 2001 | 1001 |
+------+---------+------------+------+------+

Table involved: Orders



5) Find which salespeople currently have orders in the order table. 

Approach:  

Selecting the snum (salesperson number) and sname (salesperson name) columns from the salespeople table where the snum is found in the result of a subquery. 

Expected Output:  snum and sname from salespeoples table and tuples currently have orders in the order table. 

+------+---------+
| snum | sname   |
+------+---------+
| 1001 | Peel    |
| 1002 | Serres  |
| 1003 | AxelRod |
| 1004 | Motika  |
| 1007 | Rifkin  |
+------+---------+

Tables involved: Salespeople



6) List names of all customers matched with the salespeople serving them. 

Approach:   We can use inner join on salespeople and customer table on salespeople number to list names of all customers matched with the salespeople serving them.

Expected Output: cname and sname from customers and salespoeple table containing names of all customers matched with the salespeople serving them.

+----------+---------+
| cname    | sname   |
+----------+---------+
| Hoffman  | Peel    |
| Giovanni | AxelRod |
| Liu      | Serres  |
| Grass    | Serres  |
| Clemens  | Peel    |
| Cisneros | Rifkin  |
| Pereira  | Motika  |
+----------+---------+

Tables involved: Salespeople



7) Find the names and numbers of all salespeople who have more than one customer. 

Approach:  Selecting the name and num of salesperson whose snum is found in result of subquery or we can use inner join with group by and having clause.

Expected Output:  Names and numbers of all salespeople who have more than one customer.

+--------+------+
| sname  | snum |
+--------+------+
| Peel   | 1001 |
| Serres | 1002 |
+--------+------+

Tables involved: Salespeople



8) Count the orders of each of the salespeople and output the results in descending order. 

Approach: Join orders and salespeople tables, group by salesperson, count orders, and sort in descending order.

Expected output: salespeople's name,number along with the number of orders they have taken in descending order

+------+---------+---------------+
| snum | sname   | count(o.snum) |
+------+---------+---------------+
| 1001 | Peel    |             3 |
| 1002 | Serres  |             3 |
| 1007 | Rifkin  |             2 |
| 1004 | Motika  |             1 |
| 1003 | AxelRod |             1 |
+------+---------+---------------+

Tables involved: Orders, Salespeople



9) List the customer table if and only if one or more of the customers in the Customer table are located in SanJose. 

Approach: 

This SQL query selects all the rows from the customers table only if the count of customers located in SanJose is greater than 1. It uses a subquery to count the number of customers in SanJose and then compares the count to 1 in the WHERE clause of the main query.

Expected Output: customer number, name, city, rating from customers table along with salespeople number

+------+----------+---------+--------+------+
| CNUM | CNAME    | CITY    | RATING | SNUM |
+------+----------+---------+--------+------+
| 2001 | Hoffman  | London  |    100 | 1001 |
| 2002 | Giovanni | Rome    |    200 | 1003 |
| 2003 | Liu      | Sanjose |    200 | 1002 |
| 2004 | Grass    | Berlin  |    300 | 1002 |
| 2006 | Clemens  | London  |    100 | 1001 |
| 2008 | Cisneros | SanJose |    300 | 1007 |
| 2007 | Pereira  | Rome    |    100 | 1004 |
+------+----------+---------+--------+------+

Tables involved: Customers



10) Match salespeople to customers according to what city they live in. 

Approach:Join salespeople and customers table based on city to show salesperson name, customer name and city.

Expected Output:  All customer and salespeople who has same city .

+--------+----------+---------+
| sname  | cname    | city    |
+--------+----------+---------+
| Fran   | Hoffman  | London  |
| Motika | Hoffman  | London  |
| Peel   | Hoffman  | London  |
| Serres | Liu      | SanJose |
| Fran   | Clemens  | London  |
| Motika | Clemens  | London  |
| Peel   | Clemens  | London  |
| Serres | Cisneros | SanJose |
+--------+----------+---------+

Tables involved: Customers, Salespeople



11) Find all the customers in SanJose who have a rating above 200. 

Approach : Select all columns from customers table where the city is "SanJose" and rating is greater than 200.

Expected Output: customers details who has rating above 200 and his/her city is sanJose

+------+----------+---------+--------+------+
| CNUM | CNAME    | CITY    | RATING | SNUM |
+------+----------+---------+--------+------+
| 2008 | Cisneros | SanJose |    300 | 1007 |
+------+----------+---------+--------+------+

Tables involved: Customers



12) List the names and commissions of all salespeople in London. 

Approach: Select salesperson name and commission from salespeople table where city is "London".


Expected Output: name and comm of salespeople who are in London city

+--------+------+
| sname  | comm |
+--------+------+
| Peel   |   12 |
| Motika |   11 |
| Fran   |   25 |
+--------+------+

Tables involved: Salespeople



13) List all the orders of Salesperson Motika from the orders table.


Approach: Select all columns from orders table where snum matches the snum of the salesperson named "Motika".


Expected Output: all orders of salespeople named Motika

+------+--------+------------+------+------+
| ONUM | AMT    | ODATE      | CNUM | SNUM |
+------+--------+------------+------+------+
| 3002 | 1990.1 | 1990-03-10 | 2007 | 1004 |
+------+--------+------------+------+------+

Tables involved: Salespeople, Orders



14) Find all customers who booked orders on October 3. 


Approach: Select all distinct customer names from customers table who booked an order on October 3, based on the matching cnum in the orders table with odate equal to "1990-03-10".


Expeced Output: name of all the customer who ordered on 3rd of october.

+----------+
| cname    |
+----------+
| Hoffman  |
| Liu      |
| Cisneros |
| Pereira  |
+----------+

Tables involved: Customers, Orders



15) Give the sums of the amounts from the Orders table, grouped by date, eliminating all those dates where the SUM was not at least 2000 above the maximum Amount. 

Approach: Select the order date, maximum order amount, and total order amount from orders table, group by date and filter out dates where the difference between the sum of amounts and the maximum amount is less than 2000.

or, if we take maximim amount as max amt of whole orders table,  We can select odate and sum(amt) and group by date and filter the entries sum of amt is greater than 2000 + max(amt).


Expected Output:

+------------+----------+----------+
| odate      | max(amt) | sum(amt) |
+------------+----------+----------+
| 1990-03-10 |  5160.45 |  8944.59 |
+------------+----------+----------+

or

Empty set (0.0008 sec)

Tables involved: Orders



16) Select all orders that had amounts that were greater than at least one of the orders from October 6. 

Approach: Select all columns from orders table where amount is greater than any amount from orders placed on October 6, identified by the matching odate equal to "1990-06-10" in the subquery.


Expected Result: Orders with a greater amount from the 6th of October orders

+------+---------+------------+------+------+
| ONUM | AMT     | ODATE      | CNUM | SNUM |
+------+---------+------------+------+------+
| 3002 |  1900.1 | 1990-03-10 | 2007 | 1004 |
| 3005 | 5160.45 | 1990-03-10 | 2003 | 1002 |
| 3009 | 1713.23 | 1990-04-10 | 2002 | 1003 |
| 3008 |    4723 | 1990-05-10 | 2006 | 1001 |
| 3011 | 9891.88 | 1990-06-10 | 2006 | 1001 |
+------+---------+------------+------+------+

Tables involved: Orders



17) Write a query that uses the EXISTS operator to extract all salespeople who have customers with a rating of 300.


Approach: We will use sub-query and exists operator as mentioned in the question with condition of rating and matching the salespeople number from both the table

Expected Result: salespeople name and number of those salespeople who has customers with 300 rating.

+--------+------+
| sname  | snum |
+--------+------+
| Serres | 1002 |
| Rifkin | 1007 |
+--------+------+

Tables involved: Salespeople, Customers



18) Find all customers whose cnum is 1000 above the snum of Serres. 

Approach: Select customer name and number from customers table where cnum is greater than 1000 plus the snum of the salesperson named "Serres".

Expected: customer name, number, with salespeople name, number who satisfies the condition

+----------+------+
| cname    | cnum |
+----------+------+
| Liu      | 2003 |
| Grass    | 2004 |
| Clemens  | 2006 |
| Cisneros | 2008 |
| Pereira  | 2007 |
+----------+------+

Tables involved: Salespeople, Customers



19) Give the salespeople’s commissions as percentages instead of decimal numbers. 

Approach: Select salesperson name and commission as a percentage, by concatenating the commission column with the "%" symbol, from salespeople table.

Expected Output: All the entries of the salespeople table with comm column with '%'

+---------+-----------+
| sname   | Commision |
+---------+-----------+
| Peel    | 12%       |
| Serres  | 13%       |
| AxelRod | 10%       |
| Motika  | 11%       |
| Rifkin  | 15%       |
| Fran    | 25%       |
+---------+-----------+

Tables involved: Salespeople



20) Find the largest order taken by each salesperson on each date, eliminating those Maximum orders, which are less than 3000.


Approach:Select the salesperson name, maximum order amount and date from salespeople and orders table, group by date and salesperson, and filter out the maximum order amounts less than 3000.

Expected Output: All the orders with greater than 3000 on each date

+--------+------------+------------+
| sname  | max(o.amt) | odate      |
+--------+------------+------------+
| Serres |    5160.45 | 1990-03-10 |
| Peel   |       4723 | 1990-05-10 |
| Peel   |    9891.88 | 1990-06-10 |
+--------+------------+------------+

Tables involved: Salespeople, Orders



21) List all the largest orders for October 3, for each salesperson. 

Approach: Select the salesperson name, maximum order amount and date from salespeople and orders table, group by date and salesperson, and filter out the maximum order amounts less than 3000.

Expected Output: All the largest orders on the 3rd of October for each salesperson

+--------+------------+
| sname  | max(o.amt) |
+--------+------------+
| Rifkin |    1098.16 |
| Peel   |     767.19 |
| Motika |     1900.1 |
| Serres |    5160.45 |
+--------+------------+

Tables involved: Salespeople, Orders



22) Find all customers located in cities where Serres has customers. 

Approach: We can use inner join on customers and salespeople table on salespeople number with where condition on salespeople name 'Serres'

Expected Output: All the customers in the city of Serres

+------+----------+
| cnum | cname    |
+------+----------+
| 2003 | Liu      |
| 2004 | Grass    |
| 2008 | Cisneros |
+------+----------+

Tables involved: Salespeople, Customers



23) Select all customers with a rating above 200. 


Approach:Select all columns from customers table where the rating is greater than 200.

Expected Output: All the column of customer table with rating greater than 2000

+------+----------+---------+--------+------+
| CNUM | CNAME    | CITY    | RATING | SNUM |
+------+----------+---------+--------+------+
| 2004 | Grass    | Berlin  |    300 | 1002 |
| 2008 | Cisneros | SanJose |    300 | 1007 |
+------+----------+---------+--------+------+

Tables involved: Customers



24) Count the number of salespeople currently having orders in the orders table. 


Approach:

Count the number of unique salesperson numbers (snum) in the orders table, using distinct, and rename the output column as "No of saleseperson with orders".

Expected Output: Number of salespeople who have an order 

+--------------------------------+
| No of saleseperson with orders |
+--------------------------------+
|                              5 |
+--------------------------------+

Tables involved: Customers



25) Write a query that produces all customers serviced by salespeople with a commission above 12%. Output the customer’s name, salesperson’s name and the salesperson’s rate of commission. 

Approach: We will select the customer name, salespeople name and commission from the inner join of the customer and salespeople table on the salespeople column with the condition on commissions above 12%

Expected Output: Customers names, Salespeople name, and commission who have commission above 12%

+----------+--------+------+
| cname    | sname  | comm |
+----------+--------+------+
| Liu      | Serres |   13 |
| Grass    | Serres |   13 |
| Cisneros | Rifkin |   15 |
+----------+--------+------+

Tables involved: Salespeople,Customers



26) Find salespeople who have multiple customers. 


Approach: Join salespeople and customers tables on snum, count number of customers for each salesperson, and filter out those with a count greater than 1.

Expected Output:All the details from the salespeople table who has more than 1 customer.

+--------+---------------+
| sname  | count(c.cnum) |
+--------+---------------+
| Peel   |             2 |
| Serres |             2 |
+--------+---------------+

Tables involved: Salespeople, Customers



27) Find salespeople with customers located in their own cities. 


Approach:  We will use inner join on salespeople and customer table on condition on same city and salespeople and use distinct to remove repetating salespeople

Expected Output: name, number, and city of the salespersons and customers who have the same city.

+--------+------+
| sname  | snum |
+--------+------+
| Peel   | 1001 |
| Serres | 1002 |
+--------+------+

Tables involved: Salespeople, Customers



28) Find all salespeople whose name starts with ‘P’ and fourth character is ‘I’. 


Approach: 

Select salespeople whose name starts with 'P' and fourth character is 'I', using the LIKE operator with two wildcards ('_') to represent the second and third character

Expected Output: All the details of salespeople who have 'P' at the starting and 'I' at the 4th position.

Empty set (0.0007 sec)

Tables involved: Salespeople



29) Write a query that uses a subquery to obtain all orders for the customer named ‘Cisneros’. Assume you do not know his customer number. 


Approach: Obtain all orders for customer named 'Cisneros' by using a subquery that retrieves the customer number from the customers table, and then using the IN operator to filter orders with that customer number.

Expected Output: All the orders which is placed by ‘Cisneros’

+------+---------+------------+------+------+
| ONUM | AMT     | ODATE      | CNUM | SNUM |
+------+---------+------------+------+------+
| 3001 |   18.69 | 1990-03-10 | 2008 | 1007 |
| 3006 | 1098.16 | 1990-03-10 | 2008 | 1007 |
+------+---------+------------+------+------+

Tables involved: Salespeople, Orders, Customers



30) Find the largest orders for Serres and Rifkin. 


Approach: Join the salespeople and orders tables on snum, group by sname, filter rows with sname as Serres or Rifkin, and use the MAX function to retrieve the largest order amount.

Expected Output: name and number of Serres and Rifkin with largest amount.

+--------+------------+
| sname  | max(o.amt) |
+--------+------------+
| Rifkin |    1098.16 |
| Serres |    5160.45 |
+--------+------------+

Tables involved: Salespeople, Orders



31) Sort the salespeople table in the following order: snum, sname, commission, city. 


Approach: Sort the salespeople table in ascending order by snum, sname, commission, and city using the ORDER BY clause.

Expected Output: snum, sname, comm, and city sorted accordingly.

+------+---------+------------+------+
| SNUM | SNAME   | CITY       | COMM |
+------+---------+------------+------+
| 1001 | Peel    | London     |   12 |
| 1002 | Serres  | SanJose    |   13 |
| 1003 | AxelRod | New York   |   10 |
| 1004 | Motika  | London     |   11 |
| 1007 | Rifkin  | Barcenlona |   15 |
| 1008 | Fran    | London     |   25 |
+------+---------+------------+------+

Tables involved: Salespeople



32) Select all customers whose names fall in between ‘A’ and ‘G’ alphabetical range. 

Approach: Select all customers whose names start with letters between 'A' and 'G' (inclusive) using the BETWEEN operator with wildcard character ('%').

Expected Outptut: All the details of customers whose names comes between a and g

+------+----------+---------+--------+------+
| CNUM | CNAME    | CITY    | RATING | SNUM |
+------+----------+---------+--------+------+
| 2002 | Giovanni | Rome    |    200 | 1003 |
| 2004 | Grass    | Berlin  |    300 | 1002 |
| 2006 | Clemens  | London  |    100 | 1001 |
| 2008 | Cisneros | SanJose |    300 | 1007 |
+------+----------+---------+--------+------+

Tables involved: Customers



33) Select all the possible combinations of customers you can assign. 

Approach: Select all possible combinations of customers and salespeople using the CROSS JOIN operator, which produces a Cartesian product of all rows in both tables.

Expected Outptut:all the possible combinations of customers with salespeople

+----------+---------+
| cname    | sname   |
+----------+---------+
| Hoffman  | Fran    |
| Hoffman  | Rifkin  |
| Hoffman  | Motika  |
| Hoffman  | AxelRod |
| Hoffman  | Serres  |
| Hoffman  | Peel    |
| Giovanni | Fran    |
| Giovanni | Rifkin  |
| Giovanni | Motika  |
| Giovanni | AxelRod |
| Giovanni | Serres  |
| Giovanni | Peel    |
| Liu      | Fran    |
| Liu      | Rifkin  |
| Liu      | Motika  |
| Liu      | AxelRod |
| Liu      | Serres  |
| Liu      | Peel    |
| Grass    | Fran    |
| Grass    | Rifkin  |
| Grass    | Motika  |
| Grass    | AxelRod |
| Grass    | Serres  |
| Grass    | Peel    |
| Clemens  | Fran    |
| Clemens  | Rifkin  |
| Clemens  | Motika  |
| Clemens  | AxelRod |
| Clemens  | Serres  |
| Clemens  | Peel    |
| Cisneros | Fran    |
| Cisneros | Rifkin  |
| Cisneros | Motika  |
| Cisneros | AxelRod |
| Cisneros | Serres  |
| Cisneros | Peel    |
| Pereira  | Fran    |
| Pereira  | Rifkin  |
| Pereira  | Motika  |
| Pereira  | AxelRod |
| Pereira  | Serres  |
| Pereira  | Peel    |
+----------+---------+


Tables involved: Salespeople, Customers



34) Select all orders that are greater than the average for October 4. 

Approach: Select all orders with an amount greater than the average amount for October 4, 1990. Use a subquery to calculate the average amount for that date and then use it to filter the orders table.

Expected Outptut:  All the details of orders where order amt is greater than avg order on october 4th

+------+---------+------------+------+------+
| ONUM | AMT     | ODATE      | CNUM | SNUM |
+------+---------+------------+------+------+
| 3002 |  1900.1 | 1990-03-10 | 2007 | 1004 |
| 3005 | 5160.45 | 1990-03-10 | 2003 | 1002 |
| 3006 | 1098.16 | 1990-03-10 | 2008 | 1007 |
| 3009 | 1713.23 | 1990-04-10 | 2002 | 1003 |
| 3008 |    4723 | 1990-05-10 | 2006 | 1001 |
| 3010 | 1309.95 | 1990-06-10 | 2004 | 1002 |
| 3011 | 9891.88 | 1990-06-10 | 2006 | 1001 |
+------+---------+------------+------+------+

Tables involved: Orders



35) Write a select command using correlated subquery that selects the names and numbers of all customers with ratings equal to the maximum for their city. 

Approach:  We will use correlated sub-query in which select city and maximum rating of customer of each cities and retrieve number, name from customsers table on the basis city and rating.

Expected Output: Names and numbers of all customers with ratings equal to the maximum for their city

+----------+------+
| cname    | cnum |
+----------+------+
| Hoffman  | 2001 |
| Giovanni | 2002 |
| Grass    | 2004 |
| Clemens  | 2006 |
| Cisneros | 2008 |
+----------+------+

Tables involved: Customers



36) Write a query that totals the orders for each day and places the results in descending order. 

Approach: Total the orders for each day using the SUM function and group the results by odate. Sort the results in descending order by the total amount of orders using the ORDER BY clause.

Expected output: Order date and sum of total amount on each day.

+------------+------------+
| sum(o.amt) | odate      |
+------------+------------+
|   11201.83 | 1990-06-10 |
|    8944.59 | 1990-03-10 |
|       4723 | 1990-05-10 |
|    1788.98 | 1990-04-10 |
+------------+------------+

Tables involved: Orders



37) Write a select command that produces the rating followed by the name of each customer in SanJose. 


Approach: Select the name and rating of each customer located in SanJose from the customers table using a simple WHERE clause.

Expected Output:rating and customers name of Liu and Cisneros who are from SanJose city.

+----------+--------+
| cname    | rating |
+----------+--------+
| Liu      |    200 |
| Cisneros |    300 |
+----------+--------+

Tables involved: Customers



38) Find all orders with amounts smaller than any amount for a customer in SanJose. 

Approach: Find all orders with amounts smaller than the smallest amount for any customer in SanJose using the ANY and subquery operators. The subquery retrieves the amounts for all customers in SanJose, and the outer query selects orders with an amount smaller than the smallest amount from the subquery.

Expected Output: All the orders details which has smaller amount from any one orders from SanJose city

+------+---------+------------+------+------+
| ONUM | AMT     | ODATE      | CNUM | SNUM |
+------+---------+------------+------+------+
| 3001 |   18.69 | 1990-03-10 | 2008 | 1007 |
| 3003 |  767.19 | 1990-03-10 | 2001 | 1001 |
| 3002 |  1900.1 | 1990-03-10 | 2007 | 1004 |
| 3006 | 1098.16 | 1990-03-10 | 2008 | 1007 |
| 3009 | 1713.23 | 1990-04-10 | 2002 | 1003 |
| 3007 |   75.75 | 1990-04-10 | 2004 | 1002 |
| 3008 |    4723 | 1990-05-10 | 2006 | 1001 |
| 3010 | 1309.95 | 1990-06-10 | 2004 | 1002 |
+------+---------+------------+------+------+

Tables involved: Orders, Customers



39) Find all orders with above average amounts for their customers. 


Approach: Find all orders with amounts greater than the average amount for their respective customer using a correlated subquery. The subquery calculates the average amount for each customer, and the outer query selects orders with amounts greater than their respective average amounts.

Expected Output: Details of order whose amout is greater than average amount of all order

+------+---------+------------+------+------+
| ONUM | AMT     | ODATE      | CNUM | SNUM |
+------+---------+------------+------+------+
| 3006 | 1098.16 | 1990-03-10 | 2008 | 1007 |
| 3010 | 1309.95 | 1990-06-10 | 2004 | 1002 |
| 3011 | 9891.88 | 1990-06-10 | 2006 | 1001 |
+------+---------+------------+------+------+

Tables involved: Orders



40) Write a query that selects the highest rating in each city. 


Approach: Select the highest rating in each city from the customers table using the MAX function and GROUP BY clause.

Expected Output: Highest rating and city column from customers table by each city.

+---------+-------------+
| city    | max(rating) |
+---------+-------------+
| London  |         100 |
| Rome    |         200 |
| Sanjose |         300 |
| Berlin  |         300 |
+---------+-------------+

Tables involved: Customers



41) Write a query that calculates the amount of the salesperson’s commission on each order by a customer with a rating above 100.00.


Approach: Calculate the amount of the salesperson's commission on each order made by a customer with a rating above 100 using a join between the salespeople, customers, and orders tables. Use the commission rate, the order amount, and the rating to calculate the commission amount for each order.

Expected Output: customer name, rating, amt, salespeople name with commission in percentage and the calculated commission of that salespeople

+---------+----------+--------+--------------------+
| sname   | cname    | rating | (comm* amt)/100    |
+---------+----------+--------+--------------------+
| Rifkin  | Cisneros |    300 |             2.8035 |
| Serres  | Liu      |    200 |  670.8584999999999 |
| Rifkin  | Cisneros |    300 | 164.72400000000002 |
| AxelRod | Giovanni |    200 | 171.32299999999998 |
| Serres  | Grass    |    300 |             9.8475 |
| Serres  | Grass    |    300 | 170.29350000000002 |
+---------+----------+--------+--------------------+

Tables involved: Salespeople, Orders, Customers



42) Count the customers with ratings above SanJose’s average. 

Approach: Count the number of customers with ratings above SanJose's average using a subquery that calculates the average rating for customers in SanJose and a WHERE clause to filter the customers with ratings greater than the average rating.

Expected Output:Count of customers with ratings above SanJose’s average. 

+-------------+
| count(cnum) |
+-------------+
|           2 |
+-------------+

Tables involved: Customers



43) Find all salespeople that are located in either Barcelona or London. 

Approach: Find all salespeople located in either Barcelona or London using a WHERE clause to filter the salespeople by city:

Expected Output: Details of salespeople who belongs to either Barcelona or London

+------+--------+------------+------+
| SNUM | SNAME  | CITY       | COMM |
+------+--------+------------+------+
| 1001 | Peel   | London     |   12 |
| 1004 | Motika | London     |   11 |
| 1007 | Rifkin | Barcenlona |   15 |
| 1008 | Fran   | London     |   25 |
+------+--------+------------+------+

Tables involved: Salespeople



44) Find all salespeople with only one customer. 

Approach: Select snum,sname of salespeople with only one customer using a subquery to count customers per salesperson and filter with "having" clause.

Expected Output: Salespeople number, name of salespeople who has single customer

+------+---------+
| snum | sname   |
+------+---------+
| 1003 | AxelRod |
| 1004 | Motika  |
| 1007 | Rifkin  |
+------+---------+

Tables involved: Customers



45) Write a query that joins the Customer table to itself to find all pairs or customers served by a single salesperson.  

Approach: Join Customer table to itself and Salespeople table, match on snum, and filter for pairs of customers with the same salesperson and different cnum using inequality and ordering.


Expected Output: customer namea, salespeople name who are served by single salespeople.

+---------+---------+--------+
| cname   | cname   | sname  |
+---------+---------+--------+
| Hoffman | Clemens | Peel   |
| Liu     | Grass   | Serres |
+---------+---------+--------+

Tables involved: Salespeople,Customers



46) Write a query that will give you all orders for more than $1000.00. 

Approach: Select all orders with a total amount greater than amount 1000 from the orders table using the "where" clause.

Expected Output: All the details of orders having amount greater than 1000

+------+---------+------------+------+------+
| ONUM | AMT     | ODATE      | CNUM | SNUM |
+------+---------+------------+------+------+
| 3002 |  1900.1 | 1990-03-10 | 2007 | 1004 |
| 3005 | 5160.45 | 1990-03-10 | 2003 | 1002 |
| 3006 | 1098.16 | 1990-03-10 | 2008 | 1007 |
| 3009 | 1713.23 | 1990-04-10 | 2002 | 1003 |
| 3008 |    4723 | 1990-05-10 | 2006 | 1001 |
| 3010 | 1309.95 | 1990-06-10 | 2004 | 1002 |
| 3011 | 9891.88 | 1990-06-10 | 2006 | 1001 |
+------+---------+------------+------+------+

Tables involved: Orders



47) Write a query that lists each order number followed by the name of the customer who made that order. 

Approach: Join the orders table with the customers table on cnum and select the cname and onum columns, grouping by cname and onum to list each order number with the name of the customer who made it.

Expected Output: Order number along with customer name of each order

+----------+------+
| cname    | onum |
+----------+------+
| Cisneros | 3001 |
| Hoffman  | 3003 |
| Pereira  | 3002 |
| Liu      | 3005 |
| Cisneros | 3006 |
| Giovanni | 3009 |
| Grass    | 3007 |
| Clemens  | 3008 |
| Grass    | 3010 |
| Clemens  | 3011 |
+----------+------+

Tables involved: Orders, Customers



48) Write a query that selects all the customers whose ratings are equal to or greater than ANY(in the SQL sense) of ‘Serres’. 

Approach: Select all customers whose rating is greater than or equal to any rating associated with salespeople named "Serres", using a subquery to find the ratings and snum values of those salespeople.

Expected Output: All the columns from customer table who has greater rating than Serres.

+------+----------+---------+--------+------+
| CNUM | CNAME    | CITY    | RATING | SNUM |
+------+----------+---------+--------+------+
| 2002 | Giovanni | Rome    |    200 | 1003 |
| 2003 | Liu      | Sanjose |    200 | 1002 |
| 2004 | Grass    | Berlin  |    300 | 1002 |
| 2008 | Cisneros | SanJose |    300 | 1007 |
+------+----------+---------+--------+------+

Tables involved: Salespeople, Customers



49) Write two queries that will produce all orders taken on October 3 or October 4.

Approach: Select all orders with an odate of "1990-03-10" or "1990-04-10" using the "where" clause.

Expected Output: All orders from 3rd and 4th of October.

+------+---------+------------+------+------+
| ONUM | AMT     | ODATE      | CNUM | SNUM |
+------+---------+------------+------+------+
| 3001 |   18.69 | 1990-03-10 | 2008 | 1007 |
| 3003 |  767.19 | 1990-03-10 | 2001 | 1001 |
| 3002 |  1900.1 | 1990-03-10 | 2007 | 1004 |
| 3005 | 5160.45 | 1990-03-10 | 2003 | 1002 |
| 3006 | 1098.16 | 1990-03-10 | 2008 | 1007 |
| 3009 | 1713.23 | 1990-04-10 | 2002 | 1003 |
| 3007 |   75.75 | 1990-04-10 | 2004 | 1002 |
+------+---------+------------+------+------+

Tables involved: Orders



50) Find only those customers whose ratings are higher than every customer in Rome. 

Approach:

Select the cname column from customers where the rating is greater than all ratings of customers located in Rome, using a subquery to find the ratings of customers in Rome.

Expected Output:All the columns of the customer table who has a greater rating customer in "Rome" i.e. Grass and Cisneros

+----------+
| cname    |
+----------+
| Grass    |
| Cisneros |
+----------+

Tables involved: Customers



51) Write a query on the Customers table whose output will exclude all customers with a rating&lt;= 100.00, unless they are located in Rome. 

Approach:

Select all customers from the customers table where the rating is greater than 100 or the city is Rome, excluding customers with a rating less than or equal to 100 unless they are located in Rome.

Expected Output:  All the customers from Rome and customers who do have not 100 ratings.

+------+----------+---------+--------+------+
| CNUM | CNAME    | CITY    | RATING | SNUM |
+------+----------+---------+--------+------+
| 2002 | Giovanni | Rome    |    200 | 1003 |
| 2003 | Liu      | Sanjose |    200 | 1002 |
| 2004 | Grass    | Berlin  |    300 | 1002 |
| 2008 | Cisneros | SanJose |    300 | 1007 |
| 2007 | Pereira  | Rome    |    100 | 1004 |
+------+----------+---------+--------+------+

Tables involved: Customers



52) Find all rows from the customer’s table for which the salesperson number is 1001. 

Approach: Select all customers from the customers table where the rating is greater than 100 or the city is Rome, excluding customers with a rating less than or equal to 100 unless they are located in Rome.

Expected Output: All the columns from customers whose salespeople number is 1000 i.e Hoffman and Clemens

+------+---------+--------+--------+------+
| CNUM | CNAME   | CITY   | RATING | SNUM |
+------+---------+--------+--------+------+
| 2001 | Hoffman | London |    100 | 1001 |
| 2006 | Clemens | London |    100 | 1001 |
+------+---------+--------+--------+------+

Tables involved: Customers



53) Find the total amount in orders for each salesperson where their total of amounts are greater than the amount of the largest order in the table. 

Appraoch: Select the sname and total amount of orders for each salesperson, using an inner join between the salespeople and orders tables on snum, grouping by sname, and filtering with a "having" clause to include only salespeople with a total amount greater than the largest order amount in the orders table.

Expected Output: salespeople name and total amount of customers who has more total sales than maximum in the complete order table

+-------+------------+
| sname | SUM(o.amt) |
+-------+------------+
| Peel  |   15382.07 |
+-------+------------+

Tables involved: Salespeople, Orders



54) Write a query that selects all orders except those with zero or null in the Amt field from table.

Approach: Select onum, amount from orders except the fields where amt is not null.

Expected Output: onum and amt sets which are not null

+------+---------+
| onum | amt     |
+------+---------+
| 3001 |   18.69 |
| 3003 |  767.19 |
| 3002 |  1900.1 |
| 3005 | 5160.45 |
| 3006 | 1098.16 |
| 3009 | 1713.23 |
| 3007 |   75.75 |
| 3008 |    4723 |
| 3010 | 1309.95 |
| 3011 | 9891.88 |
+------+---------+

Tables involved: Orders



55) Produce all combinations of salespeople and customer names such that the former precedes the latter alphabetically, and the latter has a rating of less than 200. 

Approach: Select the sname and cname columns from the customers and salespeople tables, joining them on snum, and filtering with a "where" clause to include only combinations where sname precedes cname alphabetically, and the cname has a rating of less than 200.


Expected Output:Motika and Pereira satisfy the condition so there both of their name.

 +--------+---------+
| sname  | cname   |
+--------+---------+
| Motika | Pereira |
+--------+---------+

Tables involved: Salespeople, Customers



56) Find all salespeople name and commission. 

Approach: Select the sname and comm columns from the salespeople table to find all salespeople names and their corresponding commission.

Expected Output: sname and comm column from salespeople table.

+---------+------+
| sname   | comm |
+---------+------+
| Peel    |   12 |
| Serres  |   13 |
| AxelRod |   10 |
| Motika  |   11 |
| Rifkin  |   15 |
| Fran    |   25 |
+---------+------+

Tables involved: Salespeople



57) Write a query that produces the names and cities of all customers with the same rating as Hoffman. Write the query using Hoffman’s cnum rather than his rating, so that it would still be usable if his rating is changed. 
    
Approach:We will use subqueries to get the rating of Hoffman and then match it with the other customers' ratings.

Expected Output: customer name, number and city whose rating same as Hoffman i.e. Clemens and Pereira.

+------+---------+--------+
| cnum | cname   | city   |
+------+---------+--------+
| 2006 | Clemens | London |
| 2007 | Pereira | Rome   |
+------+---------+--------+

Tables involved:Customers



58) Find all salespeople for whom there are customers that follow them in alphabetical order. 

Approach: Select the sname and cname columns from the customers and salespeople tables, joining them on snum, and filtering with a "where" clause to include only combinations where there are customers that follow the salespeople in alphabetical order.

Expected Result: details of the salespeople whose satisfy the condition of alphabetical order i.e. AxelRod and Motika.

+---------+----------+
| sname   | cname    |
+---------+----------+
| AxelRod | Giovanni |
| Motika  | Pereira  |
+---------+----------+

Tables involved: Salespeople, Customers



59) Write a query that produces the names and ratings of all customers who have average orders. 

Approach: Join customers and orders tables, group by customer ID, and filter by those with the same order count as the average order count.

Expected Output: Names and ratings of all customers who have average no of orders

+------+----------+--------+----------------+
| CNUM | CNAME    | RATING | AVERAGE_ORDERS |
+------+----------+--------+----------------+
| 2001 | Hoffman  |    100 |              1 |
| 2007 | Pereira  |    100 |              1 |
| 2003 | Liu      |    200 |              1 |
| 2002 | Giovanni |    200 |              1 |
+------+----------+--------+----------------+



60) Find the SUM of all Amounts from the orders table. 

Appoach: This query will select the sum of the "amt" column from the "orders" table, providing the total amount across all orders.

Expected Result: Total amt from the order table.
+----------+
| sum(amt) |
+----------+
|  26658.4 |
+----------+

Tables involved:Orders



61) Write a SELECT command that produces the order number, amount, and the date from rows in the order table. 

Approach: Use "SELECT" command to retrieve "onum", "amt" and "odate" columns from "orders" table.

select onum, amt ,odate from orders;

Expected Output: onum, amt, and odate columns from order table with all the tuples.

+------+---------+------------+
| onum | amt     | odate      |
+------+---------+------------+
| 3001 |   18.69 | 1990-03-10 |
| 3003 |  767.19 | 1990-03-10 |
| 3002 |  1900.1 | 1990-03-10 |
| 3005 | 5160.45 | 1990-03-10 |
| 3006 | 1098.16 | 1990-03-10 |
| 3009 | 1713.23 | 1990-04-10 |
| 3007 |   75.75 | 1990-04-10 |
| 3008 |    4723 | 1990-05-10 |
| 3010 | 1309.95 | 1990-06-10 |
| 3011 | 9891.88 | 1990-06-10 |
+------+---------+------------+

Tables involved: Orders



62) Count the number of non NULL rating fields in the Customers table (including repeats). 

Approach:

Use COUNT function to calculate non-NULL "rating" fields in "customers" table. Use WHERE clause to filter out NULL values.


Expected Output: Number of not null rating customers

+---------------+
| count(rating) |
+---------------+
|             7 |
+---------------+

Tables involved: Customers



63) Write a query that gives the names of both the salesperson and the customer for each order after the order number.  

Approach: Join salespeople, orders, and customers tables based on snum and cnum to retrieve onum, sname, and cname for each order.

Expected Result:All the order number and their respective salespeople and customer.

+------+---------+----------+
| onum | sname   | cname    |
+------+---------+----------+
| 3003 | Peel    | Hoffman  |
| 3011 | Peel    | Clemens  |
| 3008 | Peel    | Clemens  |
| 3005 | Serres  | Liu      |
| 3010 | Serres  | Grass    |
| 3007 | Serres  | Grass    |
| 3009 | AxelRod | Giovanni |
| 3002 | Motika  | Pereira  |
| 3006 | Rifkin  | Cisneros |
| 3001 | Rifkin  | Cisneros |
+------+---------+----------+

Tables involved: Salespeople, Customers, Orders



64) List the commissions of all salespeople servicing customers in London.

Approach:  We will use inner join on salespeople and customers table to get the customer city and salespeople details together and then apply the condition of the city is London and will use DISTINCT to avoid duplicates.

Expected Result:salespeople servicing customers in London

+-------+------+
| sname | comm |
+-------+------+
| Peel  |   12 |
+-------+------+

Tables involved: Salespeople



65) Write a query using ANY or ALL that will find all salespeople who have no customers located in their city. 

Approach: Select the salespeople's names from the salespeople table where the snum is present in the result set of snum values retrieved from the customers table where the city is not equal to the salespeople's city. 

Expected Output:All the salespeople's names which are not located on same city i.e. AxelRod, Motika, Rifkin, and Fran

+---------+
| sname   |
+---------+
| Serres  |
| AxelRod |
| Motika  |
| Rifkin  |
+---------+

Tables involved: Salespeople, Customers



66) Write a query using the EXISTS operator that selects all salespeople with customers located in their cities who are not assigned to them. 

Approach: Retrieve all fields from salespeople table for salespeople who have customers in their city not assigned to them, using the EXISTS operator and subquery to match cities and snum.

Expected Result: snum, sname, city, and comm from the salespeople table which has the same city but a different customer. i.e Serres, Motika, and Fran.

+------+--------+---------+------+
| SNUM | SNAME  | CITY    | COMM |
+------+--------+---------+------+
| 1002 | Serres | SanJose |   13 |
| 1004 | Motika | London  |   11 |
| 1008 | Fran   | London  |   25 |
+------+--------+---------+------+

Tables involved: Salespeople, Customers



67) Write a query that selects all customers serviced by Peel or Motika. (Hint: The snum field relates the 2 tables to one another.) 

Approach: Retrieve all fields from customers table for customers serviced by Peel or Motika, using the salespeople table and subquery to match snum with the snum in the customers table.

Expected Result:  cnum, cname, city and rating with snum of each customers who as been served by Peel and Motika

+------+---------+--------+--------+------+
| CNUM | CNAME   | CITY   | RATING | SNUM |
+------+---------+--------+--------+------+
| 2001 | Hoffman | London |    100 | 1001 |
| 2006 | Clemens | London |    100 | 1001 |
| 2007 | Pereira | Rome   |    100 | 1004 |
+------+---------+--------+--------+------+

Tables involved: Salespeople, Customers



68) Count the number of salespeople registering orders for each day. (If a salesperson has more than one order on a given day, he or she should be counted only once.)

Approach: Retrieve the number of salespeople who register orders for each day using the orders table, grouping the results by odate and counting distinct snum for each day.

Expected Output: odate and count on each day i.e 4,2,1,2 according in ascending order.

+------------+-----------------------+
| odate      | count(distinct(snum)) |
+------------+-----------------------+
| 1990-03-10 |                     4 |
| 1990-04-10 |                     2 |
| 1990-05-10 |                     1 |
| 1990-06-10 |                     2 |
+------------+-----------------------+

Tables involved: Orders



69) Find all orders attributed to salespeople who live in London. 


Approach: 

Retrieve all fields from orders table for orders attributed to salespeople who live in London, using the salespeople table and subquery to match snum with the snum in the orders table.


Expected Output: All the columns from orders table where then salespeople city is London. i.e. 3003, 3008, 3011, and 3002 order number.

+------+---------+------------+------+------+
| ONUM | AMT     | ODATE      | CNUM | SNUM |
+------+---------+------------+------+------+
| 3003 |  767.19 | 1990-03-10 | 2001 | 1001 |
| 3002 |  1900.1 | 1990-03-10 | 2007 | 1004 |
| 3008 |    4723 | 1990-05-10 | 2006 | 1001 |
| 3011 | 9891.88 | 1990-06-10 | 2006 | 1001 |
+------+---------+------------+------+------+

Tables involved: Salespeople, Customers, Orders



70) Find all orders by customers not located in the same cities as their salespeople. 

Approach: Retrieve all fields from orders table for orders by customers who are not located in the same city as their salespeople. Use subqueries to match cnum with the cnum in customers table and match snum with the snum in the salespeople table, checking if the customer city is not equal to the salespeople city.

Expected Output: All the columns from the customer table where salespeople and customers' city are not the same

+------+---------+------------+------+------+
| ONUM | AMT     | ODATE      | CNUM | SNUM |
+------+---------+------------+------+------+
| 3001 |   18.69 | 1990-03-10 | 2008 | 1007 |
| 3002 |  1900.1 | 1990-03-10 | 2007 | 1004 |
| 3006 | 1098.16 | 1990-03-10 | 2008 | 1007 |
| 3009 | 1713.23 | 1990-04-10 | 2002 | 1003 |
| 3007 |   75.75 | 1990-04-10 | 2004 | 1002 |
| 3010 | 1309.95 | 1990-06-10 | 2004 | 1002 |
+------+---------+------------+------+------+

Tables involved: Salespeople, Customers, Orders



71) Find all salespeople who have customers with more than one current order. 

Approach: We will use inner join to join ssalespeople and customers table and then Group By them usnning cnum form orders table and use having clause ot filter out the customers with more than one orders

Expected Output:snum and sname from the salespeople table who have more than one orders ie. with Peel, Serres and Rifkin data.

+------+--------+
| snum | sname  |
+------+--------+
| 1001 | Peel   |
| 1002 | Serres |
| 1007 | Rifkin |
+------+--------+

Tables involved: Salespeople, Customers, Orders



72) Write a query that extracts from the customer’s table every customer assigned to a salesperson, who is currently having at least one another customer(besides the customer being selected) with orders in the Orders Table. 

Approach: Retrieve all fields from customers table for every customer assigned to a salesperson who currently has at least one other customer with orders in the Orders table. Use a subquery to group customers by snum and count the number of customers for each snum, filtering the results to only include snums that have more than one customer. Use the resulting snums to select the customers that are assigned to those salespeople.

Expected Output: All the column from customer table who has more than single salespeople.

+------+---------+---------+--------+------+
| CNUM | CNAME   | CITY    | RATING | SNUM |
+------+---------+---------+--------+------+
| 2001 | Hoffman | London  |    100 | 1001 |
| 2003 | Liu     | Sanjose |    200 | 1002 |
| 2004 | Grass   | Berlin  |    300 | 1002 |
| 2006 | Clemens | London  |    100 | 1001 |
+------+---------+---------+--------+------+

Tables involved: Customers



73) Write a query on the customer’s table that will find the highest rating in each city. Put the output in this form: for the city (city), the highest rating is (rating). 

Approach: Retrieve the city and highest rating for each city from customers table, grouping the results by city and using the MAX function to get the highest rating for each group. 

Expected Output:All the four cities with their higher rating from customer table.

+---------+-------------+
| city    | max(rating) |
+---------+-------------+
| London  |         100 |
| Rome    |         200 |
| Sanjose |         300 |
| Berlin  |         300 |
+---------+-------------+

Tables involved: Customers



74) Write a query that will produce the snum values of all salespeople with orders, having amt greater than 1000 in the Orders Table(without repeats). 

Approach: Retrieve the distinct snum values of all salespeople with orders having amt greater than 1000 from the Orders table. Group the results by snum, onum, cnum, amt, and odate.

Expected Output:snum, onum and amt, odate and cnum from orders table which has more than 1000 int amt column.

+------+------+---------+------------+------+
| snum | onum | amt     | odate      | cnum |
+------+------+---------+------------+------+
| 1004 | 3002 |  1900.1 | 1990-03-10 | 2007 |
| 1002 | 3005 | 5160.45 | 1990-03-10 | 2003 |
| 1007 | 3006 | 1098.16 | 1990-03-10 | 2008 |
| 1003 | 3009 | 1713.23 | 1990-04-10 | 2002 |
| 1001 | 3008 |    4723 | 1990-05-10 | 2006 |
| 1002 | 3010 | 1309.95 | 1990-06-10 | 2004 |
| 1001 | 3011 | 9891.88 | 1990-06-10 | 2006 |
+------+------+---------+------------+------+

Tables involved: Orders



75) Write a query that lists customers in a descending order of rating. Output the rating field first, followed by the customer’s names and numbers. 

Approach: Retrieve the rating, cname, and cnum fields from customers table, sorting the results in descending order by rating. List the rating field first, followed by the cname and cnum fields.

Expected Output:rating, cname, and cnum columns from the customers table in descending order by rating.

+--------+----------+------+
| rating | cname    | cnum |
+--------+----------+------+
|    300 | Grass    | 2004 |
|    300 | Cisneros | 2008 |
|    200 | Giovanni | 2002 |
|    200 | Liu      | 2003 |
|    100 | Hoffman  | 2001 |
|    100 | Clemens  | 2006 |
|    100 | Pereira  | 2007 |
+--------+----------+------+

Tables involved: Customers



76) Find the average commission for salespeople in London. 

Approach: Calculate the average commission of London salespeople by selecting the average of the "comm" column from the "salespeople" table where "city" is London.

Expected Output: average commission in london city.

+-----------+
| avg(comm) |
+-----------+
|   16.0000 |
+-----------+

Tables involved: Salespeople

 

77) Find all orders credited to the same salesperson who services Hoffman.(cnum 2001). 

Approach: Retrieve all orders assigned to the salesperson who serves customer "Hoffman", by selecting all rows from the "orders" table where "snum" is in the subquery selecting "snum" from "customers" where "cname" is "Hoffman".\

Expected Output: All the columns of orders table and tuples having salesperson number as 1001 i.e. order number 3003, 3008, and 3011.

+------+---------+------------+------+------+
| ONUM | AMT     | ODATE      | CNUM | SNUM |
+------+---------+------------+------+------+
| 3003 |  767.19 | 1990-03-10 | 2001 | 1001 |
| 3008 |    4723 | 1990-05-10 | 2006 | 1001 |
| 3011 | 9891.88 | 1990-06-10 | 2006 | 1001 |
+------+---------+------------+------+------+

Tables involved: Customers, Orders



78) Find all salespeople whose commission is in between 0.10 and 0.12(both inclusive). 

Approach: Retrieve all salespeople whose commission falls between 0.10 and 0.12 (inclusive), by selecting all rows from the "salespeople" table where the "comm" column is between 10 and 12.

select * from salespeople where comm between 10 and 12;

Expected Output:salespeople whose commission is in between 0.10 and 0.12

+------+---------+----------+------+
| SNUM | SNAME   | CITY     | COMM |
+------+---------+----------+------+
| 1001 | Peel    | London   |   12 |
| 1003 | AxelRod | New York |   10 |
| 1004 | Motika  | London   |   11 |
+------+---------+----------+------+

Tables involved: Salespeople



79) Write a query that will give you the names and cities of all salespeople in London with a commission above 0.10.

Approach:

Retrieve the names and cities of all salespeople in London with a commission greater than 0.10, by selecting "sname" and "city" columns from the "salespeople" table where "city" is "London" and "comm" is greater than 10.

Expected Output: names and cities of all salespeople in London with a commission above 0.10, ie of Peel, Motika and Fran

+--------+--------+
| sname  | city   |
+--------+--------+
| Peel   | London |
| Motika | London |
| Fran   | London |
+--------+--------+

Tables involved: Salespeople



80) Write a query that selects each customer’s smallest order. 

Approach: Using SQL: Retrieve the smallest order amount for each customer, by selecting "cnum", "cname", and the minimum value of "amt" column from "customers" and "orders" tables joined on "cnum" and grouped by "cnum" and "cname".

Expected Output: cnum, cname and minimum amt order placed by each customer

+------+----------+----------+
| cnum | cname    | min(amt) |
+------+----------+----------+
| 2008 | Cisneros |    18.69 |
| 2001 | Hoffman  |   767.19 |
| 2007 | Pereira  |   1900.1 |
| 2003 | Liu      |  5160.45 |
| 2002 | Giovanni |  1713.23 |
| 2004 | Grass    |    75.75 |
| 2006 | Clemens  |     4723 |
+------+----------+----------+

Tables involved: Customers



81) Write a query that selects the first customer in alphabetical order whose name begins with ‘G’. 


Approach: Retrieve the first customer in alphabetical order whose name starts with 'G', by selecting all columns from the "customers" table where "cname" starts with "G" and limiting the result to 1 row using "limit" keyword.

Expected Output: First customer whose name start with g character i.e. Giovanni

+------+----------+------+--------+------+
| CNUM | CNAME    | CITY | RATING | SNUM |
+------+----------+------+--------+------+
| 2002 | Giovanni | Rome |    200 | 1003 |
+------+----------+------+--------+------+

Tables involved: Customers



82) Write a query that counts the number of different non NULL city values in the customers table. 

Approach: Count the number of distinct non-NULL city values in the customers table, by selecting the count of distinct "city" column from customers table where "city" is not null.

Expected Output:  number of different non NULL city values in the customers table ie 4

+-----------------------+
| count( distinct city) |
+-----------------------+
|                     4 |
+-----------------------+

Tables involved: Customers



83) Find the average amount from the Orders Table. 

Approach: Calculate the average amount from the "orders" table by selecting the average of the "amt" column.

Expected Output: avg(amt) from orders table which sum of all the orders amt divided by total number of orders.

+----------+
| avg(amt) |
+----------+
|  2665.84 |
+----------+

Tables involved: Orders



84) Find all customers who are not located in SanJose and whose rating is above 200. 

Approach: Retrieve all customers whose "city" is not "SanJose" and "rating" is greater than 200.

Expected Output: All the details of the customer named Grass as all the condition are matched with him.
Actual Output:

+------+-------+--------+--------+------+
| CNUM | CNAME | CITY   | RATING | SNUM |
+------+-------+--------+--------+------+
| 2004 | Grass | Berlin |    300 | 1002 |
+------+-------+--------+--------+------+

Tables involved: Customers



85) Give a simpler way to write this query.SELECT snum, sname, city, comm FROM salespeople WHERE (comm > + 0.12 OR comm &lt; 0.14); 

Approach: Simplify the query to retrieve salespeople with a commission greater than 0.12 or less than 0.14, by selecting all columns from the "salespeople" table where "comm" is greater than 12 or less than 14.

Expected Output:all the column of the salespeople table containing all the tuples. 

+------+---------+------------+------+
| SNUM | SNAME   | CITY       | COMM |
+------+---------+------------+------+
| 1001 | Peel    | London     |   12 |
| 1002 | Serres  | SanJose    |   13 |
| 1003 | AxelRod | New York   |   10 |
| 1004 | Motika  | London     |   11 |
| 1007 | Rifkin  | Barcenlona |   15 |
| 1008 | Fran    | London     |   25 |
+------+---------+------------+------+

Tables involved: Salespeople



86) Which salespersons attend to customers not in the city they have been assigned to? 

Approach:  Retrieve salespeople who are assigned to a different city than the city of their customers, by selecting all rows from the "salespeople" table where "snum" is in the subquery selecting "snum" from "customers" where "salespeople.city" is not equal to "customers.city".

Expected Output: All the column from customer table where the cities do not match with their customer customers i.e. AxelRod, Serres, Motika, and Rifkin

+------+---------+------------+------+
| SNUM | SNAME   | CITY       | COMM |
+------+---------+------------+------+
| 1002 | Serres  | SanJose    |   13 |
| 1003 | AxelRod | New York   |   10 |
| 1004 | Motika  | London     |   11 |
| 1007 | Rifkin  | Barcenlona |   15 |
+------+---------+------------+------+

Tables involved: Salespeople, Customers



87) Which salespeople get commission greater than 0.11 are serving customers rated less than 250? 

Approach:Retrieve salespeople whose commission is greater than 0.11 and are serving customers with a rating less than 250, by selecting "sname", "comm", and "rating" columns from the "salespeople" and "customers" tables joined on "snum" where "rating" is less than 250 and "comm" is greater than 11.

Expected Output: sname,cname and customer_rating of salespeople who satisfies the condition i.e. Peel, Serres, AxelRod and Motika.

+--------+------+--------+
| sname  | comm | rating |
+--------+------+--------+
| Peel   |   12 |    100 |
| Peel   |   12 |    100 |
| Serres |   13 |    200 |
+--------+------+--------+

Tables involved: Salespeople, Customers




88) Which salespeople have been assigned to the same city but get different commission percentages? 

Approach: Retrieve salespeople who have been assigned to the same city but have different commission percentages, by joining the "salespeople" table with itself using different aliases, then selecting "snum", "sname" of both salespeople where their "snum" is not equal and their "city" is the same, and grouping by "snum", "sname" of both salespeople.

Expected Output:  All the salespeople from same city but different commission percentages

+------+--------+--------+
| snum | sname  | sname  |
+------+--------+--------+
| 1001 | Peel   | Motika |
| 1001 | Peel   | Fran   |
| 1004 | Motika | Fran   |
+------+--------+--------+

Tables involved: Salespeople






89) Which salesperson has earned the maximum commission? 

Approach: Retrieve the salesperson who has earned the maximum commission, by selecting "sname" column from the "salespeople" table where "comm" is equal to the subquery selecting the maximum "comm" from the "salespeople" table. 

if assuming commision as commision earnedm, we can use inner join to join salespeople and orders table and use group by and having to select the snum with thw commosions earned and then we can limit the results to 1

Expected Output:  salespeople how as maximum commission in salespeople table.

// assuming commision is commision percentage

+-------+
| sname |
+-------+
| Fran  |
+-------+

// assuming commision is total amount of commision earned

+------+-------+--------------------+
| snum | sname | Commision          |
+------+-------+--------------------+
| 1001 | Peel  | 1845.8483999999999 |
+------+-------+--------------------+


Tables involved: Salespeople, Orders




90) Does the customer who has placed the maximum number of orders have the maximum rating? 

Approach: We can count the maximum rating for each customer from the or ders table using the aggregate function in a subquery then match the same count from the inner joined table of customers and the orders table on the customer number, we can use IF clause to check if the customer who has placed the maximum number of orders have the maximum rating

Expected Output: cnum, rating, cnum, and orders count columns of the customers and the verdict.

+----------+------+--------+--------------------+---------+
| cname    | cnum | rating | count(orders.cnum) | verdict |
+----------+------+--------+--------------------+---------+
| Cisneros | 2008 |    300 |                  2 | YES     |
| Grass    | 2004 |    300 |                  2 | YES     |
| Clemens  | 2006 |    100 |                  2 | NO      |
+----------+------+--------+--------------------+---------+

Tables involved: Customers, Orders



91) List all customers in descending order of customer rating. 

Approach: Retrieve all customers in descending order of their rating, by selecting "cname" column from the "customers" table ordered by "rating" in descending order.

Expected Output:cname of customers in descending order of customer rating. 

+----------+
| cname    |
+----------+
| Grass    |
| Cisneros |
| Giovanni |
| Liu      |
| Hoffman  |
| Clemens  |
| Pereira  |
+----------+

Tables involved: Customers



92) On which days has Hoffman placed orders? 

Approach: Retrieve the days on which Hoffman has placed orders, by selecting "odate" column from the "orders" table where "cnum" is in the subquery selecting "cnum" from the "customers" table where "cname" is equal to "Hoffman".

Expected Output:days in whch Hoffman placed orders ie 1990-03-10

+------------+
| odate      |
+------------+
| 1990-03-10 |
+------------+

Tables involved: Customers, Orders



93) Which salesmen have no orders between 10/03/1990 and 10/05/1990? 

Approach: Retrieve the salespeople who have no orders between 10/03/1990 and 10/05/1990, by joining the "salespeople" table with the "orders" table using "snum" column and selecting "sname" column from the "salespeople" table where "odate" is not between "1990-03-10" and "1990-05-10".

Expected Output:alesmen have no orders between 10/03/1990 and 10/05/1990 ie Serres and Peel

+--------+
| sname  |
+--------+
| Serres |
| Peel   |
+--------+

Tables involved: Salespeople, Orders



94) How many salespersons have succeeded in getting orders? 

Approach: Retrieve the count of salespeople who have succeeded in getting orders, by selecting the distinct count of "snum" column from the "orders" table with alias "No of salespeople with orders".

Expected Output:number of salespeople who succeeded in getting order i.e 5.

+-------------------------------+
| No of salespeople with orders |
+-------------------------------+
|                             5 |
+-------------------------------+

Tables involved: Salespeople, Orders



95) How many customers have placed orders? 

Approach: Retrieve the count of customers who have placed orders, by selecting the distinct count of "cnum" column from the "orders" table.


Expected Output: all the customers who have placed order i.e 7 customers who have placed order.

+-----------------------+
| count(distinct(cnum)) |
+-----------------------+
|                     7 |
+-----------------------+

Tables involved: Orders



96) On which date has each salesman booked an order of maximum value? 

Approach: Retrieve the salesman name, order date, and the maximum order amount booked by the salesman by joining the "salespeople" and "orders" tables on the "snum" column and grouping the result by the "snum" column.

Expected Output:sname and odate from salespeople and orders to get maximum order placed by each salespeople on dates.

+---------+------------+----------+
| sname   | odate      | max(amt) |
+---------+------------+----------+
| Rifkin  | 1990-03-10 |  1098.16 |
| Peel    | 1990-03-10 |  9891.88 |
| Motika  | 1990-03-10 |   1900.1 |
| Serres  | 1990-03-10 |  5160.45 |
| AxelRod | 1990-04-10 |  1713.23 |
+---------+------------+----------+

Tables involved: Salespeople, Orders



97) Who is the most successful salesperson? 

Approach: Join the Salespeople and Orders tables on the snum attribute, group the result set by snum, calculate the sum of the AMT attribute for each salesperson, orders the result set by total_amount in descending order, and then limit the output to one row. 

Expected Output:The number and name and order amount of salesperson with max total amount of orders.

+-------+--------------+
| SNAME | total_amount |
+-------+--------------+
| Peel  |     15382.07 |
+-------+--------------+

Tables involved: Salespeople, Orders



98) Which customers have the same rating? 

Approach: Retrieve names of customers with same rating using self-join on customers table, comparing customer number and filtering by rating.

Expected Output: Customers having the same rating

+----------+----------+
| cname    | cname    |
+----------+----------+
| Giovanni | Liu      |
| Hoffman  | Clemens  |
| Grass    | Cisneros |
| Clemens  | Pereira  |
| Hoffman  | Pereira  |
+----------+----------+

Tables involved: Customers



99) Find all orders greater than the average for October 4th. 

Approach: Fetch orders with amount greater than average amount of orders made on October 4th 1990.

Expected Output: all orders greater than the average for October 4th, ie onum 3002, 3005, 3006, 3008, 3009, 3010, and 3011

+------+---------+------------+------+------+
| ONUM | AMT     | ODATE      | CNUM | SNUM |
+------+---------+------------+------+------+
| 3002 |  1900.1 | 1990-03-10 | 2007 | 1004 |
| 3005 | 5160.45 | 1990-03-10 | 2003 | 1002 |
| 3006 | 1098.16 | 1990-03-10 | 2008 | 1007 |
| 3009 | 1713.23 | 1990-04-10 | 2002 | 1003 |
| 3008 |    4723 | 1990-05-10 | 2006 | 1001 |
| 3010 | 1309.95 | 1990-06-10 | 2004 | 1002 |
| 3011 | 9891.88 | 1990-06-10 | 2006 | 1001 |
+------+---------+------------+------+------+

Tables involved: Orders



100) List all customers with ratings above Grass’s average. 

Approach: Retrieve customers with rating higher than average rating of Grass using subquery to calculate Grass's average.

Expected Output: We can use a subquery to get the average rating of the customer named grass then compares it with other customers' ratings if greater then include it in the result.

Empty set (0.0010 sec)

Tables involved: Customers



101) Which customers have above average orders? 

Approach: Retrieve names of customers who have orders with amount greater than average amount of all orders using subquery to calculate average amount.

Expected Output: All the column of customers table and tuples who has more order amt than average i.e Liu, Clemens.

+---------+
| cname   |
+---------+
| Liu     |
| Clemens |
+---------+

Tables involved: Customers, Orders




102) Select the total amount in orders for each salesperson for which the total is greater than the amount of the largest order in the table.

Approach: Fetch total amount of orders for each salesperson and filter results to show only those whose total amount is greater than the largest order in the table.

Expected Output: Peel (1001) is only one who has amt greater than largest order in order table.

+------+----------+
| snum | sum(amt) |
+------+----------+
| 1001 | 15382.07 |
+------+----------+

Tables involved: Orders



103) Give names and numbers of all salespersons that have more than one customer? 

Approach:Retrieve names and numbers of salespeople who have more than one customer, using subquery to count customers per salesperson.

Expected Output: sname and sum of all the salespeople who has more than one customer i.e. Peel and Serres

+--------+------+
| sname  | snum |
+--------+------+
| Peel   | 1001 |
| Serres | 1002 |
+--------+------+

Tables involved: Salespeople, Customers



104) Select all salespeople by name and number who have customers in their city whom they don’t service. 
    
Approach: Retrieve names and numbers of salespeople, and names of customers who are in the same city but not serviced by that salesperson, by joining salespeople and customers table on city and excluding matches on snum.


Expected Output: sname and snum, city from salespeople where salespeople city matches to customer.

+--------+----------+---------+
| sname  | cname    | city    |
+--------+----------+---------+
| Fran   | Hoffman  | London  |
| Motika | Hoffman  | London  |
| Fran   | Clemens  | London  |
| Motika | Clemens  | London  |
| Serres | Cisneros | SanJose |
+--------+----------+---------+

Tables involved: Salespeople, Customers



105) Does the total amount in orders by customer in Rome and London, exceed the commission paid to salesperson in London, and New York by more than 5 times? 

Approach: Join the ORDERS, CUSTOMERS, and SALESPEOPLE tables and calculate whether the total amount in orders by customers in Rome and London exceed the commission paid to salespeople in London and New York by more than 5 times. Use the IF statement to output "Yes" if the condition is true and vice versa.

Expected Output: Verdict that total amount in orders by customer in Rome and London, exceed the commission paid to salesperson in London, and New York by more than 5 times or not.

+---------+
| Verdict |
+---------+
| Yes     |
+---------+

Tables involved: Salespeople, Orders



106) Which are the date, order number, amt and city for each salesperson (by name) for the maximum order he has obtained?  

Approach: Fetch the name of the salesperson, date, order number, amount and city for their maximum order by using subquery to determine maximum order amount per salesperson and comparing with orders table.

Expected Output: odate, onum, amt, city, and sname from order and salespeople table where the salespeople has maximum order amount.

+---------+------+------------+---------+
| sname   | onum | odate      | amt     |
+---------+------+------------+---------+
| Motika  | 3002 | 1990-03-10 |  1900.1 |
| Serres  | 3005 | 1990-03-10 | 5160.45 |
| Rifkin  | 3006 | 1990-03-10 | 1098.16 |
| AxelRod | 3009 | 1990-04-10 | 1713.23 |
| Peel    | 3011 | 1990-06-10 | 9891.88 |
+---------+------+------------+---------+

Tables involved: Salespeople, Orders



107) Which salesperson is having lowest commission? 

Approach: Retrieve salesperson with the lowest commission by comparing the comm column with the minimum value of the comm column in the same table using subquery.

Expected Output:snum, sname, city and comm column from salespeople and tuples with minimum commission.

+------+---------+----------+------+
| SNUM | SNAME   | CITY     | COMM |
+------+---------+----------+------+
| 1003 | AxelRod | New York |   10 |
+------+---------+----------+------+

Tables involved: Salespeople